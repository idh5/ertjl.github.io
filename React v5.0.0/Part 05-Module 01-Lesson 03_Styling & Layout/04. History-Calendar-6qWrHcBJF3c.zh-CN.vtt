WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.580
我们已经在这里显示了所有日历信息

00:00:04.580 --> 00:00:08.050
下一步是渲染日历

00:00:08.050 --> 00:00:11.750
转到终端

00:00:11.750 --> 00:00:20.574
运行 yard add 该组件的名称是 udacifitness-calendar

00:00:20.574 --> 00:00:23.419
安装完毕后 重启应用

00:00:23.420 --> 00:00:28.070
回到 History.js 文件

00:00:28.070 --> 00:00:31.605
我们需要导入 UdaciFitnessCalendar

00:00:31.605 --> 00:00:38.210
来自于我们刚刚安装的组件

00:00:38.210 --> 00:00:41.270
现在我们不再渲染

00:00:41.270 --> 00:00:45.108
this.props 的字符串化版本

00:00:45.107 --> 00:00:47.599
而是渲染日历

00:00:47.600 --> 00:00:50.689
并且需要传入一些内容

00:00:50.689 --> 00:00:54.754
首先获取 entries

00:00:54.755 --> 00:00:59.450
也就是 this.props 提供的完整日历

00:00:59.450 --> 00:01:02.975
向 UdaciFitnessCalendar 传入几项参数

00:01:02.975 --> 00:01:06.370
首先是一些 items 即 entries

00:01:06.370 --> 00:01:13.515
然后是 renderItem 属性和 renderEmptyDate 属性

00:01:13.515 --> 00:01:15.200
对于这个属性

00:01:15.200 --> 00:01:20.335
我们向其传入一个函数

00:01:20.335 --> 00:01:22.644
并返回一些 UI 或一些 JSX

00:01:22.644 --> 00:01:25.685
当日历渲染特定的某一天时 将渲染它

00:01:25.685 --> 00:01:29.390
如果这一天为空

00:01:29.390 --> 00:01:31.400
则渲染传递给 renderEmptyDate 的

00:01:31.400 --> 00:01:34.200
这个函数返回的 JSX

00:01:34.200 --> 00:01:36.200
我们看看是什么情况

00:01:36.200 --> 00:01:38.810
对于 renderItem

00:01:38.810 --> 00:01:41.734
我们将创建一个方法 叫做 renderItem

00:01:41.734 --> 00:01:44.840
对于 renderEmptyDate 你可能已经猜到了

00:01:44.840 --> 00:01:47.710
我们将创建一个方法 叫做 renderEmptyDate

00:01:47.709 --> 00:01:52.909
首先输入 renderItem

00:01:52.909 --> 00:01:58.969
它将传入一个对象 其中具有 today 属性以及所有的指标

00:01:58.969 --> 00:02:04.246
这个项目将成为...

00:02:04.246 --> 00:02:07.400
我们转到 AddEntry 文件

00:02:07.400 --> 00:02:12.310
它将看起来是这样的

00:02:12.310 --> 00:02:14.805
我们转到 helpers 文件

00:02:14.805 --> 00:02:18.379
或者看起来是这样的

00:02:18.379 --> 00:02:23.109
具体取决于当天的 redux 状态

00:02:23.110 --> 00:02:28.550
因此这个将是 redux store 中的日期

00:02:28.550 --> 00:02:33.320
下一项是 formattedDate 然后获得 key

00:02:33.319 --> 00:02:35.254
我们将在这里…

00:02:35.254 --> 00:02:41.664
将这个改成小括号 以便获得隐式返回内容

00:02:41.664 --> 00:02:46.669
输入 View 如果 today 存在的话

00:02:46.669 --> 00:02:50.030
表示我们没有输入当天的信息

00:02:50.030 --> 00:02:53.914
再次使用 JSON.stringify

00:02:53.914 --> 00:02:57.530
传入 today

00:02:57.530 --> 00:03:02.405
如果 today 不存在的话 意味着这是我们已经输入信息的上一天

00:03:02.405 --> 00:03:05.360
我们直接传入 metrics

00:03:05.360 --> 00:03:08.390
renderItem 暂时就是这些作用

00:03:08.389 --> 00:03:13.069
接着 输入 renderEmptyDate

00:03:13.069 --> 00:03:19.025
如果在 redux 状态中这一天的特定项为空 则 renderEmptyDate 被调用

00:03:19.025 --> 00:03:22.789
同样传入 formattedDate

00:03:22.789 --> 00:03:27.229
这个不需要成为箭头函数 因为我们在括号里使用这个关键字

00:03:27.229 --> 00:03:29.409
因此可以删了这些

00:03:29.409 --> 00:03:32.824
在这里返回一个 View

00:03:32.824 --> 00:03:37.544
里面具有文本

00:03:37.544 --> 00:03:41.264
内容为 No Data for this day

00:03:41.264 --> 00:03:44.594
现在看起来挺正常

00:03:44.594 --> 00:03:46.625
当日历被渲染时

00:03:46.625 --> 00:03:50.150
如果我们输入这一天的信息

00:03:50.150 --> 00:03:52.939
我们将获得这个 UI

00:03:52.939 --> 00:03:54.229
如果没有输入 则获得这个 UI

00:03:54.229 --> 00:03:57.893
因为我们只是渲染这个组件

00:03:57.893 --> 00:04:01.724
因此没必要在这里添加这个 view 组件

00:04:01.724 --> 00:04:05.014
快速调整下缩进格式

00:04:05.014 --> 00:04:09.349
现在转到 App.js 文件

00:04:09.349 --> 00:04:12.439
添加一个 View

00:04:12.439 --> 00:04:16.194
将 height 设为 20 暂时将状态栏挪开

00:04:16.194 --> 00:04:19.110
最终会将这个替换为实际的状态栏

00:04:19.110 --> 00:04:21.199
暂时视图能正常显示

00:04:21.199 --> 00:04:26.629
现在刷新下应用

00:04:26.629 --> 00:04:31.125
这里出现了日历

00:04:31.125 --> 00:04:33.889
如果选择一天

00:04:33.889 --> 00:04:37.584
屏幕上将显示所选日期

00:04:37.584 --> 00:04:41.269
以及之后日期的所有信息

00:04:41.269 --> 00:04:43.879
如果当天没有信息

00:04:43.879 --> 00:04:47.000
则提示：No Data for this day

