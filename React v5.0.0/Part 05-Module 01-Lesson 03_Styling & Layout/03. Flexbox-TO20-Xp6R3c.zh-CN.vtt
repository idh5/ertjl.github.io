WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.309
我们讨论了 React Native 如何通过在 JSX 中使用 CSS

00:00:04.309 --> 00:00:08.839
向应用添加样式 具体而言 是向组件添加样式

00:00:08.839 --> 00:00:10.679
但是我们没有讨论的是

00:00:10.679 --> 00:00:12.987
React Native 如何处理布局

00:00:12.987 --> 00:00:15.439
如果你已经有一段时间的网络应用开发经验的话

00:00:15.439 --> 00:00:19.144
可能就会熟悉块模型和浮动

00:00:19.144 --> 00:00:22.804
根据 MDN 的定义 悬浮 CSS 属性

00:00:22.804 --> 00:00:27.704
规定元素应该放置在容器的左侧或右侧

00:00:27.704 --> 00:00:30.794
并且文本和内嵌元素应该包裹在周围

00:00:30.795 --> 00:00:36.609
换句话说 浮动使我们能够指定元素如何相互放置

00:00:36.609 --> 00:00:40.211
如果你知晓过去几年内 CSS 中的一些布局可选方式

00:00:40.212 --> 00:00:42.785
可能就会听过 flexbox

00:00:42.784 --> 00:00:44.539
同样根据 MDN 的定义

00:00:44.539 --> 00:00:47.659
flexbox 是一种旨在满足不同屏幕尺寸

00:00:47.659 --> 00:00:51.769
和不同显示屏设备的布局模式

00:00:51.770 --> 00:00:54.875
对于很多应用来说 flexible box 模型

00:00:54.875 --> 00:00:59.019
比块级模型更容易实现 因为它不使用浮动

00:00:59.020 --> 00:01:03.455
Flexbox 本质上是旧版块级模型布局的替代形式

00:01:03.454 --> 00:01:05.090
并且很多人

00:01:05.090 --> 00:01:07.915
都觉得它性能提高了很多

00:01:07.915 --> 00:01:10.760
很自然地 react native 选择

00:01:10.760 --> 00:01:14.005
通过 flexbox 来实现布局 而不是原来的块级模型

00:01:14.004 --> 00:01:16.339
如果你不知道 flexbox 的话 别担心

00:01:16.340 --> 00:01:19.174
整个下一部分都会讲解 flexbox

00:01:19.174 --> 00:01:22.219
如果你知道什么是 flexbox 的话 那很棒

00:01:22.219 --> 00:01:24.739
但是 官方 flexbox 规范与 react native

00:01:24.739 --> 00:01:27.019
对 flexbox 的实现之间存在一些细微差别

00:01:27.019 --> 00:01:30.000
我们也会讲解到

