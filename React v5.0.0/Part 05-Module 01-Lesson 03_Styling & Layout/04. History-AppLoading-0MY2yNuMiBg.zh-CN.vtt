WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:06.040
我们的应用看起来很棒 但是你会发现一个问题

00:00:06.040 --> 00:00:07.783
尤其是在 Android 上

00:00:07.783 --> 00:00:10.030
当我点击刷新时

00:00:10.029 --> 00:00:13.129
你会发现一些摇晃的画面

00:00:13.130 --> 00:00:16.475
出现了这个屏幕 然后进入应用中

00:00:16.475 --> 00:00:21.100
我们希望尽量避免这种卡顿现象

00:00:21.100 --> 00:00:22.450
在应用准备好之前

00:00:22.449 --> 00:00:24.859
我们想要显示一个加载屏幕

00:00:24.859 --> 00:00:28.794
我们可以转到 History 文件

00:00:28.795 --> 00:00:35.170
从 expo 导入这个叫做 AppLoading 的组件

00:00:35.170 --> 00:00:43.340
然后转到这里 将 ready 设为 false

00:00:43.340 --> 00:00:46.440
现在 state 上具有叫做 ready 的属性

00:00:46.439 --> 00:00:50.039
然后转到 render 中

00:00:50.039 --> 00:00:53.549
从 state 中获取该 ready 属性

00:00:53.549 --> 00:00:57.684
如果 ready 等于 false

00:00:57.685 --> 00:01:02.045
则返回 AppLoading

00:01:02.045 --> 00:01:04.135
在准备好之前

00:01:04.135 --> 00:01:07.170
显示这个加载组件

00:01:07.170 --> 00:01:08.859
现在我们需要弄明白

00:01:08.859 --> 00:01:14.920
当应用准备好所有数据后 我们需要告诉并更新 ready

00:01:14.920 --> 00:01:17.245
我们可以转到这里

00:01:17.245 --> 00:01:23.185
链上另一个 .then

00:01:23.185 --> 00:01:25.570
当所有这一切发生时

00:01:25.569 --> 00:01:26.949
一切完成后

00:01:26.950 --> 00:01:29.935
运行 this.setState

00:01:29.935 --> 00:01:32.750
将 ready 设为 true

00:01:32.750 --> 00:01:36.609
这并不能解决我们的所有问题

00:01:36.609 --> 00:01:40.355
因为当这个函数解析后 就会立即调用这个

00:01:40.355 --> 00:01:42.745
但是的确离目标更近了

00:01:42.745 --> 00:01:45.829
当我们的应用刷新时

00:01:45.829 --> 00:01:48.957
依然出现了短暂的闪屏现象

00:01:48.957 --> 00:01:51.000
但是好些了

