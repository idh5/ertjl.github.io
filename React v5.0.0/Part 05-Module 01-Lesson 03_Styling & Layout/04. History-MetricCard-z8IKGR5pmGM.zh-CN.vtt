WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.879
下一步

00:00:01.879 --> 00:00:05.750
是对这部分设置样式

00:00:05.750 --> 00:00:09.875
我们将为这一部分创建一个组件

00:00:09.875 --> 00:00:13.140
称之为 MetricCard

00:00:13.140 --> 00:00:17.000
然后 我们需要导入 react

00:00:17.000 --> 00:00:20.089
还需要导入

00:00:20.089 --> 00:00:23.269
View、StyleSheet 和 Text

00:00:23.269 --> 00:00:26.230
它们都来自 react-native 组件

00:00:26.230 --> 00:00:30.230
接着 导入 DateHeader 组件

00:00:30.230 --> 00:00:32.465
从 helpers 文件中

00:00:32.465 --> 00:00:37.400
导入 getMetricMetaInfo

00:00:37.399 --> 00:00:45.820
最后 从 utils/colors 中导入 grey

00:00:45.820 --> 00:00:50.530
这将是一个无状态函数式组件

00:00:50.530 --> 00:00:54.560
它将接收 date 以及所有的指标

00:00:54.560 --> 00:00:59.165
返回一个 view

00:00:59.164 --> 00:01:00.859
现在

00:01:00.859 --> 00:01:03.109
如果存在 date

00:01:03.109 --> 00:01:06.935
则渲染 DateHeader

00:01:06.935 --> 00:01:09.045
传入特定的 date

00:01:09.045 --> 00:01:11.030
如果没有 date

00:01:11.030 --> 00:01:14.474
则不需要渲染任何内容

00:01:14.474 --> 00:01:16.699
接着

00:01:16.700 --> 00:01:19.204
输入 object.keys(metrics)

00:01:19.204 --> 00:01:25.625
获得一个数组 所有项目是指标的键

00:01:25.625 --> 00:01:28.370
然后对其调用 .map

00:01:28.370 --> 00:01:30.770
我们之前见过这些代码

00:01:30.769 --> 00:01:33.409
在这里输入 metric

00:01:33.409 --> 00:01:34.819
现在

00:01:34.819 --> 00:01:37.084
输入 getIcon

00:01:37.084 --> 00:01:44.079
displayName… 获取所有的属性 包括 unit 和 backgroundColor

00:01:44.079 --> 00:01:47.769
来自于 getMetricMetaInfo 返回的信息

00:01:47.769 --> 00:01:52.009
向 getMetricMetaInfo 传入特定的 metric

00:01:52.010 --> 00:01:55.454
然后是这部分的 UI

00:01:55.454 --> 00:01:57.094
将为一个视图

00:01:57.094 --> 00:02:04.489
设定 style={styles.metric} 以及 key

00:02:04.489 --> 00:02:08.289
我们将映射键 键将为 metric 本身

00:02:08.289 --> 00:02:12.769
快速设置该 styles

00:02:12.770 --> 00:02:14.409
内容很少

00:02:14.409 --> 00:02:18.259
只需将 flexDirection 设为 row

00:02:18.259 --> 00:02:24.185
然后将 marginTop 设为 12

00:02:24.185 --> 00:02:25.789
现在

00:02:25.789 --> 00:02:27.539
我们将调用 getIcon

00:02:27.539 --> 00:02:31.522
以便显示该特定指标的图标

00:02:31.522 --> 00:02:37.085
然后在下面设置另一个视图

00:02:37.085 --> 00:02:40.474
现在我们的任务是创建这部分

00:02:40.474 --> 00:02:44.824
因此我们想显示 displayName

00:02:44.824 --> 00:02:49.334
将 fontSize 设为 20

00:02:49.335 --> 00:02:52.150
在下面 我们将...

00:02:52.150 --> 00:02:54.375
这里是显示名称

00:02:54.375 --> 00:02:58.650
在下面我们想显示具体的值和单位

00:02:58.650 --> 00:03:00.319
因此

00:03:00.319 --> 00:03:04.354
输入 metrics[metric]

00:03:04.354 --> 00:03:08.959
然后输入 {unit}

00:03:08.960 --> 00:03:15.939
现在将 say fontSize 设为 16 color 设为 gray

00:03:15.939 --> 00:03:19.234
我认为一切挺正常

00:03:19.235 --> 00:03:20.945
现在我们要做的是

00:03:20.944 --> 00:03:25.229
在 History 文件中导入 metricCard

00:03:25.229 --> 00:03:30.304
现在 我们不再渲染这部分内容

00:03:30.305 --> 00:03:32.030
而是

00:03:32.030 --> 00:03:33.800
输入 metricCard

00:03:33.800 --> 00:03:37.700
metrics={metrics} metrics 来自于这里

00:03:37.699 --> 00:03:41.644
然后传入 date

00:03:41.645 --> 00:03:46.115
将为 formattedDate

00:03:46.115 --> 00:03:47.810
现在 看看应用效果

00:03:47.810 --> 00:03:52.020
如果一切正常的话 这是正常的

00:03:52.020 --> 00:03:54.784
选择填写了信息的日期

00:03:54.784 --> 00:03:56.719
我们获得了这个 UI

00:03:56.719 --> 00:03:58.659
在 IOS 上看起来不错

00:03:58.659 --> 00:04:01.469
看看在 Android 上的效果

00:04:01.469 --> 00:04:04.229
在 Android 上看起来也不错

