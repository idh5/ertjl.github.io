WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:06.209
我们的添加条目屏幕已经设置好所有的样式

00:00:06.209 --> 00:00:11.405
现在我将设置主历史记录视图的样式

00:00:11.404 --> 00:00:14.644
也就是这个带日历的视图

00:00:14.644 --> 00:00:17.120
在渲染任何 UI 之前

00:00:17.120 --> 00:00:19.475
我们需要从虚假数据库中获取日历

00:00:19.475 --> 00:00:23.750
以便获取所有这些数据 所有这些项目

00:00:23.750 --> 00:00:29.445
最终我们可以渲染看起来像这样的日历

00:00:29.445 --> 00:00:32.615
为此 转到 api.js 文件

00:00:32.615 --> 00:00:37.925
新建一个函数

00:00:37.924 --> 00:00:41.664
称之为 fetchCalendarResults

00:00:41.664 --> 00:00:46.262
我们将调用 AsyncStorage.getItem

00:00:46.262 --> 00:00:49.645
我们使用 AsyncStorage 作为虚假的小数据库

00:00:49.645 --> 00:00:56.135
我们将获取位于 CALENDAR_STORAGE_KEY 属性中的所有项目

00:00:56.134 --> 00:00:59.179
在将获取的项目返回给

00:00:59.179 --> 00:01:04.180
调用 fetchCalendarResults 的函数之前

00:01:04.180 --> 00:01:07.355
我们需要导入 formatCalendarResults

00:01:07.355 --> 00:01:13.204
它来自于 calendar 文件

00:01:13.204 --> 00:01:14.914
我们将对这些设定格式

00:01:14.915 --> 00:01:18.900
然后返回 formatCalendarResults 返回的内容

00:01:18.900 --> 00:01:23.600
获得 fetchCalendarResults 之后

00:01:23.599 --> 00:01:30.554
我们可以从 AsyncStorage（即我们的虚假数据库）中获取整个日历

00:01:30.555 --> 00:01:38.155
现在我们需要新建一个 History.js 组件文件

00:01:38.155 --> 00:01:42.409
粘贴所有这些代码 都是一些典型代码

00:01:42.409 --> 00:01:44.864
有一个 History 组件

00:01:44.864 --> 00:01:49.009
它会渲染文本 History 然后导出它

00:01:49.010 --> 00:01:56.630
在 App.js 文件中 我们不再渲染 AddEntry

00:01:56.629 --> 00:02:04.274
先导入 History 然后渲染 History 组件

00:02:04.275 --> 00:02:06.365
现在如果代码能运行的话

00:02:06.364 --> 00:02:09.870
我们会在状态栏后面看到“History”

00:02:09.870 --> 00:02:12.680
正如之前提到的

00:02:12.680 --> 00:02:15.860
现在我将在 History.js 文件中

00:02:15.860 --> 00:02:20.350
调用刚刚创建的 fetchCalendarResults 函数

00:02:20.349 --> 00:02:24.319
我们在这里导入一些组件

00:02:24.319 --> 00:02:31.185
我们将需要 connect 还需要一些 action

00:02:31.185 --> 00:02:34.400
导入 receiveEntries

00:02:34.400 --> 00:02:37.900
表示从数据库中获取条目

00:02:37.900 --> 00:02:41.060
还需要导入 addEntry

00:02:41.060 --> 00:02:44.064
以防当天没有任何条目

00:02:44.064 --> 00:02:48.534
我们需要为当天添加条目

00:02:48.534 --> 00:02:50.430
它们来自于 actions

00:02:50.430 --> 00:02:54.629
还需要从 helpers 文件导入一些组件

00:02:54.629 --> 00:02:59.870
我们将使用 timeToString 然后我们将使用 getDailyReminderValue

00:02:59.870 --> 00:03:04.495
二者都来自 utils/helpers

00:03:04.495 --> 00:03:07.219
最后 我们还需要导入

00:03:07.219 --> 00:03:13.659
刚刚创建的 fetchCalendarResults 函数

00:03:13.659 --> 00:03:17.840
现在 当该组件挂载时

00:03:17.840 --> 00:03:24.155
我们希望获取日历结果

00:03:24.155 --> 00:03:25.520
在此之前

00:03:25.520 --> 00:03:27.865
我们连接下组件

00:03:27.865 --> 00:03:32.400
以便访问该属性的 dispatch

00:03:32.400 --> 00:03:35.360
在这里输入 dispatch

00:03:35.360 --> 00:03:39.680
它将来自于 this.props

00:03:39.680 --> 00:03:43.460
然后获取我们的日历结果

00:03:43.460 --> 00:03:45.695
然后

00:03:45.694 --> 00:03:48.500
获得所有条目

00:03:48.500 --> 00:03:51.716
我们可以分派 receiveEntries

00:03:51.716 --> 00:03:55.635
传入 entry 这里会发生什么？

00:03:55.634 --> 00:04:00.479
我们调用 fetchCalendarResults 获得所有条目

00:04:00.479 --> 00:04:06.500
然后分派 receiveEntries 它最终将跑到这里

00:04:06.500 --> 00:04:12.310
我们将所有这些条目添加到当前状态上

00:04:12.310 --> 00:04:18.579
但是还在这里输入 .then

00:04:18.579 --> 00:04:21.704
将 entries 当做对象的属性

00:04:21.704 --> 00:04:29.519
在这里 如果 entries[timeToString] 没有内容

00:04:29.519 --> 00:04:30.526
如果为假

00:04:30.526 --> 00:04:37.199
表明我们没有为当天输入任何信息

00:04:37.199 --> 00:04:40.589
如果你还记得的话

00:04:40.589 --> 00:04:43.859
在这里的 helpers 文件中创建的

00:04:43.860 --> 00:04:48.150
getDailyReminderValue 方法中

00:04:48.149 --> 00:04:50.789
我们希望将 Redux Store 上的 

00:04:50.790 --> 00:04:56.980
当天属性设为这个值

00:04:56.980 --> 00:04:58.785
我们要做的是...

00:04:58.785 --> 00:05:02.040
这里应该是 entries

00:05:02.040 --> 00:05:10.495
如果当天的 entries 为假 则分派 addEntry

00:05:10.495 --> 00:05:14.280
传入 timeToString 作为键

00:05:14.279 --> 00:05:19.324
值为调用 getDailyReminderValues 后的结果

00:05:19.324 --> 00:05:21.180
这段代码的作用是接收条目

00:05:21.180 --> 00:05:24.915
如果当天没有条目

00:05:24.915 --> 00:05:28.830
则显示这个挥手图标

00:05:28.829 --> 00:05:30.675
提示”Don't forget to log your data today!”

00:05:30.675 --> 00:05:33.480
为此 我们需要将其当做属性

00:05:33.480 --> 00:05:38.515
添加为状态的属性 键为 today

00:05:38.514 --> 00:05:41.039
注意 我们在这里没有任何本地状态

00:05:41.040 --> 00:05:44.220
因为日历状态位于 Redux 中

00:05:44.220 --> 00:05:48.750
我们要快速设置的是…在这里添加一些空白行

00:05:48.750 --> 00:05:50.685
我们在这里新建一个函数

00:05:50.685 --> 00:05:52.454
名称为 mapStateToProps

00:05:52.454 --> 00:05:56.629
我们将接收状态 其实就是 entries

00:05:56.629 --> 00:06:00.754
我们想要返回所有的 entries

00:06:00.754 --> 00:06:04.139
如果我们将 mapStateToProps 传递给 connect

00:06:04.139 --> 00:06:09.099
将获得所有的条目（作为属性）

00:06:09.100 --> 00:06:13.245
我们在这里渲染 JSON.stringfy (this.props)

00:06:13.245 --> 00:06:17.694
而不是 History

00:06:17.694 --> 00:06:20.699
现在 当我们运行代码的话

00:06:20.699 --> 00:06:23.964
我们应该能够看到组件将加载

00:06:23.964 --> 00:06:26.189
我们将获得一些结果

00:06:26.189 --> 00:06:27.870
并使用这些结果更新 Redux

00:06:27.870 --> 00:06:32.569
最终导致重新渲染界面

00:06:32.569 --> 00:06:35.579
我们将在 this.props 下看到

00:06:35.579 --> 00:06:40.264
当我们调用 fetchCalendarResults 时获得的所有条目

00:06:40.264 --> 00:06:44.413
你会看到 在这里有个庞大的对象

00:06:44.413 --> 00:06:51.090
表示 Redux 状态中的所有内容 即所有的条目

00:06:51.089 --> 00:06:53.000
也就是整个日历

