WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.040
现在我们将对优达学城步进器组件设置样式

00:00:03.040 --> 00:00:06.490
也就是这个组件

00:00:06.490 --> 00:00:09.185
这个组件比较有意思

00:00:09.185 --> 00:00:11.589
因为在最终版上

00:00:11.589 --> 00:00:14.169
正如之前提到的

00:00:14.169 --> 00:00:16.989
iOS 版本与 Android 版本截然不同

00:00:16.989 --> 00:00:19.419
我们希望将这些内容横向排列

00:00:19.420 --> 00:00:24.100
然后对按钮设置不同的样式

00:00:24.100 --> 00:00:28.525
转到 UdaciSteppers 组件

00:00:28.524 --> 00:00:34.359
我们需要导入 StyleSheet 以及 Platform

00:00:34.359 --> 00:00:37.524
正如之前提到的

00:00:37.524 --> 00:00:45.519
我们希望确保这些项目横向显示 而不是垂直显示

00:00:45.520 --> 00:00:47.200
最终 我们将针对 iOS 和 Android

00:00:47.200 --> 00:00:50.345
显示不同的按钮

00:00:50.344 --> 00:00:54.240
暂时先设置 iOS 版按钮

00:00:54.240 --> 00:00:56.495
和往常一样

00:00:56.494 --> 00:00:59.829
将 styles 设为

00:00:59.829 --> 00:01:03.579
StyleSheet.create 返回的内容

00:01:03.579 --> 00:01:06.164
首先创建 row 属性

00:01:06.165 --> 00:01:07.865
输入 flexDirection: ‘row’

00:01:07.864 --> 00:01:10.824
现在主轴将为水平方向

00:01:10.825 --> 00:01:16.530
输入 flex: 1 然后输入 alignItems: ‘center’

00:01:16.530 --> 00:01:21.155
我们将垂直居中排列内容

00:01:21.155 --> 00:01:24.519
转到这里

00:01:24.519 --> 00:01:30.789
将 style 设为 styles.row

00:01:30.790 --> 00:01:37.355
还将 justifyContent 设为 space-between.

00:01:37.355 --> 00:01:40.859
这行代码的作用是

00:01:40.859 --> 00:01:43.150
如果是 row 则主轴是水平方向

00:01:43.150 --> 00:01:47.065
所有内容都水平对齐

00:01:47.064 --> 00:01:51.549
各项内容之间存在间隔

00:01:51.549 --> 00:01:52.974
在这里

00:01:52.974 --> 00:01:55.359
设置内嵌样式

00:01:55.359 --> 00:01:58.920
输入 flexDirection: ‘row’

00:01:58.920 --> 00:02:01.969
但是没有这些设置

00:02:01.969 --> 00:02:04.795
保存下代码

00:02:04.795 --> 00:02:07.390
刷新下 Android 应用

00:02:07.390 --> 00:02:10.240
你会发现内容水平对齐 很不错

00:02:10.240 --> 00:02:14.550
接着设置 iOS 按钮样式

00:02:14.550 --> 00:02:17.350
输入 iosBtn

00:02:17.349 --> 00:02:21.439
最终界面是这样的

00:02:21.439 --> 00:02:25.050
将 background 设为 white

00:02:25.050 --> 00:02:27.525
快速导入 white

00:02:27.525 --> 00:02:30.039
最终 我们还将需要其他颜色

00:02:30.039 --> 00:02:31.829
所以我现在就导入这些颜色

00:02:31.830 --> 00:02:33.400
导入 gray 和 purple

00:02:33.400 --> 00:02:36.534
backgroundColor 设为 white

00:02:36.534 --> 00:02:39.549
borderColor 设为 purple

00:02:39.550 --> 00:02:42.100
borderWidth 设为 1

00:02:42.099 --> 00:02:47.155
borderRadius 设为 3

00:02:47.155 --> 00:02:48.659
padding 设为 5

00:02:48.659 --> 00:02:54.969
paddingLeft 和 paddingRight 都设为 25

00:02:54.969 --> 00:03:03.344
现在将 iosBtn 应用到这里的两个可触摸组件上

00:03:03.344 --> 00:03:05.134
输入 style

00:03:05.134 --> 00:03:08.530
然后输入 styles.iosBtn

00:03:08.530 --> 00:03:12.145
然后对这里的可触摸组件执行完全一样的操作

00:03:12.145 --> 00:03:15.250
现在看看应用界面

00:03:15.250 --> 00:03:17.439
离最终效果越来越近了

00:03:17.439 --> 00:03:20.829
你会发现 在中间

00:03:20.830 --> 00:03:22.960
依然存在 borderRadius

00:03:22.960 --> 00:03:28.189
我们希望这些是扁平的 而不是具有 borderRadius

00:03:28.189 --> 00:03:29.620
我们向第一个组件

00:03:29.620 --> 00:03:32.629
传入一个数组

00:03:32.629 --> 00:03:35.215
我们希望应用所有这些样式

00:03:35.215 --> 00:03:38.620
但是我们还希望

00:03:38.620 --> 00:03:42.210
将 borderTopRightRadius 设为 0

00:03:42.210 --> 00:03:47.685
将 borderBottomRightRadius 也设为 0

00:03:47.685 --> 00:03:49.240
现在看看应用界面

00:03:49.240 --> 00:03:50.545
你会发现这里是扁平的

00:03:50.544 --> 00:03:57.269
底部也是扁平的 然后在下面进行相同的设置

00:03:57.270 --> 00:04:03.900
这将是一个数组 然后将 borderTopLeftRadius 设为 0

00:04:03.900 --> 00:04:09.295
borderBottomLeftRadius 也设为 0

00:04:09.294 --> 00:04:10.750
这些将稍微扁平化了

00:04:10.750 --> 00:04:13.264
不确定这里是否出现 bleeding 情况

00:04:13.264 --> 00:04:15.319
似乎这是 React Native 的 bug

00:04:15.319 --> 00:04:18.269
当我构建应用正式版和其他版本时 没有出现这种情况

00:04:18.269 --> 00:04:21.524
我觉得暂时不用管这个

00:04:21.524 --> 00:04:26.864
对于 iOS 按钮来说 看起来很不错了

00:04:26.865 --> 00:04:28.470
这里不再设为 black

00:04:28.470 --> 00:04:31.600
在 iOS 上

00:04:31.600 --> 00:04:34.260
或者至少在这个按钮上 我们将使用紫色

00:04:34.259 --> 00:04:37.365
这里也设为 purple

00:04:37.365 --> 00:04:39.939
看起来不错

00:04:39.939 --> 00:04:42.060
在为 Android 版设置样式之前

00:04:42.060 --> 00:04:46.370
我们为这些指标设置样式

00:04:46.370 --> 00:04:49.490
转到这里

00:04:49.490 --> 00:04:52.165
输入 metricCounter

00:04:52.165 --> 00:04:59.319
将 width 设为 85

00:04:59.319 --> 00:05:06.639
然后使用 justifyContent 和 alignItems 让一切居中

00:05:06.639 --> 00:05:13.319
现在向 Text 组件添加一些内嵌样式

00:05:13.319 --> 00:05:18.685
将 fontSize 设为 24 textAlign 设为 center

00:05:18.685 --> 00:05:24.285
对于这个 Text 将 fontSize 设为 18 字号要小些

00:05:24.285 --> 00:05:27.865
颜色将为灰色 而不是黑色

00:05:27.865 --> 00:05:29.949
看看应用效果

00:05:29.949 --> 00:05:31.539
看起来不错

00:05:31.540 --> 00:05:36.635
现在快速地设置 Android 按钮样式

00:05:36.634 --> 00:05:39.240
在下面新建一个属性

00:05:39.240 --> 00:05:42.915
称之为 androidBtn

00:05:42.915 --> 00:05:44.140
它将比 iOS 简单很多

00:05:44.139 --> 00:05:48.849
将 margin 设为 5

00:05:48.850 --> 00:05:51.105
backgroundColor 设为 purple

00:05:51.105 --> 00:05:56.050
padding 设为 10 borderRadius 设为 2

00:05:56.050 --> 00:06:02.620
现在 我们将根据所在的平台

00:06:02.620 --> 00:06:05.230
应用样式

00:06:05.230 --> 00:06:07.944
在这里

00:06:07.944 --> 00:06:10.899
如果平台为 iOS

00:06:10.899 --> 00:06:16.469
则渲染这些组件

00:06:16.470 --> 00:06:22.745
调整下格式 如果不是 iOS

00:06:22.745 --> 00:06:26.889
复制粘贴这些 渲染这些组件

00:06:26.889 --> 00:06:29.694
我们需要快速修改下

00:06:29.694 --> 00:06:31.915
看看最终版界面

00:06:31.915 --> 00:06:36.310
发现这些图标的边框比这些图标的要细一些

00:06:36.310 --> 00:06:40.750
原因是我们使用的是不同的组件库

00:06:40.750 --> 00:06:42.745
如果我们位于 iOS 上

00:06:42.745 --> 00:06:46.545
则渲染这些 Entypo 图标

00:06:46.545 --> 00:06:49.905
而不是 FontAwesome 图标

00:06:49.904 --> 00:06:51.964
依然可以使用加减号

00:06:51.964 --> 00:06:54.159
尺寸不变

00:06:54.160 --> 00:06:57.439
在下面 FontAwesome 适用于 Android

00:06:57.439 --> 00:06:59.844
将这里的 iOS

00:06:59.845 --> 00:07:03.300
改为 androidBtn 样式

00:07:03.300 --> 00:07:07.400
第 36 行有个错误

00:07:07.399 --> 00:07:11.435
因为这里丢了花括号

00:07:11.435 --> 00:07:16.035
这是因为这里丢了花括号

00:07:16.035 --> 00:07:19.255
看起来正常了

00:07:19.254 --> 00:07:22.839
在 Android 上 图标颜色是紫色

00:07:22.839 --> 00:07:24.214
我们不希望使用紫色

00:07:24.214 --> 00:07:26.924
而是使用白色

00:07:26.925 --> 00:07:29.620
在这里

00:07:29.620 --> 00:07:31.420
设为 white

00:07:31.420 --> 00:07:38.220
好了 这是 Android 样式 这是 iOS 样式

