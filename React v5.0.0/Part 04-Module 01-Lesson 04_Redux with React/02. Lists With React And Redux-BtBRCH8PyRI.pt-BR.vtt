WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.403
Agora que obtemos
as partes individuais

00:00:03.436 --> 00:00:04.437
do nosso estado,

00:00:04.471 --> 00:00:07.807
as passando
para os componentes individuais,

00:00:07.841 --> 00:00:09.876
e usamos o store.subscribe,

00:00:09.909 --> 00:00:12.078
o componente vai fazer
uma nova renderização

00:00:12.112 --> 00:00:13.513
sempre que a Store mudar.

00:00:13.546 --> 00:00:17.150
O próximo passo é construir
a lista de componentes

00:00:17.183 --> 00:00:20.387
para que possamos começar
a renderizar os itens da List.

00:00:20.420 --> 00:00:23.523
Primeiro, vamos entrar
nos componentes goals

00:00:23.556 --> 00:00:25.625
assim como
nos componentes todos.

00:00:25.658 --> 00:00:31.064
Vamos passar um item prop
ao componente List.

00:00:31.097 --> 00:00:35.869
Dentro de goals,
estará this.props.goals.

00:00:35.902 --> 00:00:37.941
Dentro de todos,

00:00:39.133 --> 00:00:42.275
o item vai ser
this.props.todos.

00:00:42.308 --> 00:00:48.248
Agora, dentro de LIST,

00:00:48.281 --> 00:00:51.117
em vez de apenas renderizar
um único item de LIST,

00:00:51.151 --> 00:00:54.888
vamos usar a props.items.map.

00:00:54.921 --> 00:00:58.892
Assim mapearemos
todos os itens.

00:00:58.925 --> 00:01:00.927
E, para cada item,

00:01:00.960 --> 00:01:06.402
queremos retornar
ou renderizar

00:01:06.432 --> 00:01:08.101
um item de lista.

00:01:08.134 --> 00:01:12.706
É o que tipicamente fazemos
quando mapeamos algo no React.

00:01:12.739 --> 00:01:17.043
Nós damos a ele uma key
com item.id.

00:01:17.077 --> 00:01:21.915
Vamos colocá-lo num span
por enquanto,

00:01:22.515 --> 00:01:26.252
e usar o item.name.

00:01:26.286 --> 00:01:31.424
E o que deve acontecer
quando atualizamos o aplicativo?

00:01:31.458 --> 00:01:33.660
Se adicionarmos um novo item
à nossa lista Todo,

00:01:33.693 --> 00:01:35.895
tipo "Passear com o cachorro",

00:01:36.029 --> 00:01:38.698
nós renderizamos novamente
o componente React,

00:01:38.732 --> 00:01:40.533
que então renderiza
o componente List,

00:01:40.567 --> 00:01:43.303
passando os todos para ele,
aí temos o "Passear com o cachorro".

00:01:43.336 --> 00:01:46.272
Então podemos adicionar
outro item aqui.

00:01:46.306 --> 00:01:48.742
Agora podemos adicionar
uma nova meta.

00:01:48.775 --> 00:01:52.379
Vamos escrever "Aprender Redux".
E também recebemos nossa meta.

00:01:52.412 --> 00:01:56.750
Mas a diferença entre o aplicativo
Vanilla JavaScript

00:01:56.783 --> 00:01:59.085
e nosso aplicativo React
é que,

00:01:59.119 --> 00:02:04.124
no aplicativo Vanilla JavaScript,
podemos remover itens,

00:02:04.157 --> 00:02:08.395
e, por enquanto, não podemos fazer
isto no aplicativo React.

00:02:08.428 --> 00:02:10.463
Então vamos adicionar
esta funcionalidade.

00:02:10.497 --> 00:02:14.401
Vamos fazer a List receber

00:02:14.435 --> 00:02:17.404
outro prop também.

00:02:17.437 --> 00:02:19.973
Especificamente
um remove props.

00:02:20.006 --> 00:02:22.809
Então vamos adicionar
um botão aqui.

00:02:22.842 --> 00:02:26.046
E, quando este botão
for clicado,

00:02:26.079 --> 00:02:30.116
vamos usar o props.remove,

00:02:30.150 --> 00:02:33.319
passando para ele o item individual
que está sendo removido.

00:02:33.353 --> 00:02:35.855
E assim como fizemos
na nossa outra IU,

00:02:35.889 --> 00:02:38.458
teremos um X
em caixa-alta aqui.

00:02:38.491 --> 00:02:43.096
Agora precisamos escrever
alguns métodos aqui.

00:02:43.129 --> 00:02:47.901
Em todo, vamos criar
um método removeItem

00:02:47.934 --> 00:02:52.138
que receberá o item todo.

00:02:52.172 --> 00:02:53.873
E, para removê-lo,

00:02:53.907 --> 00:02:59.145
precisamos disparar
this.props.store.dispatch,

00:02:59.179 --> 00:03:01.748
usar o removeTodoAction

00:03:01.781 --> 00:03:05.485
e passar para ele a id,
que podemos obter de todo.id.

00:03:05.518 --> 00:03:08.321
Agora podemos passar
este método

00:03:08.355 --> 00:03:11.458
para o componente List
como o remove.

00:03:11.491 --> 00:03:14.894
Vamos escrever
remove = this.removeItem.

00:03:14.928 --> 00:03:18.798
Faremos algo bem similar
dentro do componente goals.

00:03:18.832 --> 00:03:21.171
Vamos escrever
que o removeItem

00:03:21.867 --> 00:03:25.505
vai conter um goal,

00:03:25.538 --> 00:03:29.843
e vamos usar this.props.store.
dispatch(removeGoalAction()).

00:03:29.876 --> 00:03:32.278
para remover
um goal específico.

00:03:32.312 --> 00:03:34.714
E passamos a id do goal.

00:03:34.748 --> 00:03:37.450
E agora, em List,

00:03:37.484 --> 00:03:40.510
só precisamos escrever

00:03:40.511 --> 00:03:44.224
remove = this.removeItem.

00:03:44.257 --> 00:03:49.429
Agora podemos adicionar
novos itens aqui.

00:03:49.462 --> 00:03:51.798
Eles compartilham
o mesmo estado.

00:03:51.831 --> 00:03:53.600
Então vão aparecer
nos dois lugares.

00:03:53.633 --> 00:03:56.770
E também podemos removê-los
do aplicativo React.

00:03:56.803 --> 00:03:59.372
Podemos adicionar uma nova meta

00:03:59.406 --> 00:04:04.778
e também podemos remover metas
do aplicativo React.

