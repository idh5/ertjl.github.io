WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.839
So now that we are getting the specific individual slices of

00:00:03.839 --> 00:00:07.859
our state and we are passing those down to their individual components,

00:00:07.860 --> 00:00:10.140
and we've also subscribed to our store.

00:00:10.140 --> 00:00:13.575
So so our component will re-render whenever the store changes.

00:00:13.574 --> 00:00:17.204
The next thing we want to do is build out our list component here,

00:00:17.204 --> 00:00:20.445
so that we can actually start rendering those list items.

00:00:20.445 --> 00:00:22.769
So first, let's go ahead and inside both of

00:00:22.769 --> 00:00:25.679
our goals components as well as our todos components,

00:00:25.679 --> 00:00:29.390
we will pass the list component

00:00:29.390 --> 00:00:35.935
an item's prop and inside of goals this is going to be this.props.goals.

00:00:35.935 --> 00:00:42.340
And inside of the Todos items is going to be this.props.todos.

00:00:42.340 --> 00:00:46.390
And now what we want to do is inside

00:00:46.390 --> 00:00:51.174
of list and instead of just rendering a single list item,

00:00:51.174 --> 00:00:54.924
let's go ahead and call props.items.map.

00:00:54.924 --> 00:00:58.929
So we want to map over all of the items.

00:00:58.929 --> 00:01:00.969
And for each item,

00:01:00.969 --> 00:01:08.140
what we want to do is we want to return or we want to render a list item.

00:01:08.140 --> 00:01:12.760
So this is kind of typical of what we always do whenever we map over anything in React.

00:01:12.760 --> 00:01:17.094
We need to give it a key of item.id.

00:01:17.094 --> 00:01:21.920
And then now we'll wrap this in a span for now,

00:01:22.530 --> 00:01:26.305
and we will just show item.name.

00:01:26.305 --> 00:01:31.465
So now what should happen when we go and refresh our application?

00:01:31.465 --> 00:01:33.700
If we add a new item to our Todo Lists,

00:01:33.700 --> 00:01:35.900
let's say walk the dog,

00:01:36.030 --> 00:01:38.920
we re-render our React component,

00:01:38.920 --> 00:01:40.960
which then renders the list component passing

00:01:40.959 --> 00:01:43.359
it all of the Todo items then we get Walk the dog.

00:01:43.359 --> 00:01:46.314
So we can add another item here.

00:01:46.314 --> 00:01:52.418
And then we can even add a new goal so we'll say Learn Redux and we also get our goal.

00:01:52.418 --> 00:01:56.814
But the difference now between our Vanilla JavaScript app up here,

00:01:56.814 --> 00:01:59.140
and our React application is,

00:01:59.140 --> 00:02:03.265
up here with our Vanilla JavaScript app we are able to remove

00:02:03.265 --> 00:02:08.439
items and we can't do that as of right now inside of our React app.

00:02:08.439 --> 00:02:10.509
So let's go ahead and add that functionality.

00:02:10.509 --> 00:02:17.439
So what we want to do, is let's make it so list also receives another prop.

00:02:17.439 --> 00:02:20.020
Specifically a remove props.

00:02:20.020 --> 00:02:22.849
So what we'll do is we'll add a button here.

00:02:22.848 --> 00:02:26.099
And when this button is clicked,

00:02:26.099 --> 00:02:29.549
we want to invoke prompts that

00:02:29.550 --> 00:02:33.375
remove passing it the individual item that's being removed.

00:02:33.375 --> 00:02:35.729
And just as we did in our other UI,

00:02:35.729 --> 00:02:38.504
we will just have a capital X here.

00:02:38.504 --> 00:02:43.139
And then now we need to make a sheet of all methods here.

00:02:43.139 --> 00:02:46.034
So on Todo, let's go ahead and create

00:02:46.034 --> 00:02:52.199
a removeItem method which will receive the todo item.

00:02:52.199 --> 00:02:53.939
And then in order to remove it,

00:02:53.939 --> 00:02:56.280
what we need to is dispatch is

00:02:56.280 --> 00:03:01.814
this.props.store.dispatch Invoke our removeTodoAction

00:03:01.814 --> 00:03:05.550
and then pass in the ID which we can get from todo.id.

00:03:05.550 --> 00:03:11.505
And then now we can pass that method to our list component as remove.

00:03:11.504 --> 00:03:14.939
So we'll say remove equals this.removeItem.

00:03:14.939 --> 00:03:18.854
And then we're going to do something very similar inside of our goals component.

00:03:18.854 --> 00:03:25.560
So we will say removeItem is going to take in a goal,

00:03:25.560 --> 00:03:29.882
and then we will call this.props.store.dispatch(removeGoalAction() ).

00:03:29.882 --> 00:03:32.340
In order to remove a specific goal,

00:03:32.340 --> 00:03:34.759
we pass the goal ID.

00:03:34.759 --> 00:03:37.509
And then now, with our list,

00:03:37.509 --> 00:03:44.289
all we need to do is come in here and say remove is going to equal this.removeItem.

00:03:44.289 --> 00:03:49.479
So now what should happen is we can add new items here,

00:03:49.479 --> 00:03:51.849
again these are sharing the same state.

00:03:51.849 --> 00:03:53.663
So they'll show up in both places.

00:03:53.663 --> 00:03:56.829
And we can also remove them from our React app.

00:03:56.830 --> 00:04:00.340
And then we can add a new goal and we can

00:04:00.340 --> 00:04:04.800
also remove goals as well from our React application.

