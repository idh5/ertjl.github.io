WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:02.925
Right now we have two reducers,

00:00:02.924 --> 00:00:05.955
our todos reducer as well as our goals reducer.

00:00:05.955 --> 00:00:09.134
But the problem that we're running into is when we create

00:00:09.134 --> 00:00:13.365
our store what we have to pass to it is a single reducer.

00:00:13.365 --> 00:00:15.419
But how do we do that if we have

00:00:15.419 --> 00:00:19.394
more than one reducer which is what we have here in our case?

00:00:19.394 --> 00:00:22.589
Well, remember the whole goal of our reducer function is it's

00:00:22.589 --> 00:00:25.679
going to get us to the next state of our application.

00:00:25.679 --> 00:00:28.620
So, eventually, what happens is when we call creates or we pass it

00:00:28.620 --> 00:00:32.414
the reducer and the reducer function is invoked,

00:00:32.414 --> 00:00:35.424
updating the current state of our store.

00:00:35.424 --> 00:00:39.049
So, what if instead of passing in

00:00:39.049 --> 00:00:42.695
a todos reducer or instead of just passing in a goals reducer,

00:00:42.695 --> 00:00:47.855
what if we came down here and created a brand new reducer that we will call, app?

00:00:47.854 --> 00:00:51.529
So, just like goals and just like todos,

00:00:51.530 --> 00:00:56.679
it's going to take in the state as well as an action,

00:00:56.679 --> 00:01:01.685
and whatever app returns is going to be the new state of our application

00:01:01.685 --> 00:01:03.785
just like whatever todos returned

00:01:03.784 --> 00:01:06.909
earlier was the state of our entire application as well.

00:01:06.909 --> 00:01:10.219
So what we'll do is now instead of just having our state

00:01:10.219 --> 00:01:13.750
be an array specifically an array of todo items,

00:01:13.750 --> 00:01:15.590
we now want to have our state be

00:01:15.590 --> 00:01:19.325
an object and that object is going to have two properties on it,

00:01:19.325 --> 00:01:22.859
todos as well as goals.

00:01:22.859 --> 00:01:27.155
But now, instead of just setting these to an empty object,

00:01:27.155 --> 00:01:30.245
how do we get the todos portion of our state?

00:01:30.245 --> 00:01:33.385
Well, we already have a function that handles that,

00:01:33.385 --> 00:01:36.090
this todos reducer function up here.

00:01:36.090 --> 00:01:39.530
So, what we need to do is we need to invoke todos passing

00:01:39.530 --> 00:01:43.230
it the todos portion of our state and the action which occurred,

00:01:43.230 --> 00:01:46.924
and now todos instead of returning us the whole state of our application,

00:01:46.924 --> 00:01:50.704
it will just return us the todos portion of our state.

00:01:50.704 --> 00:01:52.939
So, what we can do is,

00:01:52.939 --> 00:01:56.334
we can invoke todos passing it,

00:01:56.334 --> 00:02:00.664
the todos portion of the state which is going to be an array,

00:02:00.665 --> 00:02:03.230
and also passing it the action,

00:02:03.230 --> 00:02:07.655
and then now, in order to get the goals portion of our state,

00:02:07.655 --> 00:02:12.830
we call our goals reducer passing it the state.goals,

00:02:12.830 --> 00:02:15.094
and also passing it an action.

00:02:15.094 --> 00:02:18.564
So, now instead of passing todos as our reducer,

00:02:18.564 --> 00:02:22.460
what we can do is we can pass createStore our main app

00:02:22.460 --> 00:02:26.990
function here that we're going to refer to as a root reducer, and so now,

00:02:26.990 --> 00:02:31.340
whenever dispatch is called,

00:02:31.340 --> 00:02:34.134
we invoke our app function,

00:02:34.134 --> 00:02:37.264
and our app function is then going to

00:02:37.264 --> 00:02:41.004
invoke our todos reducer as well as our goals reducer,

00:02:41.004 --> 00:02:45.349
those are going to return their specific portions of the states and then we return

00:02:45.349 --> 00:02:50.169
an object that has a todos property as well as a goals property.

00:02:50.169 --> 00:02:54.514
Now, the only other change we want to make to our app reducer here,

00:02:54.514 --> 00:03:00.469
is we want to make it so when app is invoked the very first time if state is undefined,

00:03:00.469 --> 00:03:02.989
it just sets it equal to an empty object,

00:03:02.989 --> 00:03:07.640
just like we are doing up here inside of our goals reducer inside of our todos reducer.

00:03:07.639 --> 00:03:14.699
Because again, when app is invoked the very first time right here,

00:03:14.699 --> 00:03:18.214
state is going to be undefined because it's undefined up here.

00:03:18.215 --> 00:03:23.090
So, then what we will do is the state of our application will be set to an empty object,

00:03:23.090 --> 00:03:25.819
and then went todos and when goals is invoked,

00:03:25.819 --> 00:03:29.930
state.todos as well as state.goals are both going to be undefined,

00:03:29.930 --> 00:03:34.974
which will then set both of those properties to these empty arrays.

00:03:34.974 --> 00:03:39.079
So, now whenever we want to add new state to our store,

00:03:39.080 --> 00:03:41.750
all we have to do is come in here and add a new property to

00:03:41.750 --> 00:03:45.800
this object and the value of that property is going to be a reducer function,

00:03:45.800 --> 00:03:49.670
which is going to be responsible for managing that slice of our state.

00:03:49.669 --> 00:03:51.769
So, just to make sure that this is working,

00:03:51.770 --> 00:03:54.260
what I'm going to do is I'm going to come in here and

00:03:54.259 --> 00:03:57.789
paste a bunch of different dispatch invocations.

00:03:57.789 --> 00:04:00.150
So, we're going to add a todo, add a todo,

00:04:00.150 --> 00:04:02.400
add a todo and then we will remove a todo,

00:04:02.400 --> 00:04:03.944
toggle a todo, add a goal,

00:04:03.944 --> 00:04:05.680
add a goal, and then we will remove a goal.

00:04:05.680 --> 00:04:17.939
So, this is really going to stress test our current code.

00:04:17.939 --> 00:04:20.649
So, now inside of my console here what we've done

00:04:20.649 --> 00:04:24.109
is we've created a new store and called store.subscribe,

00:04:24.110 --> 00:04:27.850
and then now when I dispatch all of these actions,

00:04:27.850 --> 00:04:33.235
what we should see is a bunch of console.logs because dot subscribe run over and over,

00:04:33.235 --> 00:04:36.340
and if we just look at the last portion of our state here,

00:04:36.339 --> 00:04:38.289
you'll notice that we have one goal,

00:04:38.290 --> 00:04:42.080
"Lose 20 pounds," and we have two todo items,

00:04:42.079 --> 00:04:45.245
"Walk the dog," "Go to the gym," and both are set to complete,

00:04:45.245 --> 00:04:50.055
and if you follow the logic for all of these different dispatches,

00:04:50.055 --> 00:04:55.269
what you'll find is those align nicely with what our new state is.

00:04:55.269 --> 00:04:59.199
So, to summarize, the app started out with one piece of state,

00:04:59.199 --> 00:05:02.214
todos, when we added in the goal state,

00:05:02.214 --> 00:05:04.659
we now had two separate pieces of state.

00:05:04.660 --> 00:05:07.135
Each piece of state needed its own reducer.

00:05:07.134 --> 00:05:10.269
Since the create store function can only take in one reducer,

00:05:10.269 --> 00:05:13.284
we had to create a reducer that acts as the main reducer,

00:05:13.285 --> 00:05:14.980
commonly called the root reducer,

00:05:14.980 --> 00:05:18.009
that in turn calls both of the other reducers to

00:05:18.009 --> 00:05:22.370
get each piece of state to build the final state of the app.

