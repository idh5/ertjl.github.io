WEBVTT
Kind: captions
Language: pt-BR

00:00:00.834 --> 00:00:02.836
Agora temos duas reducers,

00:00:02.869 --> 00:00:05.672
a todos reducer
e a goals reducer.

00:00:05.705 --> 00:00:07.841
Mas o problema
que estamos enfrentando

00:00:07.874 --> 00:00:10.176
é que, quando criamos a Store,

00:00:10.210 --> 00:00:13.179
temos que passar para ela
uma só reducer.

00:00:13.213 --> 00:00:16.816
Mas como fazemos isto se temos
mais de uma reducer,

00:00:16.850 --> 00:00:19.319
que é o que temos
aqui no nosso caso?

00:00:19.352 --> 00:00:22.188
Lembre-se de que o objetivo
da função reducer

00:00:22.222 --> 00:00:25.825
é nos levar ao próximo estado
do nosso aplicativo.

00:00:25.859 --> 00:00:28.028
O que acontece é,
quando usamos a createStore,

00:00:28.061 --> 00:00:32.198
nós passamos a reducer para ela,
a função reducer é chamada,

00:00:32.232 --> 00:00:35.368
atualizando o estado atual
da Store.

00:00:35.402 --> 00:00:40.106
E se, em vez de passar
uma todos reducer

00:00:40.140 --> 00:00:42.676
ou uma goals reducer,

00:00:42.709 --> 00:00:48.048
nós criássemos uma nova reducer
que chamaremos de "app"?

00:00:48.081 --> 00:00:51.518
Como a goals e a todos,

00:00:51.551 --> 00:00:56.356
ela vai conter
o estado e a ação.

00:00:56.389 --> 00:01:01.828
E o que o app nos retornar será
o novo estado do aplicativo.

00:01:01.861 --> 00:01:04.297
Como o que a todos
nos devolveu anteriormente

00:01:04.330 --> 00:01:07.167
era o estado
de todo o aplicativo.

00:01:07.200 --> 00:01:11.271
Agora, em vez do estado ser
um array,

00:01:11.304 --> 00:01:13.673
especificamente
um array de itens todo,

00:01:13.707 --> 00:01:16.343
queremos que o estado
seja um objeto,

00:01:16.376 --> 00:01:18.912
e este objeto terá
duas propriedades:

00:01:18.945 --> 00:01:22.782
todos e goals.

00:01:22.816 --> 00:01:27.287
Mas agora em vez de configurá-las
para um objeto vazio,

00:01:27.320 --> 00:01:30.557
como conseguimos a parte todos
do nosso estado?

00:01:30.590 --> 00:01:33.093
Já temos uma função
que lida com isto:

00:01:33.126 --> 00:01:36.096
esta função todos reducer.

00:01:36.129 --> 00:01:41.634
Precisamos passar para a todos
a parte todos do estado

00:01:41.668 --> 00:01:43.269
e a ação que ocorreu.

00:01:43.303 --> 00:01:44.471
E a todos,

00:01:44.504 --> 00:01:47.007
em vez de nos passar
todo o estado do aplicativo,

00:01:47.040 --> 00:01:50.744
só vai nos mandar
a parte todos do estado.

00:01:50.777 --> 00:01:54.864
Nós podemos passar
para a todos

00:01:54.898 --> 00:01:58.752
a porção todos do estado -,

00:01:58.785 --> 00:02:03.189
que será um array -,
e passar também a ação.

00:02:03.223 --> 00:02:07.694
Agora, para obter
a parte de goals do estado,

00:02:07.727 --> 00:02:09.596
usamos a goal reducer,

00:02:09.629 --> 00:02:14.834
passamos o state.goals
e a action para ela.

00:02:14.868 --> 00:02:18.471
E agora, em vez de passar a todos
como a reducer,

00:02:18.505 --> 00:02:21.107
podemos passar
para a createStore

00:02:21.141 --> 00:02:22.976
nossa função principal do app,

00:02:23.009 --> 00:02:25.679
à qual vamos nos referir
como uma root reducer.

00:02:25.712 --> 00:02:30.950
Agora, sempre
que a dispatch é usada,

00:02:30.984 --> 00:02:33.787
nós chamamos a função app,

00:02:33.820 --> 00:02:39.033
e ela vai usar a todo reducer

00:02:39.063 --> 00:02:40.794
e a goal reducer.

00:02:40.827 --> 00:02:44.364
Elas vão retornar
as partes específicas deste estado

00:02:44.397 --> 00:02:46.366
e receberemos um objeto

00:02:46.399 --> 00:02:49.636
que tem uma propriedade
de todos e de goals.

00:02:49.669 --> 00:02:54.441
Só precisamos fazer
mais uma mudança na app reducer.

00:02:54.474 --> 00:02:59.212
Quando a app é chamada
pela primeira vez,

00:02:59.245 --> 00:03:00.447
e o estado é indefinido,

00:03:00.480 --> 00:03:02.949
vamos configurá-la
como igual a um objeto vazio,

00:03:02.982 --> 00:03:05.585
como fizemos na goal reducer.

00:03:05.618 --> 00:03:07.620
Dentro da todo reducer.

00:03:07.654 --> 00:03:11.191
Porque, quando app é chamada
pela primeira vez,

00:03:11.224 --> 00:03:16.529
aqui,
o estado vai ser indefinido,

00:03:16.563 --> 00:03:18.064
porque está indefinido aqui
em cima,

00:03:18.098 --> 00:03:21.701
então vamos configurar
o estado do aplicativo

00:03:21.735 --> 00:03:23.169
para um objeto vazio.

00:03:23.203 --> 00:03:25.805
E quando a todos e a goals
são chamadas,

00:03:25.839 --> 00:03:29.676
a state.todos e a state.goals
vão ser indefinidas,

00:03:29.709 --> 00:03:32.545
e as duas propriedades
serão configuradas

00:03:32.579 --> 00:03:34.481
para estes arrays vazios.

00:03:34.514 --> 00:03:38.985
Agora, quando quisermos adicionar
um novo estado à Store,

00:03:39.019 --> 00:03:42.355
só precisamos adicionar
uma nova propriedade a este objeto,

00:03:42.389 --> 00:03:45.458
e o valor desta propriedade será
uma função reducer,

00:03:45.492 --> 00:03:49.963
que será responsável por gerenciar
esta parte do estado.

00:03:49.996 --> 00:03:51.998
Só para garantir
que está funcionando,

00:03:52.032 --> 00:03:57.737
eu vou colar
várias dispatches.

00:03:57.771 --> 00:04:01.074
ADD_TODO. ADD_TODO. ADD_TODO.

00:04:01.107 --> 00:04:04.512
Depois REMOVE_TODO.
TOGGLE TODO. ADD_GOAL. ADD_GOAL.

00:04:04.545 --> 00:04:05.745
Depois REMOVE_GOAL.

00:04:05.779 --> 00:04:07.658
Isto vai fazer
um teste de estresse

00:04:07.691 --> 00:04:12.419
do código atual.

00:04:17.891 --> 00:04:19.759
Agora dentro do meu console,

00:04:19.793 --> 00:04:23.797
criamos uma nova Store
chamada de store.subscribe.

00:04:23.830 --> 00:04:27.567
Agora, quando faço a dispatch
de todas estas ações,

00:04:27.600 --> 00:04:30.003
devemos ver
vários console.logs,

00:04:30.036 --> 00:04:33.406
porque store.subscribe
foi executado várias vezes.

00:04:33.440 --> 00:04:36.276
E, se olharmos a última parte
do nosso estado,

00:04:36.309 --> 00:04:40.246
vamos notar que tem um goal:
Lose 20 pounds.

00:04:40.280 --> 00:04:43.350
Dois itens todo,
Walk the dog e Go to the gym.

00:04:43.383 --> 00:04:45.418
E os dois estão configurados
para a complete.

00:04:45.452 --> 00:04:50.056
Se você seguir a lógica
para estas diferentes dispatches,

00:04:50.090 --> 00:04:55.028
você vai vê-las bem alinhadas
com o novo estado.

00:04:55.995 --> 00:04:57.230
Para resumir,

00:04:57.263 --> 00:04:59.766
o aplicativo começou
com um estado: todos.

00:04:59.799 --> 00:05:02.035
Quando adicionamos o goals,

00:05:02.068 --> 00:05:04.437
ficamos com dois estados
diferentes.

00:05:04.471 --> 00:05:07.040
Cada estado precisa
da sua própria reducer.

00:05:07.073 --> 00:05:10.176
Já que a função createStore
só pode conter uma reducer,

00:05:10.210 --> 00:05:11.544
precisamos criar uma reducer

00:05:11.578 --> 00:05:13.480
que funcione
como uma reducer principal,

00:05:13.513 --> 00:05:15.148
comumente chamada
de "root reducer",

00:05:15.181 --> 00:05:17.717
que internamente chama
as duas reducers,

00:05:17.751 --> 00:05:19.352
para obter cada estado

00:05:19.386 --> 00:05:21.721
para construir o estado final
do aplicativo.

