WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.150
The first thing we want to do here is let's head up into the head of our application,

00:00:06.150 --> 00:00:08.900
and we are going to add a new script here.

00:00:08.900 --> 00:00:11.130
And what this script is going to do is it is going to

00:00:11.130 --> 00:00:13.695
download the real Redux and stick it

00:00:13.695 --> 00:00:18.690
on the global namespace as capital R, Redux.

00:00:18.690 --> 00:00:24.425
So, anywhere inside of our app that we want to access Redux we can just do Redux.

00:00:24.425 --> 00:00:26.710
So, what that means is now,

00:00:26.710 --> 00:00:34.164
we can delete all of our library codes specifically our createStore function.

00:00:34.164 --> 00:00:35.272
So, that'll be gone.

00:00:35.273 --> 00:00:39.420
And then now, when we create our store,

00:00:39.420 --> 00:00:42.780
instead of calling our create store function,

00:00:42.780 --> 00:00:47.520
what we are going to do is we will call Redux.createStore.

00:00:47.520 --> 00:00:51.310
And what you'll see here is if we hit refresh,

00:00:51.310 --> 00:00:55.810
everything is going to be the exact same,

00:00:56.149 --> 00:01:05.793
because our createStore function was exactly the same as the real createStore function.

00:01:05.793 --> 00:01:07.849
So, not only do you understand how

00:01:07.849 --> 00:01:10.640
createStore actually works because you've literally built it,

00:01:10.640 --> 00:01:16.700
but you also understand how Redux itself works because all of our app code up

00:01:16.700 --> 00:01:20.000
here is really the exact same patterns and the same things

00:01:20.000 --> 00:01:23.444
that you would do inside of a Redux application.

00:01:23.444 --> 00:01:26.103
Now, there's one more thing that we can change here.

00:01:26.102 --> 00:01:30.019
If you remember, when we added our second reducer, our goals reducer here,

00:01:30.019 --> 00:01:35.390
what we also had to do was we had to create this app function which was responsible

00:01:35.390 --> 00:01:38.750
for calling our individual reducers and

00:01:38.750 --> 00:01:43.224
passing those reducers the specific slices of the state,

00:01:43.224 --> 00:01:46.259
in order to get our main state tree.

00:01:46.260 --> 00:01:51.290
Well, this is actually a common pattern in Redux that actually comes built in.

00:01:51.290 --> 00:01:57.090
So what we can do, is we can get rid of our app function, and now,

00:01:57.090 --> 00:01:59.900
instead of passing createStore app,

00:01:59.900 --> 00:02:08.245
we want to call Redux.combinedReducers passing object.

00:02:08.245 --> 00:02:10.920
Each property on this object is going to be

00:02:10.919 --> 00:02:14.639
our individual reducers just as we have right here.

00:02:14.639 --> 00:02:16.093
So, we can pass a todos,

00:02:16.093 --> 00:02:17.655
as well as goals,

00:02:17.655 --> 00:02:20.205
and then just like with our app function,

00:02:20.205 --> 00:02:23.325
combined reducers is going to be smart enough to say, "Okay,

00:02:23.324 --> 00:02:27.389
it looks like the user wants a todos property on their states and they also want

00:02:27.389 --> 00:02:31.789
a goals property and it's also going to be smart enough to pass todos,

00:02:31.789 --> 00:02:35.414
all they need to do is portion of the state as well as goals,

00:02:35.414 --> 00:02:37.379
the goals portion of the state".

00:02:37.379 --> 00:02:41.729
So again, we can delete our app function, because now,

00:02:41.729 --> 00:02:43.634
we can use combined reducers,

00:02:43.634 --> 00:02:46.949
and just so that you really believe me, now,

00:02:46.949 --> 00:02:50.399
we can come in here and everything is still working the exact

00:02:50.400 --> 00:02:56.800
same because our implementation of create store and combined reducers,

00:02:56.800 --> 00:03:03.640
was very similar to the actual create store and the actual combined reducers.

