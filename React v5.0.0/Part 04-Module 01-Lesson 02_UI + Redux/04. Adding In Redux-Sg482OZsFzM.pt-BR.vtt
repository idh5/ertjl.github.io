WEBVTT
Kind: captions
Language: pt-BR

00:00:00.145 --> 00:00:02.111
O primeiro passo será

00:00:02.153 --> 00:00:06.307
observar
o topo do aplicativo

00:00:06.349 --> 00:00:08.801
adicionando um novo script,

00:00:08.843 --> 00:00:12.913
que baixará o Redux real

00:00:12.955 --> 00:00:15.821
colocando-o
no namespace global

00:00:15.863 --> 00:00:18.736
como Redux, com R maiúsculo.

00:00:18.778 --> 00:00:24.393
Quando quisermos acessar o Redux,
basta dizermos "Redux".

00:00:24.435 --> 00:00:26.961
Isso significa que agora

00:00:27.003 --> 00:00:29.441
poderemos remover
o código de biblioteca,

00:00:29.483 --> 00:00:31.681
especificamente
a função createStore.

00:00:31.723 --> 00:00:35.201
Vamos remover isso.
Muito bem.

00:00:35.243 --> 00:00:39.625
Agora,
quando criarmos a Store,

00:00:39.667 --> 00:00:42.880
em vez de chamarmos
nossa função createStore,

00:00:42.922 --> 00:00:47.074
chamaremos
"Redux.createStore".

00:00:48.347 --> 00:00:51.761
Se recarregarmos
o aplicativo,

00:00:51.803 --> 00:00:55.010
tudo permanecerá
exatamente igual,

00:00:57.083 --> 00:00:59.570
porque
a nossa função createStore

00:01:00.489 --> 00:01:05.770
era exatamente igual
à função createStore real.

00:01:05.812 --> 00:01:09.183
Além de entendermos
como createStore funciona,

00:01:09.225 --> 00:01:10.834
pois literalmente
construímos uma,

00:01:10.876 --> 00:01:14.297
também entendemos
como o Redux funciona,

00:01:14.339 --> 00:01:17.304
porque todo o código
do aplicativo

00:01:17.346 --> 00:01:20.769
segue o mesmo padrão
e passos que faríamos

00:01:20.811 --> 00:01:23.433
em um aplicativo Redux.

00:01:23.475 --> 00:01:26.121
Podemos alterar
mais uma coisa.

00:01:26.163 --> 00:01:29.203
Quando adicionamos
a segunda reducer,

00:01:29.245 --> 00:01:34.169
a reducer das metas,
criamos a função app,

00:01:34.211 --> 00:01:36.482
que era responsável

00:01:36.524 --> 00:01:38.673
por chamar
reducers individuais

00:01:38.715 --> 00:01:42.922
e por passar a elas
os pedaços específicos do estado

00:01:43.945 --> 00:01:46.240
a fim de obter
a árvore de estado principal.

00:01:46.282 --> 00:01:49.519
Esse é um padrão comum
no Redux

00:01:49.561 --> 00:01:51.302
que já vem pronto.

00:01:51.344 --> 00:01:56.415
Nós podemos nos livrar
da função app.

00:01:56.457 --> 00:01:59.641
Agora, em vez de passarmos
createStore(app),

00:02:00.343 --> 00:02:05.880
chamaremos
Redux.combineReducers

00:02:06.872 --> 00:02:10.236
passando o objeto,
sendo que cada propriedade dele

00:02:10.278 --> 00:02:14.981
terá reducers individuais,
assim como temos aqui.

00:02:15.023 --> 00:02:17.748
Passamos afazeres e metas

00:02:17.790 --> 00:02:20.244
e, assim como na função app,

00:02:20.286 --> 00:02:22.412
as reducers combinadas
saberão

00:02:22.454 --> 00:02:26.692
que queremos a propriedade "todos"
no estado

00:02:26.734 --> 00:02:28.628
e a propriedade "goals".

00:02:28.670 --> 00:02:31.436
E ele saberá
que precisa passar "todos"

00:02:31.478 --> 00:02:34.034
para as partes "todos"
do estado,

00:02:34.076 --> 00:02:37.578
e "goals",
para as partes "goals" do estado.

00:02:37.620 --> 00:02:40.411
Podemos remover
a função app,

00:02:41.083 --> 00:02:43.938
porque podemos usar
combineReducers.

00:02:43.980 --> 00:02:46.671
Para que você acredite
no que eu digo,

00:02:46.713 --> 00:02:51.376
podemos ver que tudo
continua funcionando igual,

00:02:52.441 --> 00:02:55.176
porque a nossa implementação
da createStore

00:02:55.218 --> 00:02:57.120
e do combineReducers

00:02:57.162 --> 00:02:59.473
foi muito parecida

00:02:59.515 --> 00:03:03.200
com a createStore
e com o combineReducer reais.

