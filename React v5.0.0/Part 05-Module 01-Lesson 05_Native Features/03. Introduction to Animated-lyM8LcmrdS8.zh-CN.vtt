WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.235
流畅的动画效果是构建原生应用的基本组成部分

00:00:05.235 --> 00:00:10.179
因此 React Native 内置了动画库

00:00:10.179 --> 00:00:13.394
名字就叫做 Animated

00:00:13.394 --> 00:00:16.390
Animated 的目标是

00:00:16.390 --> 00:00:19.135
在用户界面上展现逼真的物理动作

00:00:19.135 --> 00:00:22.765
Animated 侧重于在输入和输出之间

00:00:22.765 --> 00:00:27.310
建立声明式关系 并且二者之间的转换可以配置

00:00:27.309 --> 00:00:29.399
我们来看一个示例

00:00:29.399 --> 00:00:32.560
这个视频内容将很有趣

00:00:32.560 --> 00:00:36.025
因为我们将使用 React Native 的 Animated 库

00:00:36.024 --> 00:00:41.324
顾名思义 Animated 就是在 React Native 应用中实现动画效果

00:00:41.325 --> 00:00:46.870
这是我们的组件 里面有容器

00:00:46.869 --> 00:00:48.814
并且渲染一个图片

00:00:48.814 --> 00:00:52.689
这就是在 iOS 和 Android 上的效果

00:00:52.689 --> 00:00:55.894
我们可以利用 Animated

00:00:55.895 --> 00:00:58.465
实现三种主要的动画效果

00:00:58.465 --> 00:01:01.600
Decay 以一个初始速度开始

00:01:01.600 --> 00:01:03.490
并逐渐减慢停止

00:01:03.490 --> 00:01:07.855
Spring 就像你之前见过的物理弹簧效果

00:01:07.855 --> 00:01:12.275
然后是 Timing 在一定的时间范围内表示值的渐变动画效果

00:01:12.275 --> 00:01:13.630
我们要做的是...

00:01:13.629 --> 00:01:15.114
转到这里

00:01:15.114 --> 00:01:16.854
当组件加载时

00:01:16.855 --> 00:01:20.829
我们将使图片组件出现动画效果

00:01:20.829 --> 00:01:22.929
对于动画

00:01:22.930 --> 00:01:25.570
首先要了解的是

00:01:25.569 --> 00:01:28.359
就像任何属性一样

00:01:28.359 --> 00:01:31.704
我们将在状态上设置一个属性

00:01:31.704 --> 00:01:33.399
然后 Animated

00:01:33.400 --> 00:01:35.950
将更改状态上的这一属性

00:01:35.950 --> 00:01:39.130
使组件具有动画效果

00:01:39.129 --> 00:01:40.334
内容有点深奥

00:01:40.334 --> 00:01:42.459
我们看看具体流程

00:01:42.459 --> 00:01:45.309
我们在这里向状态上添加了一个 opacity 属性

00:01:45.310 --> 00:01:46.795
因为我要做的是

00:01:46.795 --> 00:01:48.460
当组件加载时

00:01:48.459 --> 00:01:51.105
我想缓慢地显示该图片

00:01:51.105 --> 00:01:55.079
也就是让透明度缓慢地从 0 变成 1

00:01:55.079 --> 00:01:56.620
我们在这里输入

00:01:56.620 --> 00:02:00.965
opacity: new Animated Value()

00:02:00.965 --> 00:02:04.255
默认值为 0

00:02:04.254 --> 00:02:07.179
使 opacity 从 0 开始

00:02:07.180 --> 00:02:08.349
现在我们需要

00:02:08.349 --> 00:02:12.889
确保将此 opacity 当做样式添加到图片上

00:02:12.889 --> 00:02:15.819
但是不能使用普通图片

00:02:15.819 --> 00:02:19.014
需要输入 Animated.Image

00:02:19.014 --> 00:02:23.529
现在不仅只有 width 和 height

00:02:23.530 --> 00:02:25.435
我们还将转到这里

00:02:25.435 --> 00:02:27.879
输入 opacity

00:02:27.879 --> 00:02:32.484
我们将在这里从我们的状态上获取 opacity

00:02:32.485 --> 00:02:34.405
但是你可能猜到了

00:02:34.405 --> 00:02:36.759
如果现在运行应用的话

00:02:36.759 --> 00:02:38.649
你会发现

00:02:38.650 --> 00:02:39.960
没有任何图片

00:02:39.960 --> 00:02:45.665
这是因为我们在这里将图片值设为了 0

00:02:45.664 --> 00:02:46.974
然后

00:02:46.974 --> 00:02:49.439
我们将该 opacity 值添加到图片上

00:02:49.439 --> 00:02:50.859
所以现在

00:02:50.860 --> 00:02:53.430
图片的 opacity 为 0

00:02:53.430 --> 00:02:58.025
但是我们希望当组件加载时 实现动画效果

00:02:58.025 --> 00:02:59.200
我们在这里

00:02:59.199 --> 00:03:01.034
输入 componentDidMount

00:03:01.034 --> 00:03:03.564
当该组件加载时

00:03:03.564 --> 00:03:07.594
首先从状态上获取 opacity

00:03:07.594 --> 00:03:10.960
然后使用 Animated 的 timing 方法

00:03:10.960 --> 00:03:14.460
我希望将 opacity 从 0 过渡到 1

00:03:14.460 --> 00:03:16.625
持续时间为 1 秒

00:03:16.625 --> 00:03:18.264
实现方法是

00:03:18.264 --> 00:03:19.494
在这里输入

00:03:19.495 --> 00:03:22.265
Animated.timing 调用该方法

00:03:22.264 --> 00:03:26.264
首先要传入的是我们希望修改的实际值

00:03:26.264 --> 00:03:28.302
我们想修改 opacity

00:03:28.302 --> 00:03:32.590
然后传入一个具有一些选项的对象

00:03:32.590 --> 00:03:38.075
我们想将 opacity 修改为值 1

00:03:38.074 --> 00:03:40.444
我们将从 0 变成 1

00:03:40.444 --> 00:03:44.319
持续时间为 1,000 毫秒

00:03:44.319 --> 00:03:47.459
始终记得要运行 .start

00:03:47.460 --> 00:03:49.599
以便启动动画

00:03:49.599 --> 00:03:51.995
现在如果一切正常的话 会发生什么？

00:03:51.995 --> 00:03:55.034
如果应用运行的话

00:03:55.034 --> 00:03:59.384
出现了不错的淡入效果 看起来很棒

00:03:59.384 --> 00:04:01.449
但是现在

00:04:01.449 --> 00:04:02.884
我不再希望是淡入效果

00:04:02.884 --> 00:04:05.454
而是从宽和高都为 0 开始

00:04:05.455 --> 00:04:08.195
然后变成当前的宽度

00:04:08.194 --> 00:04:10.044
为此

00:04:10.044 --> 00:04:13.000
我们将使用 Animated 的 Spring 属性

00:04:13.000 --> 00:04:17.000
我们向状态添加几个属性

00:04:17.000 --> 00:04:21.579
width 也从 0 开始

00:04:21.579 --> 00:04:27.479
height 也为 Animated.Value 并从 0 开始

00:04:27.480 --> 00:04:31.660
然后就像对待 opacity 一样

00:04:31.660 --> 00:04:36.800
在这里输入 width 和 height 并且在这里添加这些属性

00:04:36.800 --> 00:04:39.879
保存下代码 看看效果

00:04:39.879 --> 00:04:41.620
什么也没看到

00:04:41.620 --> 00:04:45.540
因为现在图片的宽和高是 0

00:04:45.540 --> 00:04:47.080
就像这里一样

00:04:47.079 --> 00:04:52.870
我还希望将这些从 0 变为特定的值 300

00:04:52.870 --> 00:04:55.877
输入 Animated.spring

00:04:55.877 --> 00:04:57.415
首先设置 width

00:04:57.415 --> 00:05:00.118
我们想要修改 width

00:05:00.119 --> 00:05:03.291
现在我们希望值从 0 变成 300

00:05:03.290 --> 00:05:05.004
这里不再是 duration

00:05:05.004 --> 00:05:08.250
因为我们使用的是 spring 而不是 timing

00:05:08.250 --> 00:05:11.139
将 speed 设为 5

00:05:11.139 --> 00:05:12.849
默认地 speed 为 12

00:05:12.850 --> 00:05:14.905
speed 为 5 稍微慢些

00:05:14.904 --> 00:05:17.589
然后调用 .start

00:05:17.589 --> 00:05:22.039
复制这段代码 但是改为 height

00:05:22.040 --> 00:05:24.325
如果一切正常的话 我们应该能看到...

00:05:24.324 --> 00:05:26.300
出现问题了

00:05:26.300 --> 00:05:29.555
因为我们需要在这里获取 width 和 height

00:05:29.555 --> 00:05:31.389
现在如果一切正常的话

00:05:31.389 --> 00:05:39.099
不仅图片的透明度从 0 变成 1

00:05:39.100 --> 00:05:45.000
而且宽和高也从 0 变成了 300

