WEBVTT
Kind: captions
Language: ko

00:00:00.360 --> 00:00:02.160
때로 여러분은 다른 오리진의 사용자들에게

00:00:02.160 --> 00:00:05.830
여러분의 리소스를 접근할 수 있게
해주고 싶습니다

00:00:05.830 --> 00:00:07.860
이는 다른 사이트에서 해당 서비스를

00:00:07.860 --> 00:00:10.170
사용하게 해주는 API같은 것들인데

00:00:10.170 --> 00:00:12.930
Same Origin 정책이 이를 막아섭니다

00:00:12.930 --> 00:00:15.540
최근에 이 문제는 AGB 헤더인

00:00:15.540 --> 00:00:18.450
Cross Origin Resource Sharing

00:00:18.450 --> 00:00:20.860
CORS로 해결할 수 있습니다

00:00:20.860 --> 00:00:23.010
이는 Single Origin 문제의

00:00:23.010 --> 00:00:24.630
훌륭한 해결방안입니다

00:00:24.630 --> 00:00:27.390
하지만 몇 년전 까지만 해도,

00:00:27.390 --> 00:00:28.890
브라우저는 이를 지원하지 않았고

00:00:28.890 --> 00:00:30.450
사람들은 그들만의 기술로 이를

00:00:30.450 --> 00:00:34.020
해결해야 했습니다

00:00:34.020 --> 00:00:35.640
그 중 하나가 JSONP

00:00:35.640 --> 00:00:38.190
JSON with Padding 이라는 방식인데

00:00:38.190 --> 00:00:39.630
단순히 데이터를 리턴하는것이 아니라

00:00:39.630 --> 00:00:42.660
JSONP는 데이터를 포함한 스크립트를 리턴합니다

00:00:42.660 --> 00:00:45.540
이는 다른 오리진에서 온 스크립트가 여러분의

00:00:45.540 --> 00:00:48.270
스크립트 환경을 공유한다는 사실을

00:00:48.270 --> 00:00:49.830
활용한 방법입니다

00:00:49.830 --> 00:00:52.920
JSONP를 활용한 API는 query parameter에

00:00:52.920 --> 00:00:54.600
함수명을 포함시켜야 합니다.

00:00:54.600 --> 00:00:57.240
그렇게 하면 서버는 여러분이 작성한 이름의

00:00:57.240 --> 00:00:59.260
함수를 호출하는 스크립트를 리턴합니다

00:00:59.260 --> 00:01:01.031
예제를 살펴봅시다

00:01:01.031 --> 00:01:03.280
우리는 yourcourselist.com이라는
사이트를 만듭니다

00:01:03.280 --> 00:01:06.880
이 사이트는 여러분이 수강하는 모든

00:01:06.880 --> 00:01:08.030
과목의 리스트를 보여줍니다

00:01:08.030 --> 00:01:10.180
단순하게 Fetch 요청을 사용하여

00:01:10.180 --> 00:01:12.910
Udacity.com에 과목 목록을 요청하고,

00:01:12.910 --> 00:01:15.680
리스트를 반환받는 요청을 생성해봅시다.

00:01:15.680 --> 00:01:18.400
하지만, Udacity 호스트와 
다른 호스트 접근으로 인한

00:01:18.400 --> 00:01:21.430
보안 제외로 실패할 것입니다

00:01:21.430 --> 00:01:24.500
만약 이 API가 JSONP를 사용하면 어떨까요?

00:01:24.500 --> 00:01:27.250
URL에 함수 이름을 포함시킵니다.

00:01:27.250 --> 00:01:28.870
그리고 스크립트 태그를 추가하세요

00:01:28.870 --> 00:01:30.460
그렇게 하면 서버는 
모든 데이터를 파라미터로 갖는 함수에

00:01:30.460 --> 00:01:33.400
query parameter 로 전달받은 이름과 동일한 함수명을

00:01:33.400 --> 00:01:35.710
부여해서 넘겨줍니다

00:01:35.710 --> 00:01:38.530
그 전에 여러분들은

00:01:38.530 --> 00:01:40.840
이 함수를 정의해 놓아야 합니다

00:01:40.840 --> 00:01:43.480
여러분은 이제 그 함수의 파라미터로

00:01:43.480 --> 00:01:45.420
데이터를 접근할 수 있습니다

