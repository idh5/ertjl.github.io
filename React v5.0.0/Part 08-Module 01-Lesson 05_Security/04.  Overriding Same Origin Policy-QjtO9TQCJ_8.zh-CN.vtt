WEBVTT
Kind: captions
Language: zh-CN

00:00:00.360 --> 00:00:02.160
有时候 你希望其他人能访问你的资源

00:00:02.160 --> 00:00:05.830
即使他们来自其他来源

00:00:05.830 --> 00:00:07.859
尤其是 API 提供商

00:00:07.860 --> 00:00:10.169
他们希望其他网站能够使用他们的服务

00:00:10.169 --> 00:00:12.929
但是同源政策阻止这么做

00:00:12.929 --> 00:00:15.539
如今 你可以利用跨源资源共享（简称 CORS）

00:00:15.539 --> 00:00:18.449
并通过 AGB 报头

00:00:18.449 --> 00:00:20.859
轻松地实现资源共享

00:00:20.859 --> 00:00:23.009
这是解决单一起源问题

00:00:23.010 --> 00:00:24.630
最强大的工程解决方案

00:00:24.629 --> 00:00:27.390
但是直到几年前

00:00:27.390 --> 00:00:28.890
很少有浏览器支持 CORS

00:00:28.890 --> 00:00:30.449
在此期间 人们需要自己想出技巧

00:00:30.449 --> 00:00:34.019
来应对单一来源策略

00:00:34.020 --> 00:00:35.640
时间最久的一个技巧是

00:00:35.640 --> 00:00:38.189
JSONP 即 JSON with Padding

00:00:38.189 --> 00:00:39.629
JSONP 返回一个包含数据的脚本

00:00:39.630 --> 00:00:42.660
而不是直接返回数据

00:00:42.659 --> 00:00:45.539
原理是其他来源的脚本

00:00:45.539 --> 00:00:48.269
将执行并与你的脚本

00:00:48.270 --> 00:00:49.830
共享执行环境

00:00:49.829 --> 00:00:52.920
基于 JSONP 的 API 会包含函数名称

00:00:52.920 --> 00:00:54.600
并作为查询参数

00:00:54.600 --> 00:00:57.240
服务器将返回一个调用你所指定的函数的

00:00:57.240 --> 00:00:59.260
新脚本

00:00:59.259 --> 00:01:01.030
我们来看一个虚构示例

00:01:01.030 --> 00:01:03.280
假设我们要在 yourcourselist.com 上构建应用

00:01:03.280 --> 00:01:06.879
并列出用户报名的所有

00:01:06.879 --> 00:01:08.030
高校课程

00:01:08.030 --> 00:01:10.180
比较初级的方法是

00:01:10.180 --> 00:01:13.870
向 api.udacity.com 发出 fetch 请求

00:01:13.870 --> 00:01:15.680
并使用返回的数据为用户生成列表

00:01:15.680 --> 00:01:18.400
但是 这样做会因为安全异常而失败

00:01:18.400 --> 00:01:21.430
因为你的主机与 Udacity 的主机不同

00:01:21.430 --> 00:01:24.500
如果该 API 支持 JSONP 会怎样？

00:01:24.500 --> 00:01:27.250
向该 URL 中添加一个函数名称

00:01:27.250 --> 00:01:28.870
并包含在 script 标签中

00:01:28.870 --> 00:01:30.460
服务器将需要返回的所有数据都封装在

00:01:30.459 --> 00:01:33.399
名称和通过查询参数提供的名称相同的

00:01:33.400 --> 00:01:35.710
函数调用中

00:01:35.709 --> 00:01:38.529
你需要定义此函数

00:01:38.530 --> 00:01:40.840
因为当响应返回时 函数调用被执行

00:01:40.840 --> 00:01:43.480
现在你可以访问该函数的参数

00:01:43.480 --> 00:01:45.420
对应的数据了

