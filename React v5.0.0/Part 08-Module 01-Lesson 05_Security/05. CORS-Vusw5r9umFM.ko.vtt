WEBVTT
Kind: captions
Language: ko

00:00:01.180 --> 00:00:03.500
CORS는 API 제공자들에게

00:00:03.500 --> 00:00:06.500
가장 뛰어난 방법으로 사용되고 있습니다

00:00:06.500 --> 00:00:08.870
CORS헤더는 자바스크립트를 사용하지 않고

00:00:08.870 --> 00:00:10.670
다른 오리진에서도 서버의 서비스를

00:00:10.670 --> 00:00:13.010
이용할 수 있습니다

00:00:13.010 --> 00:00:15.020
CORS 헤더는 서버가 그들의 자원을

00:00:15.020 --> 00:00:16.670
사용할 수 있게 허락받은 오리진의

00:00:16.670 --> 00:00:18.590
목록을 관리할 수 있게 해줍니다

00:00:18.590 --> 00:00:21.210
만약 referrer 헤더에 그 이름이 있다면

00:00:21.210 --> 00:00:24.050
그 자원을 쓸 수 있게 됩니다

00:00:24.050 --> 00:00:25.550
문제가 해결됐습니다

00:00:25.550 --> 00:00:27.230
하지만 자세히 보면

00:00:27.230 --> 00:00:28.760
서버의 목록을 확인하기 위해서는

00:00:28.760 --> 00:00:30.870
요청을 보내야 합니다

00:00:30.870 --> 00:00:33.170
이는 어떤 동작이 실행되어야지만

00:00:33.170 --> 00:00:35.780
가능한 지를 알 수있는 구조입니다

00:00:35.780 --> 00:00:38.960
이는 유저의 요청이 이미 실행한 후에

00:00:38.960 --> 00:00:41.550
서버가 검토를 하는 preflight 요청이라고 합니다

00:00:41.550 --> 00:00:43.940
preflight 요청을 위해 OPTIONS 메소드를

00:00:43.940 --> 00:00:46.040
활용하여 브라우저가 서버에게 가능한 것과

00:00:46.040 --> 00:00:48.850
불가능한 것을 요청해야합니다

00:00:48.850 --> 00:00:51.530
서버는 어떤 동작도 수행하지 않고

00:00:51.530 --> 00:00:54.970
헤더만을 리턴해주어야 합니다

00:00:54.970 --> 00:00:57.800
하지만 모든 요청이 preflight는 아닙니다

00:00:57.800 --> 00:01:00.680
이미지나 form 태그는 preflighted될

00:01:00.680 --> 00:01:02.210
필요가 없습니다

00:01:02.210 --> 00:01:05.120
어떤 GET 요청은 바로 보내지게 됩니다

00:01:05.120 --> 00:01:07.100
여러분은 CORS가 허용되지 않으면 어떤

00:01:07.100 --> 00:01:09.020
값도 읽어올 수 없습니다

00:01:09.020 --> 00:01:11.330
Preflight 요청과 CORS에 대해

00:01:11.330 --> 00:01:13.855
더 알고 싶으시다면

00:01:13.855 --> 00:01:15.980
강사메모에 링크를 첨부하였으니

00:01:15.980 --> 00:01:18.010
참고하십시오

00:01:18.010 --> 00:01:20.800
이제 우리는 single origin 제한을 푸는

00:01:20.800 --> 00:01:21.790
몇 가지 방법을 알았습니다

00:01:21.790 --> 00:01:24.610
여러분이 API를 설계하고 있다면

00:01:24.610 --> 00:01:27.730
처음부터 CORS 문제를 생각해서

00:01:27.730 --> 00:01:30.310
서버를 구상해보는 것을 추천합니다

