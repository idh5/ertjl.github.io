WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.435
CORS has been adopted by API providers as the primary way to share resources.

00:00:06.435 --> 00:00:10.300
CORS headers permit cross origin requests without relying on Javascript,

00:00:10.300 --> 00:00:12.450
though they do need some server side code.

00:00:12.450 --> 00:00:15.280
CORS sort us allow service to specify a set

00:00:15.280 --> 00:00:18.325
of origins that are allowed to access its resources.

00:00:18.325 --> 00:00:21.055
If the request refer header is on that list,

00:00:21.055 --> 00:00:25.220
it will be able to inspect the answer and use the data. Problem solved.

00:00:25.220 --> 00:00:28.720
However, if you take a closer look you will realize that by the time

00:00:28.720 --> 00:00:33.105
the server sends back the headers the request will already have executed.

00:00:33.105 --> 00:00:35.725
This can become problematic with destructive operations

00:00:35.725 --> 00:00:38.890
because it is already too late to ignore the request.

00:00:38.890 --> 00:00:41.080
This is where preflight requests come into play.

00:00:41.080 --> 00:00:44.465
A preflight request uses the options method and allows

00:00:44.465 --> 00:00:48.875
the browser to signal that it only wants to check what is allowed and what is not.

00:00:48.875 --> 00:00:51.475
A server should not execute any kind of business logic

00:00:51.475 --> 00:00:54.640
but only returned the headers similar to a head request.

00:00:54.640 --> 00:00:57.230
However not all requests will be preflighted,

00:00:57.230 --> 00:01:02.165
requests are made because of image text or forms will not be preflighted.

00:01:02.165 --> 00:01:04.990
So any kind of get request will be sent straight away,

00:01:04.990 --> 00:01:07.060
you just won't be able to read the answer,

00:01:07.060 --> 00:01:08.950
of course doesn't allow it.

00:01:08.950 --> 00:01:11.290
The details about when preflight requests are actually

00:01:11.290 --> 00:01:13.745
sent with CORS are intricate and extensive,

00:01:13.745 --> 00:01:17.970
so I'll even link with details in instructor notes.

00:01:17.970 --> 00:01:21.625
Now we have a couple of ways to get around the single origin restriction.

00:01:21.625 --> 00:01:24.535
If you're ever involved in publishing an API yourself,

00:01:24.535 --> 00:01:26.620
I'd encourage you to think about CORS from

00:01:26.620 --> 00:01:29.070
the very beginning and to enable it on your server.

