WEBVTT
Kind: captions
Language: zh-CN

00:00:00.499 --> 00:00:02.040
正如刚刚了解的

00:00:02.040 --> 00:00:05.310
看起来像来自表单的请求将不会被预检

00:00:05.309 --> 00:00:08.160
如果 CORS 不允许读取响应 你将无法读取响应

00:00:08.160 --> 00:00:10.589
但有时候可能不需要查看响应

00:00:10.589 --> 00:00:11.910
就能造成严重破坏

00:00:11.910 --> 00:00:14.580
假设银行有一个转账表单

00:00:14.580 --> 00:00:17.820
如果你是个坏人

00:00:17.820 --> 00:00:19.769
你只想将钱汇到你自己的账户中

00:00:19.769 --> 00:00:22.169
你不关心服务器的结果是什么

00:00:22.170 --> 00:00:23.820
因此你设置了一个网站

00:00:23.820 --> 00:00:26.490
用来伪造 URL 和表单所用的 URL 一样的请求

00:00:26.489 --> 00:00:28.649
并设置相关参数 将钱汇到你的账户中

00:00:28.649 --> 00:00:30.839
用户根本不会发现

00:00:30.839 --> 00:00:33.420
因此这种攻击称为跨站请求伪造

00:00:33.420 --> 00:00:35.730
简称 CSRF

00:00:35.729 --> 00:00:38.039
当然 银行拥有复杂的

00:00:38.039 --> 00:00:38.640
保护机制

00:00:38.640 --> 00:00:42.140
但是对于大多数情况 CSFR 令牌就足够作为保护措施了

00:00:42.140 --> 00:00:44.439
CSFR 令牌是由服务器

00:00:44.439 --> 00:00:47.140
添加到表单上的额外字段

00:00:47.140 --> 00:00:49.170
并存储在服务器上

00:00:49.170 --> 00:00:51.090
如果有人提交了请求

00:00:51.090 --> 00:00:53.640
CSFR 就会对照存储的令牌检查该令牌

00:00:53.640 --> 00:00:57.619
只有这两个令牌匹配时 才执行请求

