WEBVTT
Kind: captions
Language: ko

00:00:00.499 --> 00:00:02.760
자바스크립트는

00:00:02.760 --> 00:00:05.080
자신을 제외한 다른 origin(출처)에서

00:00:05.080 --> 00:00:06.640
데이터에 접근을 못하도록 합니다

00:00:06.640 --> 00:00:08.850
오리진은 세 가지 파트로 구성되어 있습니다

00:00:08.850 --> 00:00:11.760
데이터 스킴, 호스트 이름, 포트 번호입니다

00:00:11.760 --> 00:00:15.000
이 페이지를 예로들면,
HTTPS가 스킴이고

00:00:15.000 --> 00:00:17.610
호스트 이름은 
Udacitiy.com 이고

00:00:17.610 --> 00:00:20.760
포트 번호는 443입니다

00:00:20.760 --> 00:00:22.950
이 세 가지 중에서 하나라도 변경하게 되면

00:00:22.950 --> 00:00:26.310
다른 오리진이 되고, 다른 규칙이 적용됩니다

00:00:26.310 --> 00:00:27.990
혼합 컨텐츠 문제외에도

00:00:27.990 --> 00:00:30.330
HTTP와 HTTPS URL을 섞지 말아야

00:00:30.330 --> 00:00:34.510
하는 이유 중 하나입니다

00:00:34.510 --> 00:00:37.270
하지만 여러분이 여러 오리진이

00:00:37.270 --> 00:00:39.190
동시에 작업을 하고 있다면 어떻게 될까요?

00:00:39.190 --> 00:00:41.530
첫 번째로, 여러분은 Fetch 요청을

00:00:41.530 --> 00:00:43.330
다른 오리진에 할 수 없습니다

00:00:43.330 --> 00:00:45.760
사실, 할 수는 있습니다만

00:00:45.760 --> 00:00:48.130
답을 읽을 수 없습니다

00:00:48.130 --> 00:00:51.130
다음으로, 다른 오리진에서 온

00:00:51.130 --> 00:00:54.600
iFrame이나 자바스크립트 창을
검사할 수 없습니다

00:00:54.600 --> 00:00:57.150
이는 당연한 결과입니다

00:00:57.150 --> 00:00:59.490
만약 제가 다른 오리진의 Fetch 요청을

00:00:59.490 --> 00:01:00.960
허락한다면

00:01:00.960 --> 00:01:02.550
Facebook.com에 Fetch 요청을 사용하여

00:01:02.550 --> 00:01:05.129
여러분들의 페이스북 메세지를 전부

00:01:05.129 --> 00:01:06.780
훔쳐볼 수가 있습니다

00:01:06.780 --> 00:01:09.660
또는 Udacity.com에 요청을 보내서

00:01:09.660 --> 00:01:13.260
여러분의 강좌를 전부

00:01:13.260 --> 00:01:15.030
드랍하게 할 수 있습니다

00:01:15.030 --> 00:01:19.400
우리는 이를 원치 않기때문에
same-origin 정책을 사용합니다

