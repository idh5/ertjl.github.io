WEBVTT
Kind: captions
Language: zh-CN

00:00:01.179 --> 00:00:03.500
很多 API 提供商将 CORS

00:00:03.500 --> 00:00:06.500
当做共享资源的主要方式

00:00:06.500 --> 00:00:08.870
CORS 报头允许跨源请求

00:00:08.869 --> 00:00:10.669
并且不用依赖 JavaScript

00:00:10.669 --> 00:00:13.009
但是需要在服务器端添加一些代码

00:00:13.009 --> 00:00:15.019
CORS 报头允许服务器指定

00:00:15.019 --> 00:00:16.669
可以访问其资源的

00:00:16.670 --> 00:00:18.590
一组来源

00:00:18.589 --> 00:00:21.210
如果请求的 Referrer 报头位于该列表中

00:00:21.210 --> 00:00:24.050
它将能够检查结果并使用数据

00:00:24.050 --> 00:00:25.550
问题得到解决

00:00:25.550 --> 00:00:27.230
但是 如果你仔细看看

00:00:27.230 --> 00:00:28.760
就会发现

00:00:28.760 --> 00:00:30.870
到服务器发回报头时

00:00:30.870 --> 00:00:33.170
请求已经被执行

00:00:33.170 --> 00:00:35.780
这样会使结构操作出现问题

00:00:35.780 --> 00:00:38.960
因为已经无法忽略请求

00:00:38.960 --> 00:00:41.549
这时候预检请求就派上用场了

00:00:41.549 --> 00:00:43.939
预检请求使用 OPTIONS 方法

00:00:43.939 --> 00:00:46.039
并允许浏览器表示它只想

00:00:46.039 --> 00:00:48.850
检查允许执行什么操作 不允许执行什么操作

00:00:48.850 --> 00:00:51.530
服务器不应执行任何类型的业务逻辑

00:00:51.530 --> 00:00:54.969
而是仅返回报头 类似于 Head 请求

00:00:54.969 --> 00:00:57.799
但是 并非所有请求都被预检

00:00:57.799 --> 00:01:00.679
因为图片标签或表单发出的请求

00:01:00.679 --> 00:01:02.210
不会被预检

00:01:02.210 --> 00:01:05.120
因此任何类型的 Get 请求都将立即发送

00:01:05.120 --> 00:01:07.100
如果 CORS 不允许这种请求

00:01:07.099 --> 00:01:09.019
你将无法读取结果

00:01:09.019 --> 00:01:11.329
关于有 CORS 时预检请求

00:01:11.329 --> 00:01:13.855
何时会真的被发送 比较复杂 知识点很多

00:01:13.855 --> 00:01:15.980
因此我在讲师注释中给出了

00:01:15.980 --> 00:01:18.010
详情链接

00:01:18.010 --> 00:01:20.800
现在 我们可以通过几种方式来应对

00:01:20.799 --> 00:01:21.789
单一来源限制

00:01:21.790 --> 00:01:24.609
如果你以后要发布 API

00:01:24.609 --> 00:01:27.730
建议你从一开始就考虑 CORS

00:01:27.730 --> 00:01:30.310
并在你的服务器上启用 CORS

