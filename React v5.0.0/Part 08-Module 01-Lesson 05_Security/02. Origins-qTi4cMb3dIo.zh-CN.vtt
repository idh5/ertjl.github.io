WEBVTT
Kind: captions
Language: zh-CN

00:00:00.499 --> 00:00:02.760
一般来说

00:00:02.759 --> 00:00:05.849
JavaScript 无法访问除本身之外的

00:00:05.849 --> 00:00:06.639
任何其他来源的数据

00:00:06.639 --> 00:00:08.849
来源由三部分组成

00:00:08.849 --> 00:00:11.759
数据模式 主机名和端口

00:00:11.759 --> 00:00:15.000
对于你目前正在查看的网页 模式是 HTTPS

00:00:15.000 --> 00:00:17.609
主机名是 www.udacity.com

00:00:17.609 --> 00:00:20.759
端口是 443

00:00:20.760 --> 00:00:22.950
如果你更改任一部分

00:00:22.949 --> 00:00:26.309
就会处在不同的来源并且适用不同的规则

00:00:26.309 --> 00:00:27.989
除了之前讨论的

00:00:27.989 --> 00:00:30.329
混合内容问题之外

00:00:30.329 --> 00:00:34.509
这也是不要混合 HTTP 和 HTTPS URL 的另一个原因

00:00:34.509 --> 00:00:37.269
但是当你使用多个来源时

00:00:37.270 --> 00:00:39.190
需要遵守哪些规则呢？

00:00:39.189 --> 00:00:41.530
首先 不能向其他来源

00:00:41.530 --> 00:00:43.329
发出 fetch 请求

00:00:43.329 --> 00:00:45.759
实际上在某些情况下 可以这么做

00:00:45.759 --> 00:00:48.129
但是你无法阅读获取的内容

00:00:48.130 --> 00:00:51.130
其次 如果包含 JavaScript 的 iframe 或窗口

00:00:51.130 --> 00:00:54.600
来自其他来源 则无法检测它们

00:00:54.600 --> 00:00:57.149
如果你仔细思考下 就会发现这些规则很合理

00:00:57.149 --> 00:00:59.489
假设我可以向其他来源

00:00:59.490 --> 00:01:00.960
发出 fetch 请求

00:01:00.960 --> 00:01:02.550
我可以构建一个网站

00:01:02.549 --> 00:01:05.128
向 facebook.com 发出 fetch 请求

00:01:05.129 --> 00:01:06.780
并窃取你的所有 Facebook 消息

00:01:06.780 --> 00:01:09.659
甚至更糟糕 我可以向 udacity.com 发出 fetch 请求

00:01:09.659 --> 00:01:13.259
并让你缺席所有的优达学城课程

00:01:13.260 --> 00:01:15.030
我们肯定不希望发生这种情况

00:01:15.030 --> 00:01:19.400
这种限制/规则称为同源策略

