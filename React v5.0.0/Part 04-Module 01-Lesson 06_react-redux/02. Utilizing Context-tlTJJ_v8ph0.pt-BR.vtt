WEBVTT
Kind: captions
Language: pt-BR

00:00:00.444 --> 00:00:03.506
Vejamos rapidamente
como o aplicativo está funcionando.

00:00:03.548 --> 00:00:07.534
Temos um componente App
com componentes Todos e Goals.

00:00:07.576 --> 00:00:10.277
Ambos precisam
acessar a Store,

00:00:10.319 --> 00:00:13.516
e App precisa passar a Store
como uma propriedade.

00:00:13.558 --> 00:00:14.789
Isso funciona,

00:00:14.831 --> 00:00:17.642
mas conforme o aplicativo cresce,
ficará mais difícil

00:00:17.684 --> 00:00:20.062
passar a Store
para os componentes.

00:00:20.104 --> 00:00:24.863
Vamos utilizar a nova Context API
para tornar a Store acessível.

00:00:25.705 --> 00:00:29.361
O primeiro passo
quando lidamos com a Context

00:00:29.403 --> 00:00:32.484
é criar um objeto Context

00:00:32.526 --> 00:00:36.173
usando React.createContext.

00:00:36.215 --> 00:00:40.176
O objeto Context terá
uma propriedade Provider

00:00:40.218 --> 00:00:41.640
e uma Consumer.

00:00:41.682 --> 00:00:44.391
Então, primeiro,
configuramos a Provider.

00:00:45.008 --> 00:00:49.534
Faremos uma abstração
com a Provider

00:00:49.576 --> 00:00:52.415
criando
nosso próprio componente Provider.

00:00:53.823 --> 00:00:56.295
Isto renderizará...

00:00:57.750 --> 00:01:01.710
um componente
Context.Provider

00:01:01.752 --> 00:01:05.383
e, dentro dele, renderizará
o que estiver no filho.

00:01:05.425 --> 00:01:08.761
O que desejamos disponibilizar
nos componentes Child

00:01:08.803 --> 00:01:12.736
que usam Context.Consumer
é a Store.

00:01:12.778 --> 00:01:15.049
Nós passaremos a Store

00:01:15.091 --> 00:01:18.613
para o componente Provider
como uma propriedade

00:01:18.655 --> 00:01:21.650
e a colocaremos no valor,

00:01:21.692 --> 00:01:24.024
assim, o componente Child
que usar Consumer,

00:01:24.066 --> 00:01:26.401
poderá consumir a Store

00:01:26.443 --> 00:01:28.840
sem precisar passá-la
como propriedade.

00:01:28.882 --> 00:01:31.765
Com o componente Provider,

00:01:32.461 --> 00:01:35.780
em vez de renderizarmos App,

00:01:35.822 --> 00:01:37.467
renderizaremos o Provider,

00:01:37.509 --> 00:01:39.685
passaremos a ele,
como propriedade,

00:01:40.485 --> 00:01:41.716
a Store.

00:01:41.758 --> 00:01:44.636
Queremos
que os filhos dele sejam

00:01:44.678 --> 00:01:49.904
o componente App.

00:01:49.946 --> 00:01:54.320
Por termos empacotado
o aplicativo e o provedor

00:01:54.362 --> 00:01:56.577
e fornecemos a Store,

00:01:56.619 --> 00:01:59.321
agora, sempre que,
nos componentes Child,

00:01:59.363 --> 00:02:02.954
usarmos Context.Consumer,
poderemos obter a Store.

00:02:04.250 --> 00:02:06.975
Agora vamos implementar
Context.Consumer.

00:02:07.017 --> 00:02:11.104
A primeira área
na qual acessaremos a Store

00:02:11.146 --> 00:02:13.408
de um componente,
é no componente App.

00:02:13.450 --> 00:02:18.352
Mas isto é um pouco difícil, pois,
quando usamos Context.Consumer,

00:02:18.394 --> 00:02:21.506
ele tem uma API declarativa.
Portanto,

00:02:22.817 --> 00:02:25.528
para obtermos acesso à Store,
como vimos,

00:02:25.570 --> 00:02:27.284
usamos Context.Consumer,

00:02:27.326 --> 00:02:30.299
e obtemos acesso à Store

00:02:30.341 --> 00:02:34.475
passando uma função filha,

00:02:34.517 --> 00:02:36.945
na qual passaremos store.

00:02:36.987 --> 00:02:40.146
Mas isto não nos ajuda
dentro do componente App,

00:02:40.188 --> 00:02:43.634
pois precisamos ter acesso
à Store dentro de componentDidMount

00:02:43.676 --> 00:02:45.970
e não apenas
no método render.

00:02:46.012 --> 00:02:48.515
Para resolver esse problema,

00:02:48.557 --> 00:02:52.530
usaremos um padrão
chamado "componente Container".

00:02:52.572 --> 00:02:54.483
O componente Connected
é complicado,

00:02:54.525 --> 00:02:56.369
vejamos
o que ele busca resolver.

00:02:56.411 --> 00:03:00.233
"Connected" significa
que ele está conectado à Store.

00:03:00.275 --> 00:03:03.442
Ele será responsável
pela interação com a Store.

00:03:03.484 --> 00:03:06.361
Isto contrasta
com o componente Presentational,

00:03:06.403 --> 00:03:08.786
responsável
pela renderização de conteúdo.

00:03:08.828 --> 00:03:11.729
Os componentes Presentational
lidam com a aparência.

00:03:11.771 --> 00:03:14.410
Os Container,
com o funcionamento.

00:03:14.452 --> 00:03:17.792
Um componente Container
é chamado no seu código.

00:03:17.834 --> 00:03:21.209
Isso interage com a Store
e obtém os dados necessários.

00:03:21.251 --> 00:03:23.467
Depois ele passa os dados
como propriedades

00:03:23.509 --> 00:03:25.298
para o componente
Presentational.

00:03:25.340 --> 00:03:26.890
Isso é complicado no início,

00:03:26.932 --> 00:03:29.743
mas o benefício
é a separação de conceitos.

00:03:29.785 --> 00:03:31.968
O que for relacionado
à Store ou aos dados

00:03:32.010 --> 00:03:34.135
será realizado
no componente Connected,

00:03:34.177 --> 00:03:37.699
e tudo que for renderizado,
estará no componente Presentational.

00:03:38.372 --> 00:03:42.978
Vamos criar
um novo componente,

00:03:43.020 --> 00:03:45.523
que chamaremos
de "ConnectedApp",

00:03:45.565 --> 00:03:48.380
e ele estenderá
o React.Component.

00:03:48.422 --> 00:03:51.939
Ele renderizará

00:03:51.981 --> 00:03:53.509
Context.Consumer.

00:03:53.551 --> 00:03:56.679
Agora podemos passar
uma função

00:03:56.721 --> 00:04:00.438
como filho,
que receberá a Store.

00:04:00.480 --> 00:04:04.783
Agora podemos renderizar
o que desejarmos.

00:04:04.825 --> 00:04:07.295
Vamos renderizar
o componente App

00:04:07.337 --> 00:04:10.472
passando a ele
a Store como propriedade.

00:04:10.514 --> 00:04:13.534
Agora, na Store,
não precisaremos mudar nada,

00:04:13.576 --> 00:04:17.488
pois aqui já diz que a Store
vem como propriedade.

00:04:17.530 --> 00:04:21.542
Agora, em vez de passar
a Store ao componente App,

00:04:21.584 --> 00:04:23.461
no momento
no qual renderizamos,

00:04:23.503 --> 00:04:25.083
usamos Context

00:04:25.125 --> 00:04:29.973
e temos um componente ConnectedApp,
que obtém a Store da Context

00:04:30.015 --> 00:04:31.300
e a passa ao aplicativo.

