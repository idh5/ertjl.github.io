WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.860
So how this will work is we're going to first create a variable called Context,

00:00:07.860 --> 00:00:12.269
and it's going to be the result of invoking React.createContext.

00:00:12.269 --> 00:00:14.070
And again, this is a brand new API.

00:00:14.070 --> 00:00:15.734
So you might have not seen it before.

00:00:15.734 --> 00:00:18.884
So now we have this Context object,

00:00:18.885 --> 00:00:21.554
and it's going to have two different properties on it.

00:00:21.554 --> 00:00:25.949
It's going to have a provider property as well as a consumer property.

00:00:25.949 --> 00:00:29.939
So let's head to our main app and what we're going to

00:00:29.940 --> 00:00:34.125
do is let's wrap our Parent component here,

00:00:34.125 --> 00:00:38.679
inside of the Context.Provider.

00:00:38.840 --> 00:00:47.380
And then, we're going to pass our provider component a prop,

00:00:47.640 --> 00:00:51.338
a value, and we'll give it a name.

00:00:51.338 --> 00:00:54.519
So what we've done here is we've wrapped

00:00:54.520 --> 00:00:58.105
our Parent element here inside of Context.Provider,

00:00:58.104 --> 00:01:00.789
passing it a value of name.

00:01:00.789 --> 00:01:06.759
And then now whenever we want to get access to this name variable,

00:01:06.759 --> 00:01:09.715
whether that's in our Parent component are Child component,

00:01:09.715 --> 00:01:11.680
or our Grandchild component,

00:01:11.680 --> 00:01:20.719
all we have to do is wrap our specific UI or our JSX inside of Context.Consumer,

00:01:25.250 --> 00:01:28.079
this uses a render prop.

00:01:28.079 --> 00:01:33.105
So what Context.Consumer is going to do is

00:01:33.105 --> 00:01:38.534
it's going to invoke this function that we're passing it as a Child,

00:01:38.534 --> 00:01:41.925
and pass it these specific value.

00:01:41.924 --> 00:01:46.003
So what that means is we are going to receive the name,

00:01:46.004 --> 00:01:49.890
and then now, we can just render this as normal.

00:01:49.890 --> 00:01:55.515
So you'll notice what's going on here is without having to pass our name to Parent,

00:01:55.515 --> 00:01:57.060
which then passes it to Child,

00:01:57.060 --> 00:02:02.990
which then passes it to Grandchild because we use React Context anywhere,

00:02:02.989 --> 00:02:04.458
where we want to use,

00:02:04.459 --> 00:02:08.780
or we want to get access to this specific name variable,

00:02:08.780 --> 00:02:11.224
we just use Context.Consumer,

00:02:11.224 --> 00:02:13.504
passing it this function.

00:02:13.504 --> 00:02:15.905
So again, the two steps you need to take,

00:02:15.905 --> 00:02:18.455
our first, render Contexts.Provider,

00:02:18.455 --> 00:02:24.890
passing it a value of whatever value you want to grab later on in the Child components,

00:02:24.889 --> 00:02:28.634
and then whenever you want to grab that value in this case, our name,

00:02:28.634 --> 00:02:31.239
all we do is we say Context.Consumer,

00:02:31.240 --> 00:02:33.010
pass it a function,

00:02:33.009 --> 00:02:36.234
and what React is going to do is it's going to invoke that function

00:02:36.235 --> 00:02:39.835
giving it whatever the value was in this case it was our name,

00:02:39.835 --> 00:02:44.140
and then we can go ahead and render some UI with that name.

00:02:44.139 --> 00:02:47.409
So now that we've seen how context works,

00:02:47.409 --> 00:02:50.079
what we're going to do is we're going to use it in

00:02:50.080 --> 00:02:53.560
our abstraction that we're creating over React and Redux in order

00:02:53.560 --> 00:02:58.449
to get our redux store as well as any data that the components need down to

00:02:58.449 --> 00:03:04.239
those components without having to pass our store all the way down the component tree.

