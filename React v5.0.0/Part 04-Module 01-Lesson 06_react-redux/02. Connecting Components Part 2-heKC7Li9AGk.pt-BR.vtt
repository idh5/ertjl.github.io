WEBVTT
Kind: captions
Language: pt-BR

00:00:00.067 --> 00:00:04.567
Agora que vamos abstrair
a conexão dos componentes

00:00:04.600 --> 00:00:05.800
com a Context

00:00:05.833 --> 00:00:08.700
usando este componente Connect
de ordem superior,

00:00:08.733 --> 00:00:12.667
precisamos construir isto.

00:00:12.700 --> 00:00:15.400
Começamos criando uma função

00:00:16.600 --> 00:00:18.100
chamada "connect".

00:00:18.133 --> 00:00:21.700
Uma das coisas que sabemos
sobre a connect

00:00:21.733 --> 00:00:24.167
é que ela precisa retornar
uma função

00:00:24.967 --> 00:00:27.133
e, quando a função return
for invocada,

00:00:27.167 --> 00:00:30.133
ela passará o componente
que precisamos renderizar.

00:00:30.166 --> 00:00:33.967
Podemos vir aqui
e retornar uma função,

00:00:35.033 --> 00:00:38.900
que receberá um componente.

00:00:40.200 --> 00:00:42.167
Outra coisa que sabemos
sobre a connect

00:00:42.200 --> 00:00:46.167
é que,
como primeiro argumento,

00:00:46.200 --> 00:00:49.833
ela passará uma função que,
quando invocada,

00:00:49.867 --> 00:00:51.333
recebe o estado,

00:00:51.366 --> 00:00:54.033
e isso retornará
os dados específicos

00:00:54.067 --> 00:00:55.667
dos quais
o componente precisa.

00:00:55.700 --> 00:00:58.600
Chamaremos isso
de "mapStateToProps".

00:00:59.233 --> 00:01:01.267
Precisamos nos lembrar
de três coisas

00:01:01.300 --> 00:01:02.733
na construção da connect:

00:01:02.767 --> 00:01:05.133
a primeira é que,
na implementação,

00:01:05.167 --> 00:01:06.933
precisaremos usar
store.subscribe,

00:01:06.967 --> 00:01:09.033
para estarmos conscientes
da atualização

00:01:09.067 --> 00:01:11.267
sempre que a Store
for alterada.

00:01:11.300 --> 00:01:12.700
A segunda coisa

00:01:12.733 --> 00:01:16.167
é saber qual é o estado necessário
para o componente renderizado,

00:01:16.200 --> 00:01:19.800
e, para isso, invocamos
a função mapStateToProps.

00:01:19.833 --> 00:01:21.367
A terceira coisa

00:01:21.400 --> 00:01:23.733
será se conectar com Context

00:01:23.767 --> 00:01:26.867
para obtermos a Store
da Context.

00:01:26.900 --> 00:01:31.067
Primeiro vejamos
como nos conectar com Context.

00:01:31.100 --> 00:01:32.633
Aqui,

00:01:32.667 --> 00:01:36.300
vamos criar uma classe
dentro deste componente.

00:01:36.333 --> 00:01:40.367
Nós chamaremos isto
de "ConnectedComponent",

00:01:40.400 --> 00:01:43.333
que estenderá
o React.Component.

00:01:43.367 --> 00:01:46.800
Já vimos este padrão
quando conectamos os componentes

00:01:46.833 --> 00:01:48.233
à Context.

00:01:48.267 --> 00:01:51.433
Criamos um ConnectedComponent
e renderizamos

00:01:51.467 --> 00:01:53.100
o componente individual,

00:01:53.133 --> 00:01:55.633
que precisava dos dados
da Context.

00:01:55.666 --> 00:01:57.000
Aqui,

00:01:57.033 --> 00:01:59.167
temos um método render.

00:02:01.067 --> 00:02:03.167
Agora obteremos...

00:02:04.200 --> 00:02:05.500
a Store de Context,

00:02:05.533 --> 00:02:07.633
e podemos
usar Context.Consumer.

00:02:08.700 --> 00:02:11.633
Agora temos acesso à Store.

00:02:12.800 --> 00:02:17.900
No Provider, grudamos a Store
à Context

00:02:17.933 --> 00:02:19.900
usando a propriedade value.

00:02:19.933 --> 00:02:21.667
Agora, aqui,

00:02:21.700 --> 00:02:23.500
podemos renderizar
outro componente

00:02:23.533 --> 00:02:25.067
passando a Store.

00:02:25.100 --> 00:02:29.967
Chamaremos este componente
de "componente Receiver".

00:02:30.000 --> 00:02:32.333
Vamos fazer
esse componente aqui,

00:02:32.367 --> 00:02:34.433
digitando class Receiver,

00:02:34.467 --> 00:02:37.467
que estenderá
React.Component.

00:02:40.300 --> 00:02:43.933
Pelo que o componente Receiver
será responsável?

00:02:43.967 --> 00:02:47.633
Primeiro ele deverá usar subscribe
para estar consciente

00:02:47.667 --> 00:02:49.300
das alterações da Store.

00:02:49.333 --> 00:02:54.033
E precisamos descobrir quais dados
são necessários ao componente,

00:02:54.067 --> 00:02:56.933
e precisamos renderizar o componente
passando os dados.

00:02:56.967 --> 00:03:01.133
Primeiro vejamos
como podemos nos inscrever.

00:03:01.166 --> 00:03:03.500
Digitaremos componentDidMount,

00:03:03.533 --> 00:03:06.833
e, quando o componente subir,
pegaremos subscribe,

00:03:06.867 --> 00:03:09.233
que virá
de this.props.store,

00:03:09.267 --> 00:03:12.067
porque é o que passamos
aqui embaixo.

00:03:13.000 --> 00:03:15.500
Assim como fizemos antes,

00:03:15.533 --> 00:03:19.267
podemos invocar subscribe

00:03:19.967 --> 00:03:22.300
passando uma função.

00:03:22.333 --> 00:03:26.433
O que faremos quando a Store
for alterada?

00:03:26.467 --> 00:03:29.700
Chamaremos this.forceUpdate.

00:03:30.567 --> 00:03:33.833
Agora garantimos que,
quando o componente descer -

00:03:33.866 --> 00:03:36.867
e diremos
"componentWillUnmount" -,

00:03:36.900 --> 00:03:39.533
chamaremos this.unsubscribe,

00:03:39.566 --> 00:03:42.433
que cancelará a inscrição
do listener,

00:03:42.467 --> 00:03:46.000
e não chamaremos mais
forceUpdate.

00:03:46.033 --> 00:03:49.033
Resolvemos o primeiro problema
de obter o receiver

00:03:49.067 --> 00:03:51.200
e fazer com que ele
observe as alterações

00:03:51.233 --> 00:03:52.933
e renderize sempre,

00:03:52.967 --> 00:03:56.267
mas precisamos descobrir
o que será renderizado.

00:03:56.300 --> 00:04:01.900
Nós renderizaremos
o componente que foi passado,

00:04:01.933 --> 00:04:03.600
que é este
componente aqui,

00:04:03.633 --> 00:04:05.733
mas quais dados
devemos fornecer?

00:04:05.767 --> 00:04:09.567
Podemos resolver isso
invocando mapStateToProps,

00:04:09.600 --> 00:04:14.200
que será esta função,

00:04:14.233 --> 00:04:15.900
passando o estado,

00:04:15.933 --> 00:04:18.800
e isso nos fornecerá
um objeto,

00:04:18.833 --> 00:04:20.933
e cada propriedade do objeto

00:04:20.966 --> 00:04:23.733
representará o estado
necessário para o componente.

00:04:23.767 --> 00:04:26.233
Então, aqui,

00:04:26.266 --> 00:04:31.833
usaremos a estruturação
e pegaremos dispatch e getState,

00:04:31.867 --> 00:04:34.467
que vem de this.props.store.

00:04:34.500 --> 00:04:39.733
Depois, obtemos o estado
invocando o método getState.

00:04:39.766 --> 00:04:43.333
Agora, para saber
qual estado é necessário,

00:04:43.366 --> 00:04:49.033
precisamos invocar mapStateToProps,
como já foi dito, passando o estado.

00:04:49.067 --> 00:04:51.400
Agora stateNeeded
será um objeto,

00:04:51.433 --> 00:04:54.200
sendo que cada item
ou propriedade dele

00:04:54.233 --> 00:04:56.967
será uma propriedade
necessária a este componente.

00:04:57.000 --> 00:05:01.867
Podemos espalhar
stateNeeded.

00:05:01.900 --> 00:05:04.367
Se você se lembra
do que eu disse

00:05:04.400 --> 00:05:07.667
quando construímos
o componente Connected,

00:05:07.700 --> 00:05:11.100
eu disse que sempre
que conectamos um componente

00:05:11.133 --> 00:05:14.733
também passamos dispatch
como propriedade ao componente

00:05:14.767 --> 00:05:17.767
para podermos disparar
dentro do componente.

00:05:17.800 --> 00:05:19.600
Aqui,

00:05:19.633 --> 00:05:22.033
espalhamos stateNeeded

00:05:22.067 --> 00:05:23.367
e diremos "dispatch",

00:05:23.400 --> 00:05:26.367
que será a dispatch

00:05:26.400 --> 00:05:28.900
diretamente da Store.

00:05:28.933 --> 00:05:32.433
Só falta uma coisa simples
a ser feita.

00:05:32.467 --> 00:05:37.167
Sempre que invocamos connect,
como fizemos aqui,

00:05:37.200 --> 00:05:40.933
esperamos que isso retorne
um novo componente,

00:05:40.967 --> 00:05:44.467
que será renderizado pelo React,
como está aqui.

00:05:44.500 --> 00:05:47.300
Agora, de dentro do Connect,

00:05:47.967 --> 00:05:51.333
queremos retornar

00:05:52.067 --> 00:05:54.100
o componente Connected,

00:05:54.133 --> 00:05:56.067
que conecta duas Contexts

00:05:56.100 --> 00:05:59.133
e renderiza
o componente Receiver.

00:05:59.166 --> 00:06:01.500
Se retornarmos
ao aplicativo,

00:06:01.533 --> 00:06:04.067
tudo funcionará
exatamente igual,

00:06:04.100 --> 00:06:06.900
mas, em vez de colocarmos
a Store na Context,

00:06:06.933 --> 00:06:09.967
em vez de obtermos
essa informação nós mesmos,

00:06:10.000 --> 00:06:13.500
nós criamos
uma biblioteca auxiliar

00:06:13.533 --> 00:06:16.300
com o componente Connected
de ordem superior

00:06:16.333 --> 00:06:19.133
e com o componente Provider.

00:06:19.166 --> 00:06:22.100
Agora, sempre que desejarmos
colocar algo na Context

00:06:22.133 --> 00:06:24.767
ou obter algo da Context,

00:06:24.800 --> 00:06:26.767
em vez de fazermos isso
sozinhos,

00:06:26.800 --> 00:06:30.933
a abstração
realizará isso para nós.

