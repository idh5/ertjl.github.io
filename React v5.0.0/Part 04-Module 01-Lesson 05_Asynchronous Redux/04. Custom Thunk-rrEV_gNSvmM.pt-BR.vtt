WEBVTT
Kind: captions
Language: pt-BR

00:00:00.228 --> 00:00:02.049
Até agora,

00:00:02.091 --> 00:00:05.225
implementamos
pelo aplicativo

00:00:05.267 --> 00:00:08.130
diferentes invocações
da nossa API.

00:00:08.172 --> 00:00:09.509
Isso funcionou,

00:00:09.551 --> 00:00:12.586
pois os dados
residem localmente

00:00:12.628 --> 00:00:16.833
e podem ser modificados
em um banco de dados.

00:00:16.875 --> 00:00:18.874
Mas o problema é que,

00:00:18.916 --> 00:00:22.530
quando começamos
a adicionar este código API,

00:00:22.572 --> 00:00:24.274
toda lógica do componente

00:00:24.316 --> 00:00:26.426
ficou um pouco bagunçada.

00:00:26.468 --> 00:00:29.529
Na verdade,
estamos misturando

00:00:29.571 --> 00:00:31.882
o código de busca de dados

00:00:31.924 --> 00:00:34.169
com a API

00:00:34.211 --> 00:00:36.681
e com o código
da IU componente.

00:00:36.723 --> 00:00:38.522
Isso não é a pior coisa
do mundo,

00:00:38.564 --> 00:00:41.329
mas seria melhor
manter essas coisas separadas,

00:00:41.371 --> 00:00:42.890
assim teríamos

00:00:42.932 --> 00:00:45.770
a lógica de busca de dados
em uma parte do aplicativo,

00:00:45.812 --> 00:00:49.169
e a lógica da IU,
nos componentes.

00:00:49.211 --> 00:00:53.395
O método removeItem,

00:00:53.437 --> 00:00:58.163
antes de adicionarmos
o código API, era assim.

00:00:58.205 --> 00:01:02.818
O removeItem era invocado,
e disparávamos removeTodoAction.

00:01:02.860 --> 00:01:05.435
Este código era bem fácil
de explicar.

00:01:05.477 --> 00:01:07.763
O removeItem era invocado

00:01:07.805 --> 00:01:10.386
removendo um item da Store.

00:01:10.428 --> 00:01:16.027
Mas agora temos mais coisas,
pois estamos lidando com a API.

00:01:16.069 --> 00:01:19.536
E se houvesse uma forma
de tornar os criadores de ação

00:01:19.867 --> 00:01:21.672
um pouco mais poderosos?

00:01:21.714 --> 00:01:23.459
E se pudéssemos encapsular

00:01:23.501 --> 00:01:28.563
a API de lógica de busca de dados
no próprio criador de ação?

00:01:29.212 --> 00:01:32.763
E se, em vez de invocarmos
removeTodoAction,

00:01:32.805 --> 00:01:35.556
criássemos
um novo criador de ação?

00:01:36.195 --> 00:01:38.627
Chamaremos isso
de "this.props.store.dispatch".

00:01:38.669 --> 00:01:40.659
Chamaremos
este criador de ação

00:01:40.701 --> 00:01:43.860
de "handleDeleteTodo"
passando todo.

00:01:43.902 --> 00:01:48.587
E se pegássemos toda
esta lógica, recortássemos

00:01:48.629 --> 00:01:52.043
e colocássemos dentro
do criador de ação handleDeleteTodo?

00:01:52.085 --> 00:01:54.955
Agora o código voltou a ser
como antes,

00:01:54.997 --> 00:01:57.547
no qual disparávamos
uma única ação.

00:01:57.589 --> 00:01:58.987
Isso parece bom,

00:01:59.029 --> 00:02:01.363
mas precisamos fazer
funcionar.

00:02:01.405 --> 00:02:05.068
Vamos voltar
até os criadores de ação

00:02:06.395 --> 00:02:08.659
para criar um novo,

00:02:09.835 --> 00:02:12.258
que chamaremos
de "handleDeleteTodo".

00:02:12.300 --> 00:02:14.915
Ele pegará um item todo.

00:02:14.957 --> 00:02:19.663
Antes, o criador de ação
retornava um objeto,

00:02:19.705 --> 00:02:23.649
que descrevia o evento específico
que estava ocorrendo.

00:02:23.691 --> 00:02:26.427
Mas se observamos a lógica

00:02:26.469 --> 00:02:29.769
que este criador de ação
precisa realizar agora...

00:02:29.811 --> 00:02:31.946
Ele dispara,

00:02:31.988 --> 00:02:34.821
faz uma solicitação API
e dispara novamente

00:02:34.863 --> 00:02:36.141
se for necessário.

00:02:36.183 --> 00:02:40.829
Precisamos de uma forma
de acessar dispatch.

00:02:40.871 --> 00:02:44.309
E se houvesse
uma forma aqui...

00:02:46.262 --> 00:02:50.036
Já vimos este padrão antes,
especificamente no middleware.

00:02:50.884 --> 00:02:56.866
E se houvesse uma forma
de, em vez de retornar um objeto,

00:02:56.908 --> 00:02:58.972
retornar uma função

00:02:59.014 --> 00:03:01.859
que pudesse passar dispatch?

00:03:01.901 --> 00:03:05.053
Podemos nos livrar
deste this.props.store

00:03:05.095 --> 00:03:08.032
e disparamos
a ação específica.

00:03:08.074 --> 00:03:09.591
Isso seria demais,

00:03:09.633 --> 00:03:12.560
pois nos possibilitaria fazer
o que fazemos abaixo,

00:03:12.602 --> 00:03:16.103
onde disparamos
a ação única,

00:03:16.145 --> 00:03:17.839
o único criador de ação,

00:03:17.881 --> 00:03:21.792
e ele lida
com toda esta lógica.

00:03:21.834 --> 00:03:24.567
E se criássemos
um middleware personalizado

00:03:24.609 --> 00:03:28.192
para apoiar
este tipo de funcionalidade?

00:03:28.234 --> 00:03:31.792
Para isso,
sempre que uma ação for disparada,

00:03:31.834 --> 00:03:34.223
se a ação for uma função,

00:03:34.265 --> 00:03:36.599
nós a invocaremos
passando dispatch.

00:03:36.641 --> 00:03:38.063
Se não for,

00:03:38.105 --> 00:03:40.473
então despacharemos
como normalmente faríamos.

00:03:40.515 --> 00:03:42.849
Então, dentro...

00:03:42.891 --> 00:03:44.784
ou aqui,
no nosso middleware...

00:03:44.826 --> 00:03:46.659
Estou falando de algo assim.

00:03:46.701 --> 00:03:49.924
Chamaremos isto de "thunk",
porque tecnicamente é o que ele é.

00:03:49.966 --> 00:03:52.357
Temos nosso
padrão esquisito aqui,

00:03:53.365 --> 00:03:54.916
que pega uma Store,

00:03:56.135 --> 00:03:58.308
next e uma ação.

00:03:59.300 --> 00:04:01.577
Então, aqui dentro,

00:04:01.619 --> 00:04:04.083
digitaremos que se a ação

00:04:06.155 --> 00:04:07.747
for uma função -

00:04:07.789 --> 00:04:09.114
que é o caso aqui -

00:04:09.156 --> 00:04:13.155
quando fizermos algo assim,

00:04:13.197 --> 00:04:16.723
em vez de retornar um objeto
como a ação,

00:04:16.765 --> 00:04:19.364
retornaremos uma função
como a ação.

00:04:20.156 --> 00:04:23.402
Quando a ação
for uma função,

00:04:23.444 --> 00:04:26.778
invocaremos a ação

00:04:26.820 --> 00:04:29.420
passando store.dispatch.

00:04:29.462 --> 00:04:33.792
Caso contrário, invocaremos next
passando a ação.

00:04:33.834 --> 00:04:36.178
Agora que temos
este novo middleware,

00:04:36.842 --> 00:04:39.100
precisamos informar o Redux
sobre ele.

00:04:39.142 --> 00:04:43.668
Podemos adicioná-lo
como primeiro middleware da cadeia.

00:04:43.710 --> 00:04:45.629
Agora,

00:04:45.671 --> 00:04:48.810
quando nós...

00:04:50.074 --> 00:04:51.810
removemos o item todo,

00:04:51.852 --> 00:04:54.619
disparamos handleDeleteTodo,

00:04:54.661 --> 00:04:58.451
e isso encapsulará
toda a funcionalidade dele,

00:04:58.493 --> 00:05:01.761
assim não misturamos mais
a lógica de busca de dados

00:05:01.803 --> 00:05:03.970
com a lógica da IU.

00:05:04.012 --> 00:05:06.099
Se recarregarmos

00:05:06.141 --> 00:05:08.198
e apagarmos um item todo,

00:05:08.240 --> 00:05:09.947
tudo funcionará normalmente,

00:05:09.989 --> 00:05:13.419
mas, em vez de a lógica
estar dentro do componente,

00:05:13.461 --> 00:05:16.451
ela estará dentro
de um criador de ação.

00:05:16.493 --> 00:05:18.660
Na verdade, este padrão
é tão comum

00:05:18.702 --> 00:05:23.726
que é uma biblioteca
que podemos incluir na tag script.

00:05:23.768 --> 00:05:25.320
Ela se chama "Redux-thunk".

00:05:25.362 --> 00:05:29.415
Agora, em vez de utilizar
nosso middleware thunk,

00:05:29.457 --> 00:05:31.590
podemos apagar isto

00:05:31.632 --> 00:05:35.618
e usar, como primeiro argumento,
em vez do nosso thunk,

00:05:36.402 --> 00:05:40.168
o "ReduxThunk.deafult",

00:05:40.210 --> 00:05:43.313
porque incluímos
o script ReduxThunk.

00:05:43.355 --> 00:05:45.952
Agora tudo funcionará
exatamente igual,

00:05:45.994 --> 00:05:48.522
mas, em vez de usar
o nosso thunk,

00:05:49.881 --> 00:05:53.148
incluímos
o pacote ReduxThunk oficial.

