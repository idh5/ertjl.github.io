WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.560
And now, what we need to do is,

00:00:01.560 --> 00:00:05.849
we need to actually tell our Redux store about this data.

00:00:05.849 --> 00:00:08.849
Well, right now, we don't have any actions

00:00:08.849 --> 00:00:12.689
that handle adding multiple todos as well as multiple goals.

00:00:12.689 --> 00:00:17.280
If you remember back to our action creators up here,

00:00:17.280 --> 00:00:20.265
we have an ADD_GOAL item,

00:00:20.265 --> 00:00:25.890
we also have an addTodoAction, action creator.

00:00:25.890 --> 00:00:27.885
So, I guess what we could do is, we could loop

00:00:27.885 --> 00:00:29.640
over all of our goals and all of our actions.

00:00:29.640 --> 00:00:32.880
But then we will be dispatching a lot of actions.

00:00:32.880 --> 00:00:34.470
So, what we'll do instead is,

00:00:34.469 --> 00:00:38.024
what if we made a brand new action creator.

00:00:38.024 --> 00:00:41.984
Lets call it receiveDataAction.

00:00:41.984 --> 00:00:44.759
So, this is going to take in the todos,

00:00:44.759 --> 00:00:46.948
as well as the goals,

00:00:46.948 --> 00:00:52.634
and the action itself is going to be of type RECEIVE_DATA,

00:00:52.634 --> 00:00:54.044
which will have to build here in a second,

00:00:54.045 --> 00:00:59.439
and then we will just parse along the todos as well as the goals.

00:01:00.229 --> 00:01:04.289
Let's make sure we spell RECEIVE_DATA right.

00:01:04.290 --> 00:01:11.199
And then now, we will add a brand new constant up here, called RECEIVE_DATA.

00:01:12.950 --> 00:01:16.260
And now the question is, how do we want to change the state of

00:01:16.260 --> 00:01:19.481
our store based on the specific action?

00:01:19.481 --> 00:01:24.533
Well, in regards to our todos portion of our state,

00:01:24.534 --> 00:01:26.430
what we want to do is,

00:01:26.430 --> 00:01:29.250
whenever the RECEIVE_DATA action is dispatched,

00:01:29.250 --> 00:01:35.655
we want to come in here and just return action.todos because at this point,

00:01:35.655 --> 00:01:39.397
the todos array is just going to be an empty array.

00:01:39.397 --> 00:01:40.829
And instead of an empty array,

00:01:40.829 --> 00:01:42.329
we want to just return action.todos,

00:01:42.329 --> 00:01:46.620
which will be kind of the default todos for our application.

00:01:46.620 --> 00:01:50.219
And we want to do something similar with our goals.

00:01:50.219 --> 00:01:53.750
So when RECEIVE_DATA is dispatched,

00:01:53.750 --> 00:01:57.859
we just want to return action.goals.

00:01:57.859 --> 00:02:00.965
So this really shows how you can have a single action type,

00:02:00.965 --> 00:02:03.325
which is affecting multiple parts of your store.

00:02:03.325 --> 00:02:05.359
Because what's happening here is,

00:02:05.359 --> 00:02:07.775
when RECEIVE_DATA is dispatched,

00:02:07.775 --> 00:02:10.895
not only are we updating the todos portion of our state,

00:02:10.895 --> 00:02:14.120
but we are also updating the goals portion of our state.

00:02:14.120 --> 00:02:20.509
And so now what we need to do is back down inside of our App component here.

00:02:20.509 --> 00:02:22.919
Instead of just logging these,

00:02:22.919 --> 00:02:25.764
what we want to do is call store,

00:02:25.764 --> 00:02:29.349
which we're getting right here from props.dispatch,

00:02:29.349 --> 00:02:32.109
and what we want to dispatch is

00:02:32.110 --> 00:02:35.218
the brand new RECEIVE_DATA action creator that we made

00:02:35.217 --> 00:02:38.873
parsing it through todos as well as the goals.

00:02:38.873 --> 00:02:43.591
So now what should happen if we hit refresh here?

00:02:43.591 --> 00:02:45.504
You'll notice for about two seconds,

00:02:45.503 --> 00:02:46.884
we don't have anything,

00:02:46.884 --> 00:02:48.629
and then once the data loads,

00:02:48.629 --> 00:02:51.599
we get all of our initial Todo List here,

00:02:51.599 --> 00:02:54.139
as well as our initial Goals.

