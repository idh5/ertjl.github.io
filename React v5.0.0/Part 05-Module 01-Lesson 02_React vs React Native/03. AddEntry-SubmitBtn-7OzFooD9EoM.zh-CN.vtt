WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.580
接着我们将为底部的提交按钮构建组件

00:00:05.580 --> 00:00:07.830
首先

00:00:07.830 --> 00:00:12.195
向 AddEntry 组件添加一个方法

00:00:12.195 --> 00:00:15.030
称其为 submit

00:00:15.029 --> 00:00:17.170
首先

00:00:17.170 --> 00:00:21.125
它将获取这一天的键

00:00:21.125 --> 00:00:23.835
在 helpers 中

00:00:23.835 --> 00:00:27.089
有一个这样的函数

00:00:27.089 --> 00:00:28.484
它将返回一个

00:00:28.484 --> 00:00:33.435
设定格式的日期

00:00:33.435 --> 00:00:37.469
我们将使用这个具有格式的日期作为特定日期的键

00:00:37.469 --> 00:00:38.969
这么做的原因是

00:00:38.969 --> 00:00:41.144
我们将使用的 calendar 组件

00:00:41.145 --> 00:00:45.655
需要这种格式的日期 因此将这么设定

00:00:45.655 --> 00:00:49.289
我们首先将

00:00:49.289 --> 00:00:55.637
导入刚刚提到的 timeToString 方法

00:00:55.637 --> 00:00:58.304
然后在 submit 中

00:00:58.304 --> 00:00:59.369
我们将

00:00:59.369 --> 00:01:01.515
创建一个 key 变量

00:01:01.515 --> 00:01:07.135
它将为调用 timeToString 后返回的内容

00:01:07.135 --> 00:01:10.950
我们创建一个 entry 它将是一个起始状态

00:01:10.950 --> 00:01:16.754
并从 state 中获取所有内容 也就是这里的指标

00:01:16.754 --> 00:01:20.939
然后我们将在此函数中进行几项设置

00:01:20.939 --> 00:01:22.649
但是现在不会进行所有设置

00:01:22.650 --> 00:01:25.290
所以添加一些注释

00:01:25.290 --> 00:01:28.555
我们想要最终更新下 Redux

00:01:28.555 --> 00:01:32.730
我们还想在添加导航功能后导航到主屏幕上

00:01:32.730 --> 00:01:38.040
我们想要将这些信息保存到数据库中

00:01:38.040 --> 00:01:41.310
我们将清空本地通知

00:01:41.310 --> 00:01:45.424
使用户不会收到关于提交当天信息的通知

00:01:45.424 --> 00:01:50.897
但是现在我们能做的是重置状态

00:01:50.897 --> 00:01:54.450
将所有这一切重置为 0

00:01:54.450 --> 00:01:59.189
直接复制这些代码并粘贴到这里

00:01:59.189 --> 00:02:02.564
现在 每当我们运行 submit 时

00:02:02.564 --> 00:02:04.530
所发生的情况是

00:02:04.530 --> 00:02:06.924
获取 key 暂时不会用到该 key

00:02:06.924 --> 00:02:10.219
我们还将获取所有这些状态 暂时也不会用到

00:02:10.219 --> 00:02:12.710
然后重置本地状态

00:02:12.710 --> 00:02:14.040
现在

00:02:14.039 --> 00:02:16.139
转到这里

00:02:16.139 --> 00:02:19.699
创建提交按钮

00:02:19.699 --> 00:02:23.024
传入 onPress 方法

00:02:23.025 --> 00:02:24.539
该按钮的 UI 将是

00:02:24.539 --> 00:02:28.169
可触摸组件

00:02:28.169 --> 00:02:29.909
你可以使用几种不同的组件

00:02:29.909 --> 00:02:31.599
我喜欢使用 TouchableOpacity

00:02:31.599 --> 00:02:34.379
然后获取 Text

00:02:34.379 --> 00:02:37.514
输入 TouchableOpacity

00:02:37.514 --> 00:02:41.969
当该组件被点击时

00:02:41.969 --> 00:02:44.975
注意不是 onClick 因为我们位于 React Native 中

00:02:44.975 --> 00:02:48.259
可能需要一段时间才能适应这种区别

00:02:48.259 --> 00:02:50.359
每当该组件被点击时

00:02:50.360 --> 00:02:52.665
运行传入的 onPress 函数

00:02:52.664 --> 00:02:54.674
设定文本

00:02:54.675 --> 00:02:57.719
输入 SUBMIT

00:02:57.719 --> 00:03:01.215
然后滚动到下面

00:03:01.215 --> 00:03:05.439
在渲染方法中的 key 对象下面

00:03:05.439 --> 00:03:07.710
渲染我们的提交按钮

00:03:07.710 --> 00:03:15.145
传入在这里创建的 submit 方法

00:03:15.145 --> 00:03:16.170
测试下

00:03:16.169 --> 00:03:19.169
将 bike 改为 10

00:03:19.169 --> 00:03:21.089
将 eat 改为 5

00:03:21.090 --> 00:03:23.520
在 render 方法中

00:03:23.520 --> 00:03:27.344
渲染 JSON.stringify

00:03:27.344 --> 00:03:31.840
以便看到状态

00:03:31.840 --> 00:03:35.670
现在如果一切正常的话 看起来正常

00:03:35.669 --> 00:03:39.074
这是我们的状态 点击提交 会发生什么？

00:03:39.074 --> 00:03:42.674
重置为 0 了

00:03:42.675 --> 00:03:43.968
在继续之前

00:03:43.967 --> 00:03:46.179
删掉这行内容

00:03:46.180 --> 00:03:53.000
并将状态改成应该处于的状态 也就是全为 0

