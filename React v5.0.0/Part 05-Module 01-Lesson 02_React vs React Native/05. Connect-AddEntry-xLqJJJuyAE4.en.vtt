WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.044
Now that we have our actions, our reducer,

00:00:03.044 --> 00:00:07.384
and we've hooked up redux inter app using provider and create store,

00:00:07.384 --> 00:00:09.140
the next thing we want to do is,

00:00:09.140 --> 00:00:12.800
actually go ahead and connect our addEntry component.

00:00:12.800 --> 00:00:16.460
So that way, we can add some functionality right here,

00:00:16.460 --> 00:00:18.245
when we submit a new entry.

00:00:18.245 --> 00:00:21.295
And then, we can also add some redux functionality right here,

00:00:21.295 --> 00:00:24.429
when we reset the specific day.

00:00:24.429 --> 00:00:28.309
So what we'll do is let's go ahead and import a few things.

00:00:28.309 --> 00:00:31.744
We will import connect which is coming from react-redux.

00:00:31.745 --> 00:00:36.634
And then, we are also going to import our addEntry action creator,

00:00:36.634 --> 00:00:40.844
which is coming from our actions file.

00:00:40.844 --> 00:00:45.784
So now, what we can do is instead of exporting the component,

00:00:45.784 --> 00:00:47.224
what we want to do,

00:00:47.225 --> 00:00:51.560
is we want to export the invocation of connect.

00:00:51.560 --> 00:00:53.105
And then the result of that,

00:00:53.104 --> 00:00:55.774
we will pass addEntry.

00:00:55.774 --> 00:00:59.729
So now, AddEntry is going to have access to dispatch.

00:00:59.729 --> 00:01:02.539
So what we can do is inside of our submit,

00:01:02.539 --> 00:01:04.286
where it says update redux,

00:01:04.286 --> 00:01:08.030
what we're going to do is we'll say, this.props.dispatch.

00:01:08.030 --> 00:01:13.754
And what we want to dispatch is what we just barely imported, which was AddEntry.

00:01:13.754 --> 00:01:19.159
And if you remember what AddEntry accepts is it accepts a new entry.

00:01:19.159 --> 00:01:21.329
And it's right here, it accepts a new entry.

00:01:21.329 --> 00:01:24.140
And then eventually, what's going to happen is

00:01:24.140 --> 00:01:27.340
that entry is going to be added to our state.

00:01:27.340 --> 00:01:31.219
So we want to format it like this or we have the key,

00:01:31.219 --> 00:01:34.789
which is the return value of timeToString.

00:01:34.790 --> 00:01:37.160
And then the value is going to be entry,

00:01:37.159 --> 00:01:38.704
which is really just our state,

00:01:38.704 --> 00:01:41.564
which has all of these properties on it.

00:01:41.564 --> 00:01:43.219
So now whenever we hit submit,

00:01:43.219 --> 00:01:48.109
not only are we resetting our state and we are updating our database,

00:01:48.109 --> 00:01:51.905
we're also dispatching our addEntry action creator,

00:01:51.905 --> 00:01:56.564
which is saving the specific entry to our redux store.

00:01:56.564 --> 00:02:00.230
Now, we can do something really similar down here.

00:02:00.230 --> 00:02:03.965
So this reset function is going to

00:02:03.965 --> 00:02:09.159
be ran whenever we click on this reset button right here.

00:02:09.159 --> 00:02:10.370
So what we want to do,

00:02:10.370 --> 00:02:14.164
just as we did before, we'll say, this.props.dispatch,

00:02:14.164 --> 00:02:20.014
what we want to dispatch is addEntry is going to be the exact same.

00:02:20.014 --> 00:02:24.109
But now, instead of being the specific entry,

00:02:24.110 --> 00:02:27.200
we kind of just want to reset it to what it initially was.

00:02:27.199 --> 00:02:31.155
So if we look at our app These are the exact same screens.

00:02:31.155 --> 00:02:34.705
Notice over here, this is the current day, August 30.

00:02:34.705 --> 00:02:37.760
We're saying don't forget to log your data today.

00:02:37.759 --> 00:02:41.870
And this is different than say August 2,

00:02:41.870 --> 00:02:45.140
which is just a day that you didn't log any information.

00:02:45.139 --> 00:02:46.729
So inside of our redux store,

00:02:46.729 --> 00:02:49.489
we really have three different values.

00:02:49.490 --> 00:02:52.129
We have the value right here, which is an object,

00:02:52.129 --> 00:02:53.734
which has a run, bike, swim,

00:02:53.735 --> 00:02:55.580
eat, and sleep property on it.

00:02:55.580 --> 00:02:58.865
And the values of those properties are just 30, 65,

00:02:58.865 --> 00:03:03.300
5153, basically whatever the values of the specific metric is.

00:03:03.300 --> 00:03:05.969
We have this right here,

00:03:05.969 --> 00:03:08.000
the key is going to be August 2,

00:03:08.000 --> 00:03:11.025
2017 and the value is going to be null.

00:03:11.025 --> 00:03:12.710
And then over here,

00:03:12.710 --> 00:03:15.675
notice that we haven't logged any information but it's today.

00:03:15.675 --> 00:03:18.335
We don't just want to say you didn't log any data on this day,

00:03:18.335 --> 00:03:20.885
we actually want to say, hey don't forget to log your data.

00:03:20.884 --> 00:03:26.939
So what we're going to do here is inside of our helper's file,

00:03:26.939 --> 00:03:29.719
let's create a brand new function.

00:03:29.719 --> 00:03:31.400
We're going to call it,

00:03:31.400 --> 00:03:34.550
getDailyReminderValue and what it's going to

00:03:34.550 --> 00:03:37.939
do is it's going to return us an object which has a day property.

00:03:37.939 --> 00:03:41.405
And the value is going to be, we'll say,

00:03:41.405 --> 00:03:44.150
wave and then we will say,

00:03:44.150 --> 00:03:47.175
don't forget to log your data today.

00:03:47.175 --> 00:03:53.165
And so now, what we can do is whenever we want to reset the value for the specific day,

00:03:53.164 --> 00:03:56.780
we can just call this function and we will get this object back.

00:03:56.780 --> 00:03:58.305
So inside of AddEntry,

00:03:58.305 --> 00:04:00.469
let's go ahead and import this.

00:04:00.469 --> 00:04:04.889
It's coming from utils, helpers.

00:04:04.889 --> 00:04:07.224
Looks like we already have the import up here so we can

00:04:07.224 --> 00:04:10.134
add getDailyReminderValue to that.

00:04:10.134 --> 00:04:12.739
And then now what we want to do is, again,

00:04:12.740 --> 00:04:18.350
instead of resetting this to the entry as we're doing when we submit it,

00:04:18.350 --> 00:04:23.555
when we reset it what we want to do is we'll invoke, getDailyReminderValue.

00:04:23.555 --> 00:04:26.435
So again, that way, whenever a reset runs,

00:04:26.435 --> 00:04:30.500
we want to reset the value of this property

00:04:30.500 --> 00:04:34.790
on our state to be the default value for this specific day,

00:04:34.790 --> 00:04:38.705
which is going to say, hey don't forget to log your information for today.

00:04:38.704 --> 00:04:41.990
Now the last thing we need to do here is if you'll remember,

00:04:41.990 --> 00:04:45.290
we have this section right here which is basically saying, hey,

00:04:45.290 --> 00:04:48.245
if you've already logged your information for the day,

00:04:48.245 --> 00:04:52.740
show this for you instead of letting them re-log their information.

00:04:52.740 --> 00:04:55.310
So what we can do is,

00:04:55.310 --> 00:04:57.165
let's create a function down here,

00:04:57.165 --> 00:05:02.850
we'll call it mapStateToProps and this is going to receive these states.

00:05:02.850 --> 00:05:06.725
We can create a brand new key by doing timeToString again, as we've done.

00:05:06.725 --> 00:05:08.960
And then, in order for us to know if

00:05:08.959 --> 00:05:11.779
the user has already logged their information or not,

00:05:11.779 --> 00:05:19.789
if state[key] which is the key for today is a thing and type

00:05:19.790 --> 00:05:24.970
of state[key].today equals undefined

00:05:24.970 --> 00:05:27.980
and that means they have already logged their information.

00:05:27.980 --> 00:05:30.694
So again, if state[key] is a thing,

00:05:30.694 --> 00:05:32.129
meaning it's not null,

00:05:32.129 --> 00:05:39.949
and state[key].today is undefined and the reason we have this line right here is because,

00:05:39.949 --> 00:05:41.029
going back to this,

00:05:41.029 --> 00:05:44.679
this section down here is going to be an object with all these properties.

00:05:44.680 --> 00:05:46.329
This section is going to be null.

00:05:46.329 --> 00:05:52.185
But this section is going to have a today property just as we're doing right here.

00:05:52.185 --> 00:05:58.790
So we're saying, if the value at a specific date in our redux store has a today property,

00:05:58.790 --> 00:06:02.060
then that means they haven't already logged their information.

00:06:02.060 --> 00:06:05.964
So then, this.props.alreadyLogged will be false.

00:06:05.964 --> 00:06:08.349
Let me go ahead and fix this formatting.

00:06:08.350 --> 00:06:15.060
And then, now, we want to pass napStateToProps to our connect function.

00:06:15.060 --> 00:06:16.615
And I just spotted this typo,

00:06:16.615 --> 00:06:18.165
we don't want to export connect,

00:06:18.165 --> 00:06:20.340
we want to export default connect.

00:06:20.339 --> 00:06:23.284
And then now, our app should still be running.

00:06:23.285 --> 00:06:25.450
We can actually just go ahead and test list.

00:06:25.449 --> 00:06:27.439
Let's try to go ahead and submit one of these,

00:06:27.439 --> 00:06:30.805
simplest two, four. So we submit it.

00:06:30.805 --> 00:06:33.415
Notice that we get the screen because

00:06:33.415 --> 00:06:37.785
alreadyLogged was passed to our component as true, right here.

00:06:37.785 --> 00:06:39.515
And then, we should be able to reset this,

00:06:39.514 --> 00:06:42.000
which then takes us back to the screen right here.

