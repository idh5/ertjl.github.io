WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.730
这些就是我们将构建的应用的最终屏幕效果

00:00:03.730 --> 00:00:08.320
这是 iOS 应用 这是 Android 应用 目前看起来这样

00:00:08.320 --> 00:00:09.685
在本视频中

00:00:09.685 --> 00:00:13.030
你会发现这里有个日期

00:00:13.029 --> 00:00:17.109
我们将在应用中使用几种不同的时间

00:00:17.109 --> 00:00:19.839
我们将构建一个组件

00:00:19.839 --> 00:00:23.355
在 components 文件夹中

00:00:23.355 --> 00:00:27.010
新建一个文件 命名为 DateHeader.js

00:00:27.010 --> 00:00:30.925
我们需要导入几项内容

00:00:30.925 --> 00:00:35.475
具体包括 react 和来自 react-native 的 text

00:00:35.475 --> 00:00:38.774
这将是一个无状态函数式组件

00:00:38.774 --> 00:00:42.549
它将接收日期

00:00:42.549 --> 00:00:44.274
而不是文本

00:00:44.274 --> 00:00:52.795
我们将该日期封装在 Text 组件中

00:00:52.795 --> 00:00:55.840
看起来似乎很简单 的确是这样

00:00:55.840 --> 00:00:58.780
最终我们将添加样式

00:00:58.780 --> 00:01:01.245
下节课会介绍样式

00:01:01.244 --> 00:01:05.980
在此之前 转到 AddEntry

00:01:05.980 --> 00:01:09.685
导入刚刚创建的 DateHeader

00:01:09.685 --> 00:01:13.240
现在渲染该组件

00:01:13.239 --> 00:01:17.129
然后开始映射所有信息

00:01:17.129 --> 00:01:18.459
输入 DateHeader

00:01:18.459 --> 00:01:23.379
我们需要传入一个日期

00:01:23.379 --> 00:01:27.519
我们可以在这里新建一个 Date 实例

00:01:27.519 --> 00:01:32.739
然后调用 toLocaleDatestring

00:01:32.739 --> 00:01:36.214
使其变成带格式的字符串

00:01:36.215 --> 00:01:42.000
现在刷新下 可以看到两个应用中都出现了日期

