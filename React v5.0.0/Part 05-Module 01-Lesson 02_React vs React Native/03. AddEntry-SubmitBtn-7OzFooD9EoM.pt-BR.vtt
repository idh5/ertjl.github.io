WEBVTT
Kind: captions
Language: pt-BR

00:00:00.800 --> 00:00:05.533
Em seguida, vamos criar o componente
para os dois botões de enviar.

00:00:05.567 --> 00:00:07.900
O que faremos primeiro
é o seguinte.

00:00:07.933 --> 00:00:12.700
Vamos adicionar um método
ao componente AddEntry,

00:00:12.733 --> 00:00:15.067
e vamos chamá-lo
de "submit".

00:00:15.100 --> 00:00:17.467
E ele fará o seguinte...

00:00:17.500 --> 00:00:21.100
Primeiro, ele precisa pegar
a chave deste dia específico.

00:00:21.133 --> 00:00:23.833
E, se você se lembra,
dentro de helpers,

00:00:23.867 --> 00:00:27.067
temos esta função aqui.

00:00:27.100 --> 00:00:28.667
Basicamente
o que ela vai fazer

00:00:28.700 --> 00:00:33.700
é retornar uma data
depois de ter sido formatada,

00:00:33.733 --> 00:00:37.533
e nós a usaremos
como chave da data específica.

00:00:37.567 --> 00:00:41.333
O motivo para isto é porque
o componente de calendário

00:00:41.367 --> 00:00:43.900
precisa das datas
formatadas assim.

00:00:43.933 --> 00:00:45.600
Então nós fazemos isso.

00:00:45.633 --> 00:00:49.800
Primeiro fazemos
o seguinte...

00:00:49.833 --> 00:00:55.467
Vamos importar o método timeToString
do qual acabamos de falar.

00:00:55.500 --> 00:00:58.290
E dentro de submit

00:00:58.323 --> 00:01:01.733
vamos criar
uma variável de chave

00:01:01.767 --> 00:01:07.467
que será o que for retornado
da chamada de timeToString.

00:01:07.500 --> 00:01:11.033
Vamos criar um entry,
que será this.state,

00:01:11.067 --> 00:01:16.933
ou seja, pegará tudo do estado,
que são todas estas métricas aqui.

00:01:16.967 --> 00:01:20.967
Há algumas coisas
que queremos fazer nesta função.

00:01:21.000 --> 00:01:25.733
Não faremos todas agora,
mas vamos fazer uma anotação.

00:01:25.767 --> 00:01:28.700
Queremos em algum momento
atualizar o Redux,

00:01:28.733 --> 00:01:32.633
queremos ir para a Home
quando adicionarmos uma navegação,

00:01:32.667 --> 00:01:36.667
queremos salvar esta informação
no nosso banco de dados

00:01:36.700 --> 00:01:41.067
e, em algum momento, vamos querer
limpar as notificações locais

00:01:41.100 --> 00:01:43.267
para que o usuário
não receba uma notificação

00:01:43.300 --> 00:01:45.633
para enviar informações
sobre este dia.

00:01:45.667 --> 00:01:51.200
Mas agora vamos redefinir
os estados.

00:01:51.233 --> 00:01:54.567
Vamos redefini-los para 0.

00:01:54.600 --> 00:01:59.367
Vou, na verdade, copiar
e colar isto aqui.

00:01:59.400 --> 00:02:02.667
Agora, sempre
que rodarmos submit,

00:02:02.700 --> 00:02:07.067
vamos pegar a chave
que ainda não estamos usando,

00:02:07.100 --> 00:02:10.467
pegar estes estados
que também não estamos usando

00:02:10.500 --> 00:02:12.633
e redefinir
nosso estado local.

00:02:12.667 --> 00:02:19.800
Agora vamos criar aqui
o botão "Submit".

00:02:19.833 --> 00:02:23.167
Isto vai levar
um método onPress.

00:02:23.200 --> 00:02:28.333
E a IU dele será um componente
sensível ao toque.

00:02:28.367 --> 00:02:32.367
Há alguns que podemos usar,
gosto do TouchableOpacity.

00:02:32.400 --> 00:02:35.000
E também pegamos um texto.

00:02:35.033 --> 00:02:37.867
Escrevemos
"TouchableOpacity"...

00:02:37.900 --> 00:02:42.233
E, quando damos
um onPress no componente...

00:02:42.267 --> 00:02:45.133
Veja que não usamos onClick,
porque estamos no React Native,

00:02:45.166 --> 00:02:48.233
pode levar um tempo
para se acostumar.

00:02:48.267 --> 00:02:50.400
Sempre que este componente
for pressionado,

00:02:50.433 --> 00:02:53.000
vai rodar a função onPress
que estamos passando.

00:02:53.033 --> 00:02:56.533
E, por enquanto
o texto dirá apenas "submit".

00:02:56.567 --> 00:03:00.319
E aqui embaixo,

00:03:00.352 --> 00:03:03.433
dentro do método de renderização

00:03:03.467 --> 00:03:05.767
embaixo deste objeto,
dessa seção chave aqui,

00:03:05.800 --> 00:03:07.933
vamos renderizar
o botão submit.

00:03:07.967 --> 00:03:12.546
Vamos passar o método submit

00:03:12.579 --> 00:03:15.233
que criamos aqui.

00:03:15.267 --> 00:03:19.333
Só para testar,
vamos mudar a bicicleta para 10,

00:03:19.367 --> 00:03:21.433
alimentação para 5...

00:03:21.467 --> 00:03:23.600
E, dentro
do método de renderização,

00:03:23.633 --> 00:03:26.933
vamos renderizar...

00:03:26.967 --> 00:03:32.200
JSON.stringify
para vermos os estados.

00:03:32.233 --> 00:03:35.733
Se tudo estiver funcionando,
ficará assim.

00:03:35.767 --> 00:03:39.400
Aqui está o estado.
Ao clicar em enviar, o que acontece?

00:03:39.433 --> 00:03:42.700
Veja que ele muda para 0.

00:03:42.733 --> 00:03:46.467
Antes de seguirmos em frente,
apagarei isto aqui,

00:03:46.500 --> 00:03:50.533
e mudaremos o estado
para como eles deviam estar,

00:03:50.567 --> 00:03:52.733
ou seja, tudo 0.

