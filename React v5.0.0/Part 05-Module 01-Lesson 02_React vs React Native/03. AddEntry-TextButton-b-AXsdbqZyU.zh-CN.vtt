WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.049
现在 假设用户已经记录了当天的信息

00:00:05.049 --> 00:00:07.719
我们要做的是确保显示这个屏幕消息

00:00:07.719 --> 00:00:09.234
"You already logged your information for today.”

00:00:09.234 --> 00:00:12.519
并使用户能够重置信息

00:00:12.519 --> 00:00:16.609
左边是 iOS 版本 右边是 Android 版本

00:00:16.609 --> 00:00:20.839
首先 在 AddEntry 中

00:00:20.839 --> 00:00:25.179
导入一些内容

00:00:25.179 --> 00:00:28.239
先确保导入 Ionicons

00:00:28.239 --> 00:00:33.464
因为我们将使用该图标组件

00:00:33.465 --> 00:00:41.070
然后在下面的 render 方法中

00:00:41.070 --> 00:00:47.984
输入 if (this.props.alreadyLogged) 我们最终将导入这个属性

00:00:47.984 --> 00:00:52.379
但是现在将设置下 以便在使用时能够直接拿来用

00:00:52.380 --> 00:00:54.975
如果已经记录了信息

00:00:54.975 --> 00:00:59.939
则返回一个 View

00:00:59.939 --> 00:01:03.509
在该 View 中渲染 Ionicons 图标

00:01:03.509 --> 00:01:12.013
名称设为 ios-happy-outline 大小设为 100

00:01:12.013 --> 00:01:17.055
然后在下面输出文本

00:01:17.055 --> 00:01:20.775
"You already logged your information for today."

00:01:20.775 --> 00:01:27.155
然后在这里添加一个重置按钮

00:01:27.155 --> 00:01:29.885
这样我们就能点击该按钮并重置信息

00:01:29.885 --> 00:01:32.725
这将是一个非常常见的组件

00:01:32.724 --> 00:01:34.319
你将在这里看到这个按钮

00:01:34.319 --> 00:01:36.144
它是一个文本按钮

00:01:36.144 --> 00:01:38.909
现在我们将创建该按钮

00:01:38.909 --> 00:01:42.364
因为我们在应用的其他几个地方也会用到该按钮

00:01:42.364 --> 00:01:45.149
称其为 TextButton.js

00:01:45.150 --> 00:01:46.650
它将是一个按钮

00:01:46.650 --> 00:01:48.765
因此需要导入一些内容

00:01:48.765 --> 00:01:53.855
导入 Text 和 TouchableOpacity 二者都来自 react-native

00:01:53.855 --> 00:01:56.969
它将是一个无状态函数式组件

00:01:56.969 --> 00:02:00.629
并且将接收几项不同的参数

00:02:00.629 --> 00:02:04.569
包括 Children 和 onPress

00:02:04.569 --> 00:02:08.234
返回 TouchableOpacity 和 onPress

00:02:08.235 --> 00:02:10.760
很明显要调用传入的 onPress

00:02:10.759 --> 00:02:13.019
然后渲染 children

00:02:13.020 --> 00:02:18.350
将其封装在 Text 组件中

00:02:18.349 --> 00:02:20.400
转到 AddEntry

00:02:20.400 --> 00:02:26.265
导入 TextButton

00:02:26.264 --> 00:02:31.154
然后向下滚动到这里并渲染 TextButton

00:02:31.155 --> 00:02:36.824
在里面输入 Reset

00:02:36.824 --> 00:02:40.254
现在需要传入一个按钮被点击时运行的方法

00:02:40.254 --> 00:02:46.074
我们在这里添加 Reset 方法

00:02:46.074 --> 00:02:49.544
获取今天的 key

00:02:49.544 --> 00:02:52.649
可以通过调用 timeToString 来获取

00:02:52.650 --> 00:02:53.965
然后就像在这里的

00:02:53.965 --> 00:02:56.340
submit 方法中一样

00:02:56.340 --> 00:02:58.240
最终我们将执行几项操作

00:02:58.240 --> 00:03:01.365
先添加几条注释

00:03:01.365 --> 00:03:03.870
我们将更新 Redux

00:03:03.870 --> 00:03:08.420
然后转到主屏幕 并更新数据库

00:03:08.419 --> 00:03:11.064
我们将在后面的课程中完成所有这些操作

00:03:11.064 --> 00:03:19.979
现在已经创建好 Reset 可以将其传入 TextButton 组件中

00:03:19.979 --> 00:03:21.179
看起来正常

00:03:21.180 --> 00:03:22.650
测试下是否可行

00:03:22.650 --> 00:03:27.030
将 this.props.alreadyLogged 改成 true

00:03:27.030 --> 00:03:29.870
看来第 90 行存在语法错误

00:03:29.870 --> 00:03:33.860
应该是等号

00:03:34.430 --> 00:03:39.490
似乎还有一个问题 可能有拼写错误

00:03:39.490 --> 00:03:46.240
名称应该为“ios-happy-outline” ouline 拼错了

00:03:46.240 --> 00:03:48.365
出现了这个视图

00:03:48.365 --> 00:03:50.495
点击 Reset 什么也没发生

00:03:50.495 --> 00:03:53.000
最终会有后续效果的

00:03:53.000 --> 00:03:58.189
结束之前 先将这个再改为 this.props.alreadyLogged

