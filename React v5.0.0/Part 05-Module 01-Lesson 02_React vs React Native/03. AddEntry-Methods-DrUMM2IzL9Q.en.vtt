WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.995
If you remember back to our function that we built in the last video,

00:00:04.995 --> 00:00:07.296
this one right here, our getMetricMetaInfo,

00:00:07.296 --> 00:00:10.820
there are two types of inputs that we're going to be using,

00:00:10.820 --> 00:00:13.885
either a stepper which is composed of two different buttons,

00:00:13.885 --> 00:00:20.105
basically a button to increment and a button to decrement, or a slider,

00:00:20.105 --> 00:00:23.120
which is typically between one and a specific number,

00:00:23.120 --> 00:00:27.855
in this case 24, and in our eat case it's between one and 10.

00:00:27.855 --> 00:00:30.500
So, with those two types of inputs,

00:00:30.500 --> 00:00:33.979
there are going to be three different methods that we're going to need on

00:00:33.979 --> 00:00:38.659
our class in order to be able to modify those inputs, basically.

00:00:38.659 --> 00:00:42.979
So, our state is going to consist of five different things.

00:00:42.979 --> 00:00:47.369
We're going to have run, bike, basically a metric for everything that we're tracking,

00:00:47.369 --> 00:00:50.239
and each of them are going to start off at zero.

00:00:50.240 --> 00:00:53.090
Because again, the whole goal of this component is to get

00:00:53.090 --> 00:00:58.955
the users triathlon data plus their sleep and eat data for the specific day.

00:00:58.954 --> 00:01:00.379
So, when they're filling out this form,

00:01:00.380 --> 00:01:04.340
the metrics that we want to be tracking are these five metrics right here.

00:01:04.340 --> 00:01:07.385
So, first let's go ahead and we will create

00:01:07.385 --> 00:01:11.510
an increment method right here and this is going to be for our run,

00:01:11.510 --> 00:01:13.650
bike and swim metrics.

00:01:13.650 --> 00:01:17.060
So, when we invoke this we're going to pass in the metric.

00:01:17.060 --> 00:01:18.500
And then what we need to do is,

00:01:18.500 --> 00:01:21.049
we need to get the max that the metric could

00:01:21.049 --> 00:01:25.120
be as well as how much we should increment by which is the step.

00:01:25.120 --> 00:01:30.005
And we're going to get those from our getMetricMetaInfo function that we created,

00:01:30.004 --> 00:01:32.329
passing in the specific metric.

00:01:32.329 --> 00:01:33.799
And then what we're going to do is,

00:01:33.799 --> 00:01:35.314
we will call setState.

00:01:35.314 --> 00:01:38.700
So, we're going to update our local component states.

00:01:38.700 --> 00:01:41.450
When you call setState and you pass it a function,

00:01:41.450 --> 00:01:46.400
what you get is the current state and then what we want to do is,

00:01:46.400 --> 00:01:53.594
we want to say the count is going to be whatever the specific property is of the metrics.

00:01:53.594 --> 00:01:57.064
So, if it was bike then the count in this case would be zero,

00:01:57.064 --> 00:02:01.024
because state at bike is equal to zero.

00:02:01.025 --> 00:02:02.359
And then what we want to do is,

00:02:02.359 --> 00:02:05.415
we want to increment it by whatever the step is,

00:02:05.415 --> 00:02:07.840
which again we're getting from this function.

00:02:07.840 --> 00:02:09.319
So now what we want to do is,

00:02:09.319 --> 00:02:12.650
we want to return a new object and the object that you returned

00:02:12.650 --> 00:02:16.080
from setState is going to be merged with the current state.

00:02:16.080 --> 00:02:21.695
So, we want to say, go ahead and keep all of the state properties that are already there,

00:02:21.694 --> 00:02:26.030
but whatever this metric is we want to update it,

00:02:26.030 --> 00:02:27.740
and what we want it to be is,

00:02:27.740 --> 00:02:31.175
we'll say if count is greater than the max value,

00:02:31.175 --> 00:02:35.052
then the metric is now just going to be whatever the max value is.

00:02:35.052 --> 00:02:39.074
And if it isn't, then it's just going to be count.

00:02:39.074 --> 00:02:40.459
So again what we're doing here is,

00:02:40.460 --> 00:02:41.570
we are updating our state.

00:02:41.569 --> 00:02:44.164
All of the state properties are staying the same,

00:02:44.164 --> 00:02:46.519
but this one metric is going to update.

00:02:46.520 --> 00:02:49.260
And if it's bigger than the count or if it's bigger than the max,

00:02:49.259 --> 00:02:50.370
we don't want it to go above that,

00:02:50.370 --> 00:02:51.920
so it's just the max and if it's not,

00:02:51.919 --> 00:02:54.149
then it's just going to be this new count.

00:02:54.150 --> 00:02:57.659
So, we need to do this exact same thing except we are going to decrement.

00:02:57.659 --> 00:03:00.805
So I'm just going to go ahead and paste this in.

00:03:00.805 --> 00:03:02.825
We will call this decrement.

00:03:02.824 --> 00:03:05.629
And then now what we're going to do,

00:03:05.629 --> 00:03:09.840
is we don't need max and step because we're going to be subtracting.

00:03:09.840 --> 00:03:11.750
So, I'm just going to copy this.

00:03:11.750 --> 00:03:13.854
We'll delete both of these.

00:03:13.854 --> 00:03:15.889
So, we're going to call setState. We want to go ahead

00:03:15.889 --> 00:03:18.004
and get the count just like we did above here.

00:03:18.004 --> 00:03:21.121
But, our count instead of doing plus step,

00:03:21.122 --> 00:03:25.025
what we're going to do is say minus step.

00:03:25.025 --> 00:03:27.319
And then now, just as we did down here,

00:03:27.319 --> 00:03:30.004
we're going to say we want to return everything.

00:03:30.004 --> 00:03:31.664
We want the state to be exactly how it is.

00:03:31.664 --> 00:03:35.554
But, this specific metric is going to be, and then we'll say,

00:03:35.555 --> 00:03:38.045
if count is less than zero,

00:03:38.044 --> 00:03:40.099
then we want it to just be zero,

00:03:40.099 --> 00:03:44.435
and if not, then we want it to be whatever this count is.

00:03:44.435 --> 00:03:46.729
So, this is very similar to what we're doing right here,

00:03:46.729 --> 00:03:51.014
except now we're just making sure that we're not going below zero.

00:03:51.014 --> 00:03:53.684
And, now the very last thing we need to do is this,

00:03:53.685 --> 00:03:57.289
increment and decrement work for these three metrics right here,

00:03:57.288 --> 00:04:01.309
but we're going to be using a slider for sleep and eat.

00:04:01.310 --> 00:04:04.944
So, let's go ahead and create a slide method right here

00:04:04.944 --> 00:04:09.584
and it's going to take in the specific metric as well as the new value.

00:04:09.585 --> 00:04:10.950
And then, what we will do is,

00:04:10.949 --> 00:04:17.069
we will call setState and then we want to return an object and we will just say

00:04:17.069 --> 00:04:20.269
the new metric is now going to have a value of

00:04:20.269 --> 00:04:24.454
whatever the second argument we passed then to the slide function was.

00:04:24.454 --> 00:04:26.069
And now this looks good.

00:04:26.069 --> 00:04:27.930
So, we do have an extra comma right here,

00:04:27.930 --> 00:04:29.129
on line 24, that we don't need,

00:04:29.129 --> 00:04:30.784
you probably caught that.

00:04:30.785 --> 00:04:32.140
Now we should be good.

