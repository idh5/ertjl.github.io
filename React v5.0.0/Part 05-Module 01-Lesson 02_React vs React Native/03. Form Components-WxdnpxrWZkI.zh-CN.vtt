WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.445
在本视频中 我将深入讲解下 React Native 中的表单

00:00:04.445 --> 00:00:09.120
具体而言是这个 TextInput 组件和 Switch 组件

00:00:09.119 --> 00:00:10.419
在我们的 state 中

00:00:10.419 --> 00:00:14.455
在这里添加一些属性

00:00:14.455 --> 00:00:18.745
输入 input 和我的推特帐号

00:00:18.745 --> 00:00:21.030
输入 showInput 设为 false

00:00:21.030 --> 00:00:22.990
我们希望我们的 UI

00:00:22.989 --> 00:00:26.349
能出现一个切换按钮

00:00:26.350 --> 00:00:28.920
该按钮开启时 显示可以更改的输入文本

00:00:28.920 --> 00:00:30.890
关闭时 则隐藏文本

00:00:30.890 --> 00:00:32.740
在这里

00:00:32.740 --> 00:00:38.260
首先渲染 Switch 组件

00:00:38.259 --> 00:00:41.259
需要传入两项不同的内容

00:00:41.259 --> 00:00:43.689
首先传入 value

00:00:43.689 --> 00:00:47.945
其次传入点击按钮时将调用的函数

00:00:47.945 --> 00:00:49.149
我们在这里

00:00:49.149 --> 00:00:55.119
对我们的 state 解构这两项属性

00:00:55.119 --> 00:01:00.739
然后创建一个 handleToggleSwitch 函数

00:01:00.740 --> 00:01:03.609
该函数的作用是

00:01:03.609 --> 00:01:07.109
负责更新切换开关状态

00:01:07.109 --> 00:01:09.189
在这里

00:01:09.189 --> 00:01:11.575
输入 showInput

00:01:11.575 --> 00:01:16.270
它将是当前状态的对立状态

00:01:16.269 --> 00:01:18.354
每当运行该函数时

00:01:18.355 --> 00:01:20.859
switch 输入将切换

00:01:20.859 --> 00:01:24.054
在这里输入

00:01:24.055 --> 00:01:26.440
value = {showInput}

00:01:26.439 --> 00:01:29.349
然后输入 onValueChange

00:01:29.349 --> 00:01:33.714
设为 this.handleToggleSwitch

00:01:33.715 --> 00:01:35.000
现在转到应用界面

00:01:35.000 --> 00:01:36.939
你会在应用界面上

00:01:36.939 --> 00:01:39.814
看到这个切换按钮

00:01:39.814 --> 00:01:41.319
可以开启或关闭

00:01:41.319 --> 00:01:45.059
它会对我们的 state 更新该 showInput 属性

00:01:45.060 --> 00:01:48.740
现在我们需要添加 TextInput

00:01:48.739 --> 00:01:50.015
并输入

00:01:50.015 --> 00:01:55.030
如果 showInput 为 true

00:01:55.030 --> 00:01:58.439
则显示这个 TextInput 组件

00:01:58.439 --> 00:02:00.694
我们实际上希望能更改这个 TextInput

00:02:00.694 --> 00:02:04.164
因此需要再设置几项内容

00:02:04.165 --> 00:02:06.590
提供 input 本身

00:02:06.590 --> 00:02:08.200
设定一些样式

00:02:08.199 --> 00:02:12.289
我在下面创建了这些样式

00:02:12.289 --> 00:02:15.189
然后提供一个当它改变时

00:02:15.189 --> 00:02:18.469
将被调用的函数 这样就能更新本地状态

00:02:18.469 --> 00:02:22.060
输入 this.handleTextChange

00:02:22.060 --> 00:02:26.020
handleTextChange 将为组件上的一个方法

00:02:26.020 --> 00:02:29.665
它将接收崭新的 input

00:02:29.664 --> 00:02:33.639
还将调用 setState

00:02:33.639 --> 00:02:38.674
然后它将更新 input

00:02:38.675 --> 00:02:42.219
现在运行代码

00:02:42.219 --> 00:02:43.949
点击该开关

00:02:43.949 --> 00:02:46.030
你会看到该输入内容

00:02:46.030 --> 00:02:50.875
我们可以更改该输入内容

00:02:50.875 --> 00:02:52.944
如果我们想向用户界面上

00:02:52.944 --> 00:02:58.544
添加图片呢？

00:02:58.544 --> 00:02:59.869
假设这里

00:02:59.870 --> 00:03:01.460
有个图片

00:03:01.460 --> 00:03:04.570
导入 image 组件

00:03:04.569 --> 00:03:07.465
一切看起来几乎一样

00:03:07.465 --> 00:03:08.865
具有输入切换按钮

00:03:08.865 --> 00:03:12.439
但是现在点击文本输入框的话

00:03:12.439 --> 00:03:16.234
出现了键盘 并且将输入框隐藏起来了

00:03:16.235 --> 00:03:19.100
这样不太合适

00:03:19.099 --> 00:03:20.599
避免方法很简单

00:03:20.599 --> 00:03:24.814
React Native 提供了这个 this keyboardAvoidingView 组件

00:03:24.814 --> 00:03:27.469
我们可以将这里的 View

00:03:27.469 --> 00:03:31.849
替换为 keyboardAvoidingView

00:03:31.849 --> 00:03:34.715
并为其提供 behavior 属性

00:03:34.715 --> 00:03:36.640
设为 padding

00:03:36.639 --> 00:03:40.509
指明该视图如何不被键盘遮盖

00:03:40.509 --> 00:03:42.709
我们将在其周围添加一些内边距

00:03:42.710 --> 00:03:47.165
现在开启输入字段的话

00:03:47.164 --> 00:03:52.069
你会发现输入字段没有被隐藏

00:03:52.069 --> 00:03:54.044
整个视图都能看见

00:03:54.044 --> 00:03:55.894
依然能看到键盘

00:03:55.895 --> 00:03:59.000
并且能看到输入字段

