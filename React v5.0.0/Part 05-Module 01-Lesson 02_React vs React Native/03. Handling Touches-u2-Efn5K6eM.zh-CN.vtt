WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.230
用户与原生应用互动的主要方式是通过触摸进行互动

00:00:05.230 --> 00:00:08.109
因此我们要确保提供正确的按钮和组件

00:00:08.109 --> 00:00:12.369
以对任何触摸事件做出响应

00:00:12.369 --> 00:00:15.119
具体而言 对按钮点击做出响应

00:00:15.119 --> 00:00:19.155
react-native 提供了四种不同的组件

00:00:19.155 --> 00:00:21.464
分别为 TouchableHighlight TouchableNativeFeedback

00:00:21.464 --> 00:00:26.710
TouchableOpacity 和 TouchableWithoutFeedback

00:00:26.710 --> 00:00:28.310
以便对这些按钮点击操作做出响应

00:00:28.309 --> 00:00:29.949
我们将介绍每种组件

00:00:29.949 --> 00:00:33.414
首先介绍 TouchableHighlight

00:00:33.414 --> 00:00:35.244
TouchableHighlight 的作用是

00:00:35.244 --> 00:00:38.049
当你点击按钮时

00:00:38.049 --> 00:00:41.664
它会使按钮从主颜色变成另一种颜色

00:00:41.664 --> 00:00:45.174
在下面有一些样式容器

00:00:45.174 --> 00:00:47.784
包括普通按钮和按钮文本

00:00:47.784 --> 00:00:49.659
在这里

00:00:49.659 --> 00:00:53.199
我们可以向此组件添加按钮样式

00:00:53.200 --> 00:00:55.240
然后输入 onPress

00:00:55.240 --> 00:00:59.969
并运行这里的 handlePress 方法

00:00:59.969 --> 00:01:03.519
最后指定 underlayColor

00:01:03.520 --> 00:01:06.219
也就是按钮背景

00:01:06.219 --> 00:01:09.329
所变成的颜色

00:01:09.329 --> 00:01:14.379
输入 #d4271b

00:01:14.379 --> 00:01:20.234
也就是深红色 因为普通按钮是这个颜色

00:01:20.234 --> 00:01:21.879
在这里面

00:01:21.879 --> 00:01:25.329
我们可以传入希望按钮显示的内容

00:01:25.329 --> 00:01:31.509
输入 Touchable Highlight 然后设定样式 styles.btnText

00:01:31.510 --> 00:01:33.070
现在查看应用

00:01:33.069 --> 00:01:34.799
会看到这个按钮

00:01:34.799 --> 00:01:36.655
点击该按钮

00:01:36.655 --> 00:01:40.060
你会发现背景色稍微变深了

00:01:40.060 --> 00:01:46.150
因为我们从背景色变成了铺垫颜色

00:01:46.150 --> 00:01:48.460
在 iOS 应用中也是这种效果

00:01:48.459 --> 00:01:50.439
这就是 TouchableHighlight 组件的作用

00:01:50.439 --> 00:01:54.439
下一个将是 TouchableOpacity

00:01:54.439 --> 00:01:56.274
我实际上很喜欢 TouchableOpacity 组件

00:01:56.275 --> 00:01:58.125
可能是我最喜欢的组件

00:01:58.125 --> 00:01:59.290
我们将删掉这里的 underlayColor

00:01:59.290 --> 00:02:02.550
不用考虑它了

00:02:02.549 --> 00:02:04.149
现在

00:02:04.150 --> 00:02:05.875
当我们点击此按钮时

00:02:05.875 --> 00:02:10.289
你会发现按钮的透明度变化了

00:02:10.289 --> 00:02:13.650
也就是透出背景色

00:02:13.650 --> 00:02:18.504
TouchableOpacity 会改变按钮的透明度

00:02:18.504 --> 00:02:21.069
使背景色更突出

00:02:21.069 --> 00:02:25.090
接着是 TouchableWithoutFeedback

00:02:25.090 --> 00:02:27.985
当你点击按钮时 它基本上不会改变按钮外观

00:02:27.985 --> 00:02:31.540
它的区别在于不适用于文本

00:02:31.539 --> 00:02:36.530
设定一个唯一子级 View

00:02:36.530 --> 00:02:41.800
然后获取 TouchableWithoutFeedback 上的样式并放在该 View 上

00:02:41.800 --> 00:02:44.685
现在

00:02:44.685 --> 00:02:47.590
当我点击该按钮时

00:02:47.590 --> 00:02:50.729
什么也没发生 因为我们没有获得任何反馈

00:02:50.729 --> 00:02:53.199
该组件最好别使用

00:02:53.199 --> 00:02:55.944
因为原生应用就是要向用户提供反馈

00:02:55.944 --> 00:02:58.715
但在某些情况下 它也很有用

00:02:58.715 --> 00:03:04.000
最后我们将讨论 TouchableNativeFeedback

00:03:04.000 --> 00:03:05.764
此组件在 iOS 上不受支持

00:03:05.764 --> 00:03:07.764
仅适用于 Android

00:03:07.764 --> 00:03:10.914
它将使按钮出现涟漪效果

00:03:10.914 --> 00:03:13.689
该效果是 Android 平台的原生效果

00:03:13.689 --> 00:03:20.439
我们可以在这里面添加背景属性

00:03:20.439 --> 00:03:22.689
输入 background =

00:03:22.689 --> 00:03:28.814
然后输入 TouchableNativeFeedback.SelectableBackground

00:03:28.814 --> 00:03:31.044
对于 TouchableNativeFeedback 还需要注意一点

00:03:31.044 --> 00:03:34.312
它不能将 Text 作为其子级

00:03:34.312 --> 00:03:36.274
因此需要变成 View

00:03:36.275 --> 00:03:37.810
现在你会发现

00:03:37.810 --> 00:03:42.520
在 iOS 上出现了错误 因为该组件不适用于 iOS 平台

00:03:42.520 --> 00:03:48.245
但是在 on Android 上 删掉这个 hello 提示

00:03:48.245 --> 00:03:50.384
这样就能看清效果 点击该按钮

00:03:50.384 --> 00:03:53.090
出现了很酷的涟漪效果

