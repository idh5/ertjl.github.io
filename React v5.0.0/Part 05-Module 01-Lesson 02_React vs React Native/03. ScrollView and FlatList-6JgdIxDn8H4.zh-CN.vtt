WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.004
如果你去看看使用过的原生应用

00:00:04.004 --> 00:00:06.150
就会发现基本上都是一堆列表信息

00:00:06.150 --> 00:00:08.730
Spotify、Facebook 和所有其他的热门应用

00:00:08.730 --> 00:00:13.164
都只是显示一些不断变化的庞大列表数据

00:00:13.164 --> 00:00:15.660
在本视频中 我们将介绍

00:00:15.660 --> 00:00:19.890
如何在 react-native 中添加能正常运行的列表

00:00:19.890 --> 00:00:22.894
这是一个 reviews.js 文件

00:00:22.894 --> 00:00:27.545
其实就是一个包含各组不同项目的数组

00:00:27.545 --> 00:00:30.600
然后是一个 getReviews 函数

00:00:30.600 --> 00:00:33.255
用来返回上面的数组

00:00:33.255 --> 00:00:34.830
转到 App.js 文件

00:00:34.829 --> 00:00:37.384
我们导入了 getReviews

00:00:37.384 --> 00:00:41.265
并在这里添加了 Review 组件

00:00:41.265 --> 00:00:43.535
它会接收名称、文本和头像

00:00:43.534 --> 00:00:46.824
并向 View 显示这些信息

00:00:46.825 --> 00:00:49.530
我们将逐步介绍在应用中

00:00:49.530 --> 00:00:53.145
显示所有这些评价的不同方式

00:00:53.145 --> 00:00:55.650
首先 也是最明显的方式是

00:00:55.649 --> 00:00:57.945
输入以下内容

00:00:57.945 --> 00:00:59.700
转到这里

00:00:59.700 --> 00:01:03.225
输入 reviews.map 就像在网络平台上一样

00:01:03.225 --> 00:01:05.234
获得 name、text

00:01:05.234 --> 00:01:08.010
和 avatar

00:01:08.010 --> 00:01:10.950
然后渲染 Review 组件

00:01:10.950 --> 00:01:15.420
传入 key 该 key 将为 name

00:01:15.420 --> 00:01:17.385
然后传入 name

00:01:17.385 --> 00:01:21.535
text 和 avatar

00:01:21.534 --> 00:01:24.319
看起来似乎可行

00:01:24.319 --> 00:01:26.194
看看应用效果

00:01:26.194 --> 00:01:29.039
你会发现一切看起来正常

00:01:29.040 --> 00:01:31.500
但是如果滚动的话

00:01:31.500 --> 00:01:38.790
却发现无法滚动 因为视图被限定在这么大的屏幕空间内

00:01:38.790 --> 00:01:40.635
解决方法很简单

00:01:40.635 --> 00:01:43.170
我们不再使用 View

00:01:43.170 --> 00:01:49.460
而是将列表封装在这个 ScrollView 组件中

00:01:49.459 --> 00:01:51.539
现在

00:01:51.540 --> 00:01:54.675
这里面的一切都是列表 并且应该能够滚动 

00:01:54.674 --> 00:01:56.459
现在 在我们的应用中

00:01:56.459 --> 00:01:58.604
我们能够滚动了

00:01:58.605 --> 00:02:04.740
但是 ScrollView 并不是那么强大 也存在问题

00:02:04.739 --> 00:02:06.959
我们现在的做法是

00:02:06.959 --> 00:02:12.034
渲染该列表中的每一项 无论用户是否能看到这些项

00:02:12.034 --> 00:02:13.530
当我们位于该视图的顶部时

00:02:13.530 --> 00:02:16.344
依然在渲染下面的评价

00:02:16.344 --> 00:02:18.705
比较高效的做法是

00:02:18.705 --> 00:02:21.990
我们不用渲染所有项目

00:02:21.990 --> 00:02:25.875
而是只渲染用户当前能看到的项目

00:02:25.875 --> 00:02:31.020
这时候 这个 FlatList 组件就派上用场了

00:02:31.020 --> 00:02:32.100
它完全能实现刚才提到的渲染效果

00:02:32.099 --> 00:02:35.784
只渲染用户当前查看的项目

00:02:35.784 --> 00:02:40.259
将 ScrollView 重新改为普通的 View

00:02:40.259 --> 00:02:42.000
然后在 View 里面

00:02:42.000 --> 00:02:45.884
渲染 FlatList 组件

00:02:45.884 --> 00:02:48.394
将传入两项不同的内容

00:02:48.395 --> 00:02:49.920
需要一些数据

00:02:49.919 --> 00:02:53.139
设为 reviews

00:02:53.139 --> 00:02:54.914
还需要 renderItem

00:02:54.914 --> 00:02:58.924
它负责渲染实际的项目

00:02:58.925 --> 00:03:03.510
在这里创建一个 renderItem 方法

00:03:03.509 --> 00:03:09.774
复制所有这些内容并删掉这些内容

00:03:09.775 --> 00:03:13.015
现在开始创建 renderItem

00:03:13.014 --> 00:03:15.704
renderItem 将接收一个对象

00:03:15.705 --> 00:03:20.335
并且实际项目本身是要映射的内容

00:03:20.335 --> 00:03:25.170
每个 item 都将是具体的 Review

00:03:25.169 --> 00:03:26.984
然后我们将

00:03:26.985 --> 00:03:33.670
渲染 Review 并传入该 item

00:03:33.669 --> 00:03:37.525
现在再看看应用效果 一切应该看起来没变化

00:03:37.526 --> 00:03:39.885
滚动效果还是一样的

00:03:39.884 --> 00:03:41.639
但是当你在实际手机上运行该应用

00:03:41.639 --> 00:03:44.444
并滚动查看这么长的列表

00:03:44.444 --> 00:03:48.854
会发现效果好多了 因为我们使用的是 FlatList

00:03:48.854 --> 00:03:51.609
我们只是渲染用户当前看到的具体项目

00:03:51.610 --> 00:03:55.090
而不是整个列表

