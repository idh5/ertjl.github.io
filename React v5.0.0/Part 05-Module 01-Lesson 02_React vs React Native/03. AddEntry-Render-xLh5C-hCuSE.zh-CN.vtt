WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.724
我们已经编写了所有的方法和状态

00:00:05.724 --> 00:00:08.054
在本视频中

00:00:08.054 --> 00:00:11.564
我们将为滑块和步进器

00:00:11.564 --> 00:00:12.804
构建最基础的 UI

00:00:12.804 --> 00:00:16.884
我们再创建两个组件

00:00:16.885 --> 00:00:20.550
这个叫做 UdaciSlider.js

00:00:20.550 --> 00:00:26.365
第二个叫做 UdaciSteppers.js

00:00:26.364 --> 00:00:29.859
正如我提到的 这两个组件都是最基本的用户界面

00:00:29.859 --> 00:00:34.200
导入 react 并导入 view 和 text

00:00:34.200 --> 00:00:37.024
都来自 react-native

00:00:37.024 --> 00:00:41.155
它俩都是无状态函数式组件

00:00:41.155 --> 00:00:48.615
输入 UdaciSlider 返回一个视图

00:00:48.615 --> 00:00:51.355
在里面放入一些文本

00:00:51.354 --> 00:00:55.577
放入组件的名称

00:00:55.578 --> 00:00:57.825
复制这段代码

00:00:57.825 --> 00:01:00.925
并粘贴到 UdaciSteppers.js 文件中 因为它俩比较相似

00:01:00.924 --> 00:01:07.057
然后更改组件的名称

00:01:07.057 --> 00:01:09.000
转到 AddEntry

00:01:09.000 --> 00:01:11.325
导入这两个组件

00:01:11.325 --> 00:01:14.010
也就是 UdaciSlider

00:01:14.010 --> 00:01:16.725
以及 UdaciSteppers

00:01:16.724 --> 00:01:21.899
现在我们并不渲染这两个组件

00:01:21.900 --> 00:01:26.370
而是获取我们关心的指标

00:01:26.370 --> 00:01:28.079
也就是这五个指标

00:01:28.079 --> 00:01:32.099
然后根据该指标对应的类型

00:01:32.099 --> 00:01:36.641
显示滑块或步进器

00:01:36.641 --> 00:01:39.500
在这里的视图中

00:01:39.500 --> 00:01:42.090
我们先执行几项内容

00:01:42.090 --> 00:01:44.730
我们将通过调用之前创建的 getMetricMetaInfo

00:01:44.730 --> 00:01:50.575
获取这个 metaInfo

00:01:50.575 --> 00:01:54.540
现在我们输入

00:01:54.540 --> 00:01:58.973
Object.keys() 传入 metaInfo

00:01:58.972 --> 00:02:01.769
将返回一个数组

00:02:01.769 --> 00:02:05.549
它有五个属性

00:02:05.549 --> 00:02:07.994
swim bike 以及所有这些指标

00:02:07.995 --> 00:02:11.675
然后调用 .map

00:02:11.675 --> 00:02:14.364
这里将是特定的键

00:02:14.364 --> 00:02:15.969
然后在这里

00:02:15.969 --> 00:02:20.530
从 MetaInfo[key] 获取 getIcon

00:02:20.530 --> 00:02:26.580
type 以及所有其他内容

00:02:26.580 --> 00:02:29.025
这段代码的作用是调用 getMetricMetaInfo

00:02:29.025 --> 00:02:31.240
返回整个对象

00:02:31.240 --> 00:02:37.000
也就是这里的整个对象 然后映射它的所有键

00:02:37.000 --> 00:02:42.840
并从这个键中获取每个属性

00:02:42.840 --> 00:02:45.550
获取一个值

00:02:45.550 --> 00:02:49.045
该值将来自 this.state[key]

00:02:49.044 --> 00:02:50.164
在这里的这个示例中

00:02:50.164 --> 00:02:53.728
假设 object.keys.map 第一次运行

00:02:53.729 --> 00:02:56.943
key 将设为 run

00:02:56.943 --> 00:03:02.680
使用来自 metaInfo[run] 的 getIcon 和 type

00:03:02.680 --> 00:03:08.599
然后获取值 也就是 this.state[run]

00:03:08.599 --> 00:03:10.629
现在返回一些 UI

00:03:10.629 --> 00:03:15.219
输入 View 因为位于 map 中

00:03:15.219 --> 00:03:18.580
确保提供一个 key

00:03:18.580 --> 00:03:22.270
使用 getIcon

00:03:22.270 --> 00:03:25.240
如果现在保存的话

00:03:25.240 --> 00:03:28.625
似乎第 48 行存在错误

00:03:28.625 --> 00:03:33.314
这里缺少等号 刷新下

00:03:33.314 --> 00:03:35.359
你将发现在这两个平台上

00:03:35.360 --> 00:03:40.145
都出现了每个图标 因为这里有 getIcon

00:03:40.145 --> 00:03:45.942
现在我们将显示滑块或步进器

00:03:45.942 --> 00:03:50.180
如果 type 等于 slider

00:03:50.180 --> 00:03:53.395
我们将渲染 UdaciSlider

00:03:53.395 --> 00:03:57.400
传入几个参数

00:03:57.400 --> 00:04:00.515
首先将传入在第 49 行获得的 value

00:04:00.514 --> 00:04:06.109
然后传入一个 onChange 函数

00:04:06.110 --> 00:04:07.475
该函数将获得 value

00:04:07.474 --> 00:04:09.919
然后我们将

00:04:09.919 --> 00:04:13.069
调用 this.slide 它位于这里

00:04:13.069 --> 00:04:17.379
注意 我们需要传入 metric 和 value

00:04:17.379 --> 00:04:19.490
因此传入 key 和 value

00:04:19.490 --> 00:04:24.785
然后传入所有其他内容

00:04:24.785 --> 00:04:28.640
如果不是滑块类型

00:04:28.639 --> 00:04:34.375
则渲染 UdaciSteppers 组件

00:04:34.375 --> 00:04:37.730
代码很相似 传入 value

00:04:37.730 --> 00:04:41.055
传入 onIncrement

00:04:41.055 --> 00:04:43.579
它将调用 increment 函数

00:04:43.579 --> 00:04:46.789
传入具体的 key

00:04:46.790 --> 00:04:50.569
也就是具体的指标

00:04:50.569 --> 00:04:55.990
递减部分也一样 因此复制粘贴这行并稍加修改

00:04:55.990 --> 00:04:57.860
改为 decrement

00:04:57.860 --> 00:05:00.850
最后 和之前一样

00:05:00.850 --> 00:05:03.420
传入所有其他内容

00:05:03.420 --> 00:05:05.985
看起来正常 看看是否有任何错误

00:05:05.985 --> 00:05:09.460
没有错误 你会发现

00:05:09.459 --> 00:05:14.805
对于顶部的三个指标 对应的是步进器

00:05:14.805 --> 00:05:17.000
对于底部的两个指标 对应的是滑块

