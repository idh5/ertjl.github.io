WEBVTT
Kind: captions
Language: pt-BR

00:00:00.600 --> 00:00:05.833
Agora que temos todos os métodos
e todos os "states",

00:00:05.867 --> 00:00:08.933
o que eu quero fazer neste vídeo
é construir minimamente

00:00:08.966 --> 00:00:12.667
a interface do nosso slider
e dos nossos steppers.

00:00:12.700 --> 00:00:17.000
Então vamos criar
mais dois componentes.

00:00:17.033 --> 00:00:20.700
Um se chamará
"UdaciSlider.js",

00:00:20.733 --> 00:00:26.367
o outro, "UdaciSteppers.js".

00:00:26.400 --> 00:00:29.667
Ambos serão bem minimalistas,
como já falei,

00:00:29.700 --> 00:00:31.367
então vamos importar
"React".

00:00:31.400 --> 00:00:34.067
Também vamos importar
"View" e "Text",

00:00:34.100 --> 00:00:36.700
ambos provindos
de "react-native".

00:00:36.733 --> 00:00:41.100
Ambos serão componentes funcionais
sem estado.

00:00:41.133 --> 00:00:43.867
"UdaciSlider..."

00:00:43.900 --> 00:00:47.833
E queremos retornar
uma visualização.

00:00:48.800 --> 00:00:51.167
Vamos adicionar um texto

00:00:51.200 --> 00:00:55.533
com o nome do componente.

00:00:55.567 --> 00:00:59.000
Vou copiar isto e colar
no UdaciSteppers,

00:00:59.033 --> 00:01:01.033
que será parecido.

00:01:01.067 --> 00:01:06.300
Só trocaremos
o nome do componente.

00:01:06.867 --> 00:01:08.733
Agora, dentro de "AddEntry",

00:01:08.767 --> 00:01:11.133
vamos importar os dois.

00:01:11.167 --> 00:01:13.667
Importamos "UdaciSlider"

00:01:13.700 --> 00:01:16.467
e "UdaciSteppers".

00:01:17.033 --> 00:01:21.667
Agora não nos interessa
renderizar os dois em separado.

00:01:21.700 --> 00:01:26.133
Nós queremos obter as medições
que nos interessam,

00:01:26.167 --> 00:01:27.800
que são aquelas cinco,

00:01:27.833 --> 00:01:31.867
e depois exibimos o slider
ou o stepper,

00:01:31.900 --> 00:01:36.533
dependendo do tipo correspondente
à medição.

00:01:36.566 --> 00:01:42.033
Dentro desta visualização aqui,
façamos algumas coisas antes.

00:01:42.066 --> 00:01:46.667
Vamos importar
esta "metaInfo"

00:01:46.700 --> 00:01:50.633
invocando "getMetricMetaInfo",
que fizemos anteriormente.

00:01:50.667 --> 00:01:53.633
E agora o que
queremos fazer...

00:01:53.667 --> 00:01:58.500
Digamos
"Object.keys(metaInfo)".

00:01:58.533 --> 00:02:01.900
Isto nos retornará um array

00:02:01.933 --> 00:02:05.000
que contém
cinco propriedades:

00:02:05.033 --> 00:02:07.733
sono, natação,
ciclismo e tal.

00:02:07.767 --> 00:02:11.433
Depois, nós chamamos ".map".

00:02:11.467 --> 00:02:14.567
Esta será
a chave "key" específica.

00:02:14.600 --> 00:02:17.400
E, a partir daqui,

00:02:17.433 --> 00:02:23.167
vamos importar "getIcon",
"type" e tudo mais

00:02:23.200 --> 00:02:26.400
de "metaInfo[key]".

00:02:26.433 --> 00:02:28.800
Repetindo, chamamos
"getMetricMetaInfo".

00:02:28.833 --> 00:02:31.400
Isso nos retornou
o objeto inteiro,

00:02:31.433 --> 00:02:34.433
este objeto aqui...

00:02:35.000 --> 00:02:37.500
Então mapeamos
todas as "keys"

00:02:37.533 --> 00:02:42.900
e estamos importando
cada propriedade das "keys".

00:02:42.933 --> 00:02:45.333
Também podemos
importar "value",

00:02:45.366 --> 00:02:48.833
que virá
de "this.state[key]".

00:02:48.866 --> 00:02:50.067
No nosso exemplo,

00:02:50.100 --> 00:02:53.667
digamos que, na primeira execução
de "object.key.map",

00:02:53.700 --> 00:02:57.000
"key" seja determinada
conforme "run".

00:02:57.033 --> 00:03:02.300
Nós usamos "getIcon" e "type",
vindos de "metaInfo[run]",

00:03:02.333 --> 00:03:07.800
e importamos o valor
de "this.state[run]".

00:03:07.833 --> 00:03:10.467
Depois,
retornaremos uma interface.

00:03:10.500 --> 00:03:13.600
O que retornaremos,
poremos entre tags "View",

00:03:13.633 --> 00:03:18.300
e, como estamos em "map",
precisamos fornecer uma "key".

00:03:18.333 --> 00:03:22.233
E depois usamos "getIcon()".

00:03:22.267 --> 00:03:25.033
Se eu salvar isto assim
agora...

00:03:25.067 --> 00:03:28.433
Parece que temos um erro
na linha 48.

00:03:28.467 --> 00:03:30.633
Faltou um sinal de igual.

00:03:32.300 --> 00:03:36.800
Vamos atualizar. Perceba
que temos ícones dos dois lados,

00:03:36.833 --> 00:03:40.100
pois usamos "getIcon" aqui.

00:03:40.133 --> 00:03:45.700
E agora queremos exibir
um slider ou steppers.

00:03:45.733 --> 00:03:50.433
Escrevemos se "type"
for igual a "slider",

00:03:50.466 --> 00:03:54.633
queremos renderizar
"UdaciSlider"

00:03:54.667 --> 00:03:57.267
adicionando
alguns argumentos.

00:03:57.300 --> 00:04:01.700
Primeiro, o "value",
obtido na linha 49.

00:04:01.733 --> 00:04:05.867
Depois uma função
"onChange".

00:04:05.900 --> 00:04:09.167
Isto receberá um valor,

00:04:09.200 --> 00:04:12.733
e nós chamaremos "this.slide",
que está bem aqui.

00:04:12.767 --> 00:04:15.933
Temos que passar tanto a medição
quanto o valor "value"

00:04:15.967 --> 00:04:19.433
para que passemos
"key" e "value".

00:04:19.466 --> 00:04:24.467
Depois, por último,
temos que passar o restante.

00:04:24.500 --> 00:04:28.600
Agora,
se não for um tipo de slider,

00:04:28.633 --> 00:04:34.333
renderizaremos nosso componente
UdaciSteppers.

00:04:34.367 --> 00:04:37.567
Será bem similar.
Passaremos "value"...

00:04:37.600 --> 00:04:41.067
passaremos "onIncrement",

00:04:41.100 --> 00:04:44.533
que chamará
a função incremental,

00:04:44.566 --> 00:04:48.300
passando a chave "key"
ou a medição específica.

00:04:48.333 --> 00:04:51.600
E o decremento será igual,

00:04:51.633 --> 00:04:54.133
basta copiar, colar

00:04:54.167 --> 00:04:57.633
e alterar para "decrement".

00:04:57.666 --> 00:05:03.333
Por último, como antes,
passamos todo o restante.

00:05:03.367 --> 00:05:06.733
Parece tudo certo.
Vamos ver se há algum erro.

00:05:06.767 --> 00:05:11.233
Percebam que,
para estas três primeiras medições,

00:05:11.267 --> 00:05:13.467
teremos steppers.

00:05:13.500 --> 00:05:17.033
Para as duas últimas,
sliders.

