WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.044
我们已经创建了 action 和 reducer

00:00:03.044 --> 00:00:07.384
并使用 provider 和 createStore 将 redux 关联到应用中

00:00:07.384 --> 00:00:09.140
下一步是

00:00:09.140 --> 00:00:12.800
连接 AddEntry 组件

00:00:12.800 --> 00:00:16.460
这样的话 当我们提交新的条目时

00:00:16.460 --> 00:00:18.245
我们可以在这里添加一些功能

00:00:18.245 --> 00:00:21.295
并且当我们重置某一天的信息时

00:00:21.295 --> 00:00:24.429
可以在这里添加一些 redux 功能

00:00:24.429 --> 00:00:28.309
我们先导入一些内容

00:00:28.309 --> 00:00:31.744
我们将导入 connect 来自于 react-redux

00:00:31.745 --> 00:00:36.634
然后导入 addEntry action creator

00:00:36.634 --> 00:00:40.844
来自于 actions 文件

00:00:40.844 --> 00:00:45.784
我们不再导出组件

00:00:45.784 --> 00:00:47.224
而是导出

00:00:47.225 --> 00:00:51.560
对 connect 的调用

00:00:51.560 --> 00:00:53.105
结果是

00:00:53.104 --> 00:00:55.774
传递 AddEntry

00:00:55.774 --> 00:00:59.729
现在 AddEntry 将能够访问 dispatch

00:00:59.729 --> 00:01:02.539
在 submit 中

00:01:02.539 --> 00:01:04.286
写着更新 redux 的地方

00:01:04.286 --> 00:01:08.030
输入 this.props.dispatch

00:01:08.030 --> 00:01:13.754
我们要分派的是刚刚导入的 addEntry

00:01:13.754 --> 00:01:19.159
addEntry 接受的是新的条目

00:01:19.159 --> 00:01:21.329
在这里 它接受的是新的条目

00:01:21.329 --> 00:01:24.140
最终 该条目

00:01:24.140 --> 00:01:27.340
将被添加到我们的 state 上

00:01:27.340 --> 00:01:31.219
输入 key

00:01:31.219 --> 00:01:34.789
它是 timeToString 的返回值

00:01:34.790 --> 00:01:37.160
value 将是 entry

00:01:37.159 --> 00:01:38.704
其实就是我们的 state

00:01:38.704 --> 00:01:41.564
它具有所有这些属性

00:01:41.564 --> 00:01:43.219
现在 每当我们点击提交时

00:01:43.219 --> 00:01:48.109
我们不仅会重置状态和更新数据库

00:01:48.109 --> 00:01:51.905
并且会分派 addEntry action creator

00:01:51.905 --> 00:01:56.564
它负责将具体的条目保存到 redux store 中

00:01:56.564 --> 00:02:00.230
现在 在下面执行非常相似的流程

00:02:00.230 --> 00:02:03.965
每当我们点击这里的这个 reset 按钮时

00:02:03.965 --> 00:02:09.159
这个 reset 函数将会运行

00:02:09.159 --> 00:02:10.370
现在将和之前一样

00:02:10.370 --> 00:02:14.164
输入 this.props.dispatch

00:02:14.164 --> 00:02:20.014
我们要分派的是 addEntry key 完全一样

00:02:20.014 --> 00:02:24.109
但现在我们希望将其重置为初始状态

00:02:24.110 --> 00:02:27.200
而不是具体的条目

00:02:27.199 --> 00:02:31.155
看看我们的应用 这些是完全一样的屏幕

00:02:31.155 --> 00:02:34.705
注意这里是当前日期：8 月 30 日

00:02:34.705 --> 00:02:37.760
我们提示别忘了记录今天的数据

00:02:37.759 --> 00:02:41.870
8 月 2 日不一样

00:02:41.870 --> 00:02:45.140
提示你没有记录任何信息

00:02:45.139 --> 00:02:46.729
因此在 redux store 中

00:02:46.729 --> 00:02:49.489
我们有三种不同的值

00:02:49.490 --> 00:02:52.129
第一种是这里的值 也就是一个对象

00:02:52.129 --> 00:02:53.734
包含 run、bike、swim

00:02:53.735 --> 00:02:55.580
eat 和 sleep 属性

00:02:55.580 --> 00:02:58.865
这些属性的值为 30、65、5153

00:02:58.865 --> 00:03:03.300
表示具体指标的值

00:03:03.300 --> 00:03:05.969
在这里

00:03:05.969 --> 00:03:08.000
键将是 2017 年 8 月 2 日

00:03:08.000 --> 00:03:11.025
值将为空

00:03:11.025 --> 00:03:12.710
然后在这里

00:03:12.710 --> 00:03:15.675
注意 我们没有记录任何信息 但日期是今天

00:03:15.675 --> 00:03:18.335
我们不能说没有记录这一天的数据

00:03:18.335 --> 00:03:20.885
我们希望提醒的是：嘿 别忘了记录数据

00:03:20.884 --> 00:03:26.939
转到 helpers 文件

00:03:26.939 --> 00:03:29.719
新建一个函数

00:03:29.719 --> 00:03:31.400
名称设为

00:03:31.400 --> 00:03:34.550
getDailyReminderValue

00:03:34.550 --> 00:03:37.939
它将返回一个具有日期属性的对象

00:03:37.939 --> 00:03:41.405
值将为“挥手”表情符

00:03:41.405 --> 00:03:44.150
然后输入文本

00:03:44.150 --> 00:03:47.175
“Don't forget to log your data today!”

00:03:47.175 --> 00:03:53.165
现在 每当我们想重置某一天的值时

00:03:53.164 --> 00:03:56.780
我们将调用这个函数并获得这个对象

00:03:56.780 --> 00:03:58.305
转到 AddEntry 文件

00:03:58.305 --> 00:04:00.469
导入这个组件

00:04:00.469 --> 00:04:04.889
来自于 /utils/helpers

00:04:04.889 --> 00:04:07.224
似乎在这里从该路径中导入了内容

00:04:07.224 --> 00:04:10.134
直接在这里添加 getDailyReminderValue

00:04:10.134 --> 00:04:12.739
在提交数据时

00:04:12.740 --> 00:04:18.350
我们将此重置为 entry

00:04:18.350 --> 00:04:23.555
但是当我们重置时 我们将调用 getDailyReminderValue.

00:04:23.555 --> 00:04:26.435
这样的话 每当 reset 运行时

00:04:26.435 --> 00:04:30.500
我们将 state 上这个属性的值

00:04:30.500 --> 00:04:34.790
设为这一天的默认值

00:04:34.790 --> 00:04:38.705
也就是提示别忘了记录今天的信息

00:04:38.704 --> 00:04:41.990
最后的任务时 如果还记得的话

00:04:41.990 --> 00:04:45.290
这一部分的作用是提示：

00:04:45.290 --> 00:04:48.245
如果你已经记录了当天的信息

00:04:48.245 --> 00:04:52.740
则显示这个视图 而不是让用户重新记录信息

00:04:52.740 --> 00:04:55.310
现在我们在这里

00:04:55.310 --> 00:04:57.165
创建一个函数

00:04:57.165 --> 00:05:02.850
称为 mapStateToProps 它将接收 state

00:05:02.850 --> 00:05:06.725
我们可以像之前一样 通过调用 timeToString 创建新的 key

00:05:06.725 --> 00:05:08.960
为了知道

00:05:08.959 --> 00:05:11.779
用户是否已经记录信息

00:05:11.779 --> 00:05:19.789
输入 state[key] &amp;&amp; 也就是今天的 key

00:05:19.790 --> 00:05:24.970
然后输入 typeof state[key].today === ‘undefined’

00:05:24.970 --> 00:05:27.980
表示用户已经记录信息

00:05:27.980 --> 00:05:30.694
如果 state[key] 具有内容

00:05:30.694 --> 00:05:32.129
也就是不为空

00:05:32.129 --> 00:05:39.949
并且 state[key].today 为 undefined 这行的作用是

00:05:39.949 --> 00:05:41.029
回到应用界面

00:05:41.029 --> 00:05:44.679
这部分将是一个具有所有这些属性的对象

00:05:44.680 --> 00:05:46.329
这部分将为空

00:05:46.329 --> 00:05:52.185
但是这部分将具有 today 属性 正如这行代码所表示的

00:05:52.185 --> 00:05:58.790
如果特定日期的值在 redux store 中具有 today 属性

00:05:58.790 --> 00:06:02.060
则表示用户尚未记录信息

00:06:02.060 --> 00:06:05.964
this.props.alreadyLogged 将为 false

00:06:05.964 --> 00:06:08.349
我调整下格式

00:06:08.350 --> 00:06:15.060
现在向 connect 函数传入 mapStateToProps

00:06:15.060 --> 00:06:16.615
发现了个拼写错误

00:06:16.615 --> 00:06:18.165
应该输入 export default connect

00:06:18.165 --> 00:06:20.340
而不是 export connect

00:06:20.339 --> 00:06:23.284
现在我们的应用应该依然能运行

00:06:23.285 --> 00:06:25.450
我们可以测试下

00:06:25.449 --> 00:06:27.439
尝试调整这些信息并提交

00:06:27.439 --> 00:06:30.805
将这个设成 4 并提交

00:06:30.805 --> 00:06:33.415
注意 出现了这个屏幕

00:06:33.415 --> 00:06:37.785
因为在这里 alreadyLogged 被传入组件并且为 true

00:06:37.785 --> 00:06:39.515
我们应该能够在这里进行重置

00:06:39.514 --> 00:06:42.000
回到这个屏幕

