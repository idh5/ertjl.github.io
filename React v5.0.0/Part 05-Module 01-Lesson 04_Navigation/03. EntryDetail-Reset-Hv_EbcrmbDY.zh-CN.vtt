WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.859
现在 我想在此 UI 上添加一个重置按钮

00:00:02.859 --> 00:00:05.919
这样的话 当我点击该按钮时

00:00:05.919 --> 00:00:09.550
它会重置特定日期的这些信息

00:00:09.550 --> 00:00:11.589
我们先在这里

00:00:11.589 --> 00:00:14.140
导入一些方法

00:00:14.140 --> 00:00:18.370
首先导入 addEntry

00:00:18.370 --> 00:00:22.390
它是我们在很早之前创建的一个 action creator

00:00:22.390 --> 00:00:25.990
接着 从 api 文件中导入 removeEntry

00:00:25.989 --> 00:00:32.199
它将从数据库中删除特定的条目

00:00:32.200 --> 00:00:38.770
现在创建一个 mapDispatchToProps 函数

00:00:38.770 --> 00:00:41.200
传入 dispatch

00:00:41.200 --> 00:00:44.986
然后传入来自属性的 navigation

00:00:44.985 --> 00:00:47.329
首先 和之前一样

00:00:47.329 --> 00:00:50.350
获取传递的 entryId

00:00:50.350 --> 00:00:54.130
然后返回两种不同的方法

00:00:54.130 --> 00:01:00.160
一个是从 store 中删除特地日期的项目

00:01:00.159 --> 00:01:04.844
另一个方法使我们能够转到主屏幕视图

00:01:04.844 --> 00:01:08.260
输入 remove

00:01:08.260 --> 00:01:13.600
它将调用 dispatch

00:01:13.599 --> 00:01:17.030
然后调用 addEntry action creator

00:01:17.030 --> 00:01:20.909
现在输入 [entryId]

00:01:20.909 --> 00:01:22.939
在此 entryId 下

00:01:22.939 --> 00:01:26.560
我们要做的是...

00:01:26.560 --> 00:01:28.359
我们要重置信息

00:01:28.359 --> 00:01:32.049
问题是 如果你还记得的话…现在应用有点复杂了

00:01:32.049 --> 00:01:37.176
如果我们要重置的日期是当天 则不能重置为 null

00:01:37.177 --> 00:01:42.220
而是重置为这些信息

00:01:42.219 --> 00:01:46.189
转到 EntryDetail

00:01:46.189 --> 00:01:49.420
导入两项内容

00:01:49.420 --> 00:01:53.859
第一个是 timeToStrings 以便获得当前日期的 ID

00:01:53.859 --> 00:01:59.500
第二个是 getDailyReminderValue

00:01:59.500 --> 00:02:02.829
以便获得该日期的对象

00:02:02.829 --> 00:02:04.465
现在 转到这里

00:02:04.465 --> 00:02:08.229
我们希望获得该特地日期的条目

00:02:08.229 --> 00:02:09.609
当我们删除它时

00:02:09.610 --> 00:02:14.328
要么设为 timeToString === entryId

00:02:14.328 --> 00:02:16.020
如果是今天

00:02:16.020 --> 00:02:21.070
则设为 getDailyReminderValue 返回的内容

00:02:21.069 --> 00:02:22.689
也就是提示

00:02:22.689 --> 00:02:26.740
“嘿 别忘了记录数据” 或设为 null

00:02:26.740 --> 00:02:33.140
我们要添加到该对象的第二个内容是 goBack

00:02:33.139 --> 00:02:40.000
调用 navigation goBack()

00:02:40.000 --> 00:02:43.240
现在我们可以在组件中访问 remove 和 goBack 了

00:02:43.240 --> 00:02:47.320
转到我们的组件中

00:02:47.319 --> 00:02:51.459
在这里设置一个 reset 方法

00:02:51.460 --> 00:02:52.474
它的作用是

00:02:52.474 --> 00:03:00.204
每当我们点击 reset 首先获取 remove

00:03:00.205 --> 00:03:02.350
goBack 和 entryId

00:03:02.349 --> 00:03:04.609
来自于 this.props

00:03:04.610 --> 00:03:09.375
entryId 来自于 MapStateToProps 中的这个 entryId

00:03:09.375 --> 00:03:13.000
然后调用 remove()

00:03:13.000 --> 00:03:14.664
调用 goBack()

00:03:14.664 --> 00:03:17.229
然后调用 removeEntry()

00:03:17.229 --> 00:03:24.149
来自于 api 文件中的这里 传入 entryId

00:03:24.150 --> 00:03:26.650
到目前为止 看起来不错

00:03:26.650 --> 00:03:30.647
现在设置一个 UI 来调用 reset

00:03:30.647 --> 00:03:34.269
导入 TextButton

00:03:34.270 --> 00:03:38.530
来自于 TextButton 组件

00:03:38.530 --> 00:03:40.250
然后将这段长长的代码改为

00:03:40.250 --> 00:03:44.530
TextButton

00:03:44.530 --> 00:03:49.169
在这里输入 onPress={this.reset}

00:03:49.169 --> 00:03:52.759
margin 设为 20

00:03:52.759 --> 00:03:56.139
文本为“RESET”

00:03:56.139 --> 00:03:58.179
看起来不错

00:03:58.180 --> 00:04:04.944
看看是否有任何错误 的确有。需要解决 action 问题

00:04:04.944 --> 00:04:07.909
应该是 actions

00:04:07.909 --> 00:04:12.810
到目前为止一切正常 看看 UI 看起来怎样 很不错

00:04:12.810 --> 00:04:15.000
我们将遇到的一个情况是

00:04:15.000 --> 00:04:17.834
如果点击 reset

00:04:17.834 --> 00:04:22.949
现在会出现的情况是 这个组件将重新渲染

00:04:22.949 --> 00:04:25.139
然后将会出现故障

00:04:25.139 --> 00:04:27.620
因为它会尝试获取特定 entryId 的状态

00:04:27.620 --> 00:04:29.100
如果不是当前日期

00:04:29.100 --> 00:04:30.367
则将为 null

00:04:30.367 --> 00:04:35.909
然后将所有 metrics 传入 MetricCard 接着就会出现故障

00:04:35.910 --> 00:04:38.115
这个问题可以有几种解决方法

00:04:38.115 --> 00:04:43.410
我认为最合适的方法是

00:04:43.410 --> 00:04:48.390
输入 shouldComponentUpdate

00:04:48.389 --> 00:04:57.539
如果 nextProps.metrics 不为 null 并且 nextProps.metrics.today 为假

00:04:57.540 --> 00:05:00.480
那么该组件应该更新

00:05:00.480 --> 00:05:01.980
但是如果不是这种情况

00:05:01.980 --> 00:05:03.600
则不更新组件

00:05:03.600 --> 00:05:06.465
当我点击 reset

00:05:06.464 --> 00:05:10.439
组件将自然地重新渲染 虽然我们要回到主屏幕

00:05:10.439 --> 00:05:14.867
因为 EntryDetail 依然在路径堆栈中

00:05:14.867 --> 00:05:16.344
而 shouldComponentUpdate 的作用是

00:05:16.345 --> 00:05:19.620
不要重新渲染组件

00:05:19.620 --> 00:05:23.845
除非 nextProps.metrics 不等于 null

00:05:23.845 --> 00:05:30.530
表示日期具有当前信息 并且 nextProps.metrics.today 为假

00:05:30.529 --> 00:05:31.829
没有这行代码的话

00:05:31.829 --> 00:05:35.609
则 MetricCard 将渲染 并传入 metrics

00:05:35.610 --> 00:05:38.850
它将是 undefined 一切会出现故障

00:05:38.850 --> 00:05:41.855
看看应用能否正常运行

00:05:41.855 --> 00:05:44.480
转到 29 日 点击重置

00:05:44.480 --> 00:05:47.069
系统提示 remove 不是一个函数

00:05:47.069 --> 00:05:49.939
肯定是啊 this.props

00:05:49.939 --> 00:05:52.139
啊哈 我们没有传入第二个参数 mapDispatchToProps

00:05:52.139 --> 00:05:56.990
传入该参数

00:05:56.990 --> 00:06:00.975
现在 我觉得有信心一切正常 点击 RESET

00:06:00.975 --> 00:06:04.560
8 月 29 日不再显示当天的信息

00:06:04.560 --> 00:06:07.139
而是提示“You didn't log any data on this day.”

