WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.929
下一步的任务很明显 我们将使这个屏幕看起来更棒

00:00:05.929 --> 00:00:12.094
将此屏幕连接到 Redux 然后获取特定键对应的日期的信息

00:00:12.095 --> 00:00:14.575
转到 EntryDetail.js 文件

00:00:14.574 --> 00:00:17.030
导入一些内容

00:00:17.030 --> 00:00:19.925
我们将添加一些样式 因此导入 StyleSheet

00:00:19.925 --> 00:00:23.060
还需要导入 connect

00:00:23.059 --> 00:00:26.869
趁机导入颜色 white

00:00:26.870 --> 00:00:30.980
在这里 我们不再导出 EntryDetail

00:00:30.980 --> 00:00:33.390
而是导出 connect

00:00:33.390 --> 00:00:39.909
然后在这里构建 mapStateToProps 函数

00:00:39.909 --> 00:00:43.309
传入 state

00:00:43.310 --> 00:00:47.980
还需要传入具有 navigation 属性的当前属性

00:00:47.979 --> 00:00:49.939
然后在这里

00:00:49.939 --> 00:00:55.024
获取转到 EntryDetail 视图时所获的 entryId

00:00:55.024 --> 00:00:59.539
我们可以从 navigation.state.params 中获取该 ID

00:00:59.539 --> 00:01:05.239
然后返回要传递给组件的所有信息

00:01:05.239 --> 00:01:07.604
向其传递 entryId

00:01:07.605 --> 00:01:12.050
然后传递 metrics

00:01:12.049 --> 00:01:17.209
设为该 entryId 对应的状态

00:01:17.209 --> 00:01:21.349
entryId 将为特定日期的键

00:01:21.349 --> 00:01:25.219
将该 entryId 传递给组件

00:01:25.219 --> 00:01:29.980
同时传递 metrics 属性下关于这一天的具体信息

00:01:29.980 --> 00:01:34.413
现在转到 EntryDetail 组件下

00:01:34.412 --> 00:01:39.489
从属性下获取这些 metrics

00:01:39.489 --> 00:01:43.219
然后我们将...

00:01:43.219 --> 00:01:46.775
记得我们创建了这个 MetricCard 组件

00:01:46.775 --> 00:01:51.255
表示这个卡片 UI

00:01:51.254 --> 00:01:53.129
我们也渲染下该卡片

00:01:53.129 --> 00:01:54.689
在这里导入 MetricCard

00:01:54.689 --> 00:02:04.429
然后渲染其中一个卡片 传入 metrics

00:02:04.430 --> 00:02:06.230
在忘记之前

00:02:06.230 --> 00:02:11.000
在这里为容器创建一些样式

00:02:11.000 --> 00:02:12.590
输入 container：

00:02:12.590 --> 00:02:14.930
和往常一样 flex: 1

00:02:14.930 --> 00:02:19.159
backgroundColor 为 white

00:02:19.159 --> 00:02:24.145
将 padding 设为 15 在这个视图中进行设置

00:02:24.145 --> 00:02:26.115
看起来不错

00:02:26.115 --> 00:02:31.395
别忘了在这个 connect 函数中传入 mapsStateToProps

00:02:31.395 --> 00:02:35.855
如果一切正常的话

00:02:35.854 --> 00:02:37.579
点击这个

00:02:37.580 --> 00:02:41.000
就会转到这个用户界面

