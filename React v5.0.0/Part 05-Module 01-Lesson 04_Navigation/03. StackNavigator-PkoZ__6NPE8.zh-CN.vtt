WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.879
现在 我们的任务是

00:00:01.879 --> 00:00:04.894
让填充的每一天都可点击

00:00:04.894 --> 00:00:08.059
每当我们点击这样的日期时

00:00:08.060 --> 00:00:10.130
能够出现从左到右的过渡效果

00:00:10.130 --> 00:00:12.589
进一步访问路径堆栈

00:00:12.589 --> 00:00:15.469
我们看到一些相同的统计信息

00:00:15.470 --> 00:00:17.390
并且看到一个重置按钮

00:00:17.390 --> 00:00:19.810
从而能够重置这一天

00:00:19.809 --> 00:00:22.910
因此 我们需要完成几项任务

00:00:22.910 --> 00:00:27.274
首先 在这里新建一个文件

00:00:27.274 --> 00:00:30.299
称之为 EntryDetail

00:00:30.300 --> 00:00:33.185
从 react-native 导入 React

00:00:33.185 --> 00:00:37.234
以及其他经常使用的组件

00:00:37.234 --> 00:00:42.929
返回一个 View 其中具有文本“Entry Detail”

00:00:42.929 --> 00:00:46.155
然后确保导出这个组件

00:00:46.155 --> 00:00:47.630
我们已经创建好这个组件

00:00:47.630 --> 00:00:49.340
现在转到 App.js 文件

00:00:49.340 --> 00:00:53.600
首先导入该组件

00:00:53.600 --> 00:00:57.125
来自于 components 文件夹

00:00:57.125 --> 00:01:02.380
我们目前正在渲染这个 Tabs 组件

00:01:02.380 --> 00:01:06.530
但是我们要实现的是另一种导航

00:01:06.530 --> 00:01:11.040
我们不再用到标签页 正如之前提到的 我们要访问路径层级结构

00:01:11.040 --> 00:01:13.795
我们实际上需要 StackNavigator

00:01:13.795 --> 00:01:17.269
因此 从 react-navigation 中

00:01:17.269 --> 00:01:20.329
导入 StackNavigator 函数

00:01:20.329 --> 00:01:22.129
转到这里

00:01:22.129 --> 00:01:26.174
就像 TabNavigator 那样

00:01:26.174 --> 00:01:29.890
我们新建一个变量 叫做 MainNavigator

00:01:29.890 --> 00:01:34.670
设为等于 StackNavigator 的调用结果

00:01:34.670 --> 00:01:39.719
该对象上的属性将为新的路径

00:01:39.719 --> 00:01:41.215
输入 Home

00:01:41.215 --> 00:01:43.180
它将渲染

00:01:43.180 --> 00:01:45.805
Tabs 组件

00:01:45.805 --> 00:01:49.220
我们在渲染这个组件

00:01:49.219 --> 00:01:51.170
然后选择这些标签页

00:01:51.170 --> 00:01:54.310
稍后你就会看到为何这么做很重要

00:01:54.310 --> 00:01:57.290
然后输入 EntryDetail

00:01:57.290 --> 00:02:01.925
Screen 将为我们刚刚创建的这个 EntryDetail 组件

00:02:01.924 --> 00:02:05.789
然后快速设置一些导航选项

00:02:05.790 --> 00:02:08.215
将 headerTintColor 设为 white

00:02:08.215 --> 00:02:11.780
将 headersStyle 的

00:02:11.780 --> 00:02:16.015
backgroundColor 设为 purple

00:02:16.014 --> 00:02:19.549
这里 我们不再渲染 Tabs

00:02:19.550 --> 00:02:22.939
而是渲染 MainNavigator

00:02:22.939 --> 00:02:26.530
看看一切是否正常

00:02:26.530 --> 00:02:28.099
看起来正常

00:02:28.099 --> 00:02:32.719
如果点击这个 什么也没发生

00:02:32.719 --> 00:02:37.310
因为...如果你还记得的话

00:02:37.310 --> 00:02:40.504
我记得是在 History.js 中

00:02:40.504 --> 00:02:46.715
当我们渲染该指标卡片时 我们将其封装在了这个 TouchableOpacity 组件中

00:02:46.715 --> 00:02:49.729
但是我们的做法是不断输出“Pressed!”

00:02:49.729 --> 00:02:53.689
因为现在 react-navigation 已经在控制我们的应用层次结构

00:02:53.689 --> 00:02:58.139
并且在渲染这个 History 组件

00:02:58.139 --> 00:03:00.064
现在我们可以访问的是

00:03:00.064 --> 00:03:06.935
函数 this.props.navigation.navigate

00:03:06.935 --> 00:03:10.300
这样将会转到新的屏幕

00:03:10.300 --> 00:03:14.040
传入的第一个参数将是我们要使用的屏幕

00:03:14.039 --> 00:03:16.819
因为我们要转到 EntryDetail 屏幕

00:03:16.819 --> 00:03:19.969
我们还可以传递一些信息

00:03:19.969 --> 00:03:22.759
我们要在此屏幕上显示的是

00:03:22.759 --> 00:03:26.519
我们想显示更多详情的具体条目

00:03:26.520 --> 00:03:28.730
也就是这个条目 

00:03:28.729 --> 00:03:34.774
它是一个 key 即传递给 renderItem 的第三个参数

00:03:34.775 --> 00:03:36.800
现在

00:03:36.800 --> 00:03:38.265
如果一切正常的话

00:03:38.264 --> 00:03:42.004
当我点击这个时

00:03:42.004 --> 00:03:45.664
应该能转到这个新的 EntryDetail 屏幕

00:03:45.664 --> 00:03:52.044
你会发现 标题是紫色 因为我们在这里这么设置了

00:03:52.044 --> 00:03:56.149
着色是白色 也就是这个箭头

00:03:56.150 --> 00:04:01.129
现在 我不再希望输出 Entry Detail

00:04:01.129 --> 00:04:04.387
而是显示具体的 ID

00:04:04.387 --> 00:04:08.550
即传递的具体条目 ID

00:04:08.550 --> 00:04:10.100
实现方式是…

00:04:10.099 --> 00:04:18.969
有点长 输入 this.props.navigation.state.params.entryId

00:04:18.970 --> 00:04:21.155
看看应用显示效果

00:04:21.154 --> 00:04:24.704
当我们转到特定的屏幕时

00:04:24.704 --> 00:04:27.829
出现了 Entry Detail

00:04:27.829 --> 00:04:30.979
并且出现了要从 react store 中获取

00:04:30.980 --> 00:04:35.000
并显示在这里的数据的具体键

