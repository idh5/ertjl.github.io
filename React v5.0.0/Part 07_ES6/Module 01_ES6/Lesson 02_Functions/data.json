{
  "data": {
    "lesson": {
      "id": 196650,
      "key": "3925704a-be38-4b70-8c8b-a4a812b6a309",
      "title": "Functions",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Functions are at the heart of JavaScript! With ES6, functions are getting some much-needed improvements. In this lesson, you'll learn a number of new things including arrow functions and classes.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/3925704a-be38-4b70-8c8b-a4a812b6a309/196650/1516780219628/Functions%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/3925704a-be38-4b70-8c8b-a4a812b6a309/196650/1516780204339/Functions%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 213353,
          "key": "8e1cfa11-b537-4d12-8654-76baf56957e7",
          "title": "Updates to Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8e1cfa11-b537-4d12-8654-76baf56957e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232931,
              "key": "7aa1c84c-dac4-4a29-a296-01ec858319e1",
              "title": "Updates to Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CCfficj6zG0",
                "china_cdn_id": "CCfficj6zG0.mp4"
              }
            }
          ]
        },
        {
          "id": 257562,
          "key": "a85361fb-7015-41ef-a505-abf513873fbd",
          "title": "Arrow Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a85361fb-7015-41ef-a505-abf513873fbd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257568,
              "key": "3713a7db-672b-4e46-b47a-88294e273ed3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Functions are one of the primary data structures in JavaScript; they've been around _forever_.\n\n## Arrow functions\n\nES6 introduces a new kind of function called the **arrow function**. Arrow functions are very similar to regular functions in behavior, but are quite different syntactically. The following code takes a list of names and converts each one to uppercase using a regular function:\n\n```js\nconst upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(function(name) { \n  return name.toUpperCase();\n});\n```\n\nThe code below does the same thing _except_ instead of passing a regular function to the `map()` method, it passes an arrow function. Notice the _arrow_ in the arrow function ( `=>` ) in the code below:\n\n```js\nconst upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(\n  name => name.toUpperCase()\n);\n```\n\nThe only change to the code above is the code inside the `map()` method. It takes a regular function and changes it to use an arrow function.\n\n> **NOTE:** Not sure how `map()` works? It's a method on the Array prototype. You pass a function to it, and it calls that function once on every element in the array. It then gathers the returned values from each function call and makes a new array with those results. For more info, check out [MDN's documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\n## Convert a function to an arrow function\n\n```js\nconst upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(function(name) { \n  return name.toUpperCase();\n});\n```\n\nWith the function above, there are only a few steps for converting the existing \"normal\" function into an arrow function.\n\n* remove the `function` keyword\n* remove the parentheses\n* remove the opening and closing curly braces\n* remove the `return` keyword\n* remove the semicolon\n* add an arrow ( `=>` ) between the parameter list and the function body",
              "instructor_notes": ""
            },
            {
              "id": 257583,
              "key": "723ebd59-04dd-489b-b0c3-e080af5ad332",
              "title": "Convert a Function to an Arrow Function",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">Converting a normal function into an arrow function.</div>",
              "video": {
                "youtube_id": "CM4j786p3Vs",
                "china_cdn_id": "CM4j786p3Vs.mp4"
              }
            },
            {
              "id": 257597,
              "key": "a099f0c8-d61c-4bb8-b37e-ea042ec2e503",
              "title": "Arrow Function Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a099f0c8-d61c-4bb8-b37e-ea042ec2e503",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the following code:\n\n```js\nconst names = ['Afghanistan', 'Aruba', 'Bahamas', 'Chile', 'Fiji', 'Gabon', 'Luxembourg', 'Nepal', 'Singapore', 'Uganda', 'Zimbabwe'];\n\nconst longNames = names.filter(function(name) {\n  return name.length > 6;\n});\n```\n\nWhich of the following choices does the same thing, but replaces `.filter()`'s function with an arrow function?",
                "answers": [
                  {
                    "id": "a1484684437693",
                    "text": "const longNames = names.filter( function(name)  => return name.length > 6; );",
                    "is_correct": false
                  },
                  {
                    "id": "a1484684706076",
                    "text": "const longNames = names.filter( return name.length > 6 );",
                    "is_correct": false
                  },
                  {
                    "id": "a1484684706645",
                    "text": "const longNames = names.filter( name => {name.length > 6} );",
                    "is_correct": false
                  },
                  {
                    "id": "a1484684707191",
                    "text": "const longNames = names.filter( name => name.length > 6 );",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 257585,
          "key": "1bead0d5-5529-41ce-8202-eef6c8c2cad5",
          "title": "Using Arrow Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1bead0d5-5529-41ce-8202-eef6c8c2cad5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257608,
              "key": "32a55a96-247b-46b1-8470-ff3d0d936368",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Regular functions can be either **function declarations** or **function expressions**, however arrow functions are _always_ **expressions**. In fact, their full name is \"arrow function expressions\", so they can only be used where an expression is valid. This includes being:\n\n* stored in a variable,\n* passed as an argument to a function,\n* and stored in an object's property.\n\nOne confusing syntax is when an arrow function is stored in a variable.\n\n```js\nconst greet = name => `Hello ${name}!`;\n```\n\nIn the code above, the arrow function is stored in the `greet` variable and you'd call it like this:\n\n```js\ngreet('Asser');\n```\n> **Returns:** Hello Asser!\n\n## Parentheses and arrow function parameteres\n\nYou might have noticed the arrow function from the `greet()` function looks like this:\n\n```js\nname => `Hello ${name}!` \n```\n\nIf you recall, the parameter list appears before the arrow function's arrow (i.e. `=>`). If there's only **one** parameter in the list, then you can write it just like the example above. But, if there are **two or more** items in the parameter list, or if there are **zero** items in the list, then you need to wrap the list in parentheses:\n\n```js\n// empty parameter list requires parentheses\nconst sayHi = () => console.log('Hello Udacity Student!');\nsayHi();\n```\n> **Prints:** Hello Udacity Student!\n\n```js\n// multiple parameters requires parentheses\nconst orderIceCream = (flavor, cone) => console.log(`Here's your ${flavor} ice cream in a ${cone} cone.`);\norderIceCream('chocolate', 'waffle');\n```\n> **Prints:** Here's your chocolate ice cream in a waffle cone.",
              "instructor_notes": ""
            },
            {
              "id": 257618,
              "key": "51d59567-f53f-4398-bf2a-61997fa98f5f",
              "title": "Parentheses in Arrow Functions",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "51d59567-f53f-4398-bf2a-61997fa98f5f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following choices have correctly formatted arrow functions?",
                "answers": [
                  {
                    "id": "a1484686169266",
                    "text": "setTimeout(() => {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('starting the test');<br>&nbsp;&nbsp;&nbsp;&nbsp;test.start();<br>}, 2000);",
                    "is_correct": true
                  },
                  {
                    "id": "a1484686192072",
                    "text": "setTimeout( _ => {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('starting the test');<br>&nbsp;&nbsp;&nbsp;&nbsp;test.start();<br>}, 2000);",
                    "is_correct": true
                  },
                  {
                    "id": "a1484686193023",
                    "text": "const vowels = 'aeiou'.split('');<br>const bigVowels = vowels.map( (letter) => letter.toUpperCase() );",
                    "is_correct": true
                  },
                  {
                    "id": "a1484686193816",
                    "text": "const vowels = 'aeiou'.split('');<br>const bigVowels = vowels.map( letter => letter.toUpperCase() );",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 257610,
              "key": "afc3147b-fecd-4b91-8760-5f867d842881",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Concise and block body syntax\n\nAll of the arrow functions we've been looking at have only had a single expression as the function body:\n\n```js\nconst upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(\n  name => name.toUpperCase()\n);\n```\n\nThis format of the function body is called the *\"concise body syntax\"*. The concise syntax:\n\n* has no curly braces surrounding the function body\n* and automatically returns the expression.\n\nIf you need more than just a single line of code in your arrow function's body, then you can use the *\"block body syntax\"*.\n\n```js\nconst upperizedNames = ['Farrin', 'Kagure', 'Asser'].map( name => {\n  name = name.toUpperCase();\n  return `${name} has ${name.length} characters in their name`;\n});\n```\n\nImportant things to keep in mind with the block syntax:\n\n* it uses curly braces to wrap the function body\n* and a `return` statement needs to be used to actually return something from the function.",
              "instructor_notes": ""
            },
            {
              "id": 257639,
              "key": "e15ebe7d-9ad3-481d-9e6a-439d9cedb6c8",
              "title": "Return and Curly Braces",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e15ebe7d-9ad3-481d-9e6a-439d9cedb6c8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Using your knowledge of how arrow functions work with automatic returns and curly braces, which of the following choices have correctly formatted arrow functions?",
                "answers": [
                  {
                    "id": "a1484686650389",
                    "text": "const colors = ['red', 'blue', 'green', 'yellow', 'orange', 'black'];<br><br>const crazyColors = colors.map( color => {<br>&nbsp;&nbsp;&nbsp;&nbsp;const jumble = color.split('').reverse();<br>&nbsp;&nbsp;&nbsp;&nbsp;return jumble.join('') + '!';<br>});",
                    "is_correct": true
                  },
                  {
                    "id": "a1484686718784",
                    "text": "const colors = ['red', 'blue', 'green', 'yellow', 'orange', 'black'];<br><br>const crazyColors = colors.map( color => {<br>&nbsp;&nbsp;&nbsp;&nbsp;color.split('').reverse().join('') + '!';<br>});",
                    "is_correct": false
                  },
                  {
                    "id": "a1484686719393",
                    "text": "const colors = ['red', 'blue', 'green', 'yellow', 'orange', 'black'];<br>const crazyColors = colors.map( color => return color.split('').reverse().join('') + '!' );",
                    "is_correct": false
                  },
                  {
                    "id": "a1484686719921",
                    "text": "const colors = ['red', 'blue', 'green', 'yellow', 'orange', 'black'];<br>const crazyColors = colors.map( color => color.split('').reverse().join('') + '!' );",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 257657,
              "key": "a7d5da3b-79fb-42dd-9577-2b463e0637e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So arrow functions are awesome!\n\n* The syntax is a lot shorter,\n* it's easier to write and read short, single-line functions,\n* and they automatically return when using the concise body syntax!\n\n> **WARNING:** Everything's not all ponies and rainbows though, and there are definitely times when you might _not_ want to use an arrow function. So before you wipe from your memory how to write a traditional function, check out these implications:\n\n> * there's a gotcha with the `this` keyword in arrow functions\n>  * go to the next lesson to find out the details!\n> * arrow functions are only _expressions_\n>  * there's no such thing as an arrow function declaration\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 261214,
          "key": "271eee24-ae2a-4fe2-981e-fd59193788be",
          "title": "Quiz: Convert Function into an Arrow Function (2-1)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "271eee24-ae2a-4fe2-981e-fd59193788be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261215,
              "key": "5e6b76f8-9a5b-459e-a133-8e59ea34a715",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nConvert the function passed to the `map()` method into an arrow function.\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 261216,
              "key": "892c5160-963e-422b-a4de-78d22409eeb6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "892c5160-963e-422b-a4de-78d22409eeb6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6106030124695552",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Convert Function into an Arrow Function (2-1)\n */\n\n// convert to an arrow function\nconst squares = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(square) {\n\treturn square * square;\n});\n\nconsole.log(...squares);\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 196709,
          "key": "92e6caba-43ba-4089-9821-982f22069b73",
          "title": "Arrow Functions Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "92e6caba-43ba-4089-9821-982f22069b73",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232932,
              "key": "e9b77df8-32ae-4cf0-8293-3f7d1451eae7",
              "title": "Arrow Functions Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8xOKUtvI1lc",
                "china_cdn_id": "8xOKUtvI1lc.mp4"
              }
            }
          ]
        },
        {
          "id": 213395,
          "key": "9cf7a128-1570-4e8e-97b8-047b85a1a122",
          "title": "Arrow Functions and the \"this\" Keyword",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9cf7a128-1570-4e8e-97b8-047b85a1a122",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232933,
              "key": "0364deff-06e0-46f3-b3da-2668e3c44311",
              "title": "Arrow Functions and the \"this\" Keyword",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JCDcj_tKnmY",
                "china_cdn_id": "JCDcj_tKnmY.mp4"
              }
            }
          ]
        },
        {
          "id": 257659,
          "key": "654cbc3e-5081-49e3-a17e-86198de93db6",
          "title": "\"this\" and Regular Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "654cbc3e-5081-49e3-a17e-86198de93db6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261143,
              "key": "68f23476-591b-4a15-a46b-38c744bf8eac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To get a handle on how `this` works differently with arrow functions, let's do a quick recap of how `this` works in a standard function. If you have a solid grasp of how `this` works already, feel free to [jump over this section](https://classroom.udacity.com/courses/ud356/lessons/3925704a-be38-4b70-8c8b-a4a812b6a309/concepts/32f53f68-4b31-40fb-b136-4eda28b8ff57).\n\nThe value of the `this` keyword is based completely on how its function (or method) is called. `this` could be any of the following:\n\n---\n\n### 1. A new object\n\nIf the function is called with `new`:\n\n```js\nconst mySundae = new Sundae('Chocolate', ['Sprinkles', 'Hot Fudge']); \n```\n\nIn the code above, the value of `this` inside the `Sundae` constructor function is a new object because it was called with `new`.\n\n---\n\n### 2. A specified object\n\nIf the function is invoked with `call`/`apply`:\n\n```js\nconst result = obj1.printName.call(obj2);\n```\n\nIn the code above, the value of `this` inside `printName()` will refer to `obj2` since the first parameter of `call()` is to explicitly set what `this` refers to.\n\n---\n\n### 3. A context object\n\nIf the function is a method of an object:\n\n```js\ndata.teleport();\n```\n\nIn the code above, the value of `this` inside `teleport()` will refer to `data`.\n\n---\n\n### 4. The global object or undefined\n\nIf the function is called with no context:\n\n```js\nteleport();\n```\n\nIn the code above, the value of `this` inside `teleport()` is either the global object or, if in strict mode, it's `undefined`.\n\n---\n\n> **TIP: ** `this` in JavaScript is a complicated topic. We just did a quick overview, but for an in-depth look at how `this` is determined, check out [this All Makes Sense Now!](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md) from Kyle Simpson's book series [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/README.md). ",
              "instructor_notes": ""
            },
            {
              "id": 261144,
              "key": "8ff05581-2c1c-4e22-838a-8d66169e631e",
              "title": "`this` and Regular Functions 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8ff05581-2c1c-4e22-838a-8d66169e631e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the value of `this` inside the `Train` constructor function below?\n\n```js\nconst redTrain = new Train('red');\n```",
                "answers": [
                  {
                    "id": "a1485273574059",
                    "text": "the window object",
                    "is_correct": false
                  },
                  {
                    "id": "a1485273623417",
                    "text": "a new object",
                    "is_correct": true
                  },
                  {
                    "id": "a1485273624416",
                    "text": "undefined",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 261145,
              "key": "872676ca-9990-49bc-8b94-a6b0862cd792",
              "title": "`this` and Regular Functions 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "872676ca-9990-49bc-8b94-a6b0862cd792",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the value of `this` inside the `increaseSpeed()` function below?\n\n```js\nconst redTrain = new Train('red');\nredTrain.increaseSpeed(25);\n```",
                "answers": [
                  {
                    "id": "a1485273749391",
                    "text": "the window object",
                    "is_correct": false
                  },
                  {
                    "id": "a1485273786245",
                    "text": "a new object",
                    "is_correct": false
                  },
                  {
                    "id": "a1485273787022",
                    "text": "the redTrain object",
                    "is_correct": true
                  },
                  {
                    "id": "a1485273787846",
                    "text": "undefined",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 257660,
          "key": "32f53f68-4b31-40fb-b136-4eda28b8ff57",
          "title": "\"this\" and Arrow Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "32f53f68-4b31-40fb-b136-4eda28b8ff57",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261146,
              "key": "f97df5f7-766a-46d8-add7-db6b1cd50061",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "With regular functions, the value of `this` is set based on _how the function is called_. With arrow functions, the value of `this` is based on _the function's surrounding context_. In other words, the value of `this` _inside_ an arrow function is the same as the value of `this` _outside_ the function.\n\nLet's check out an example with `this` in regular functions and then look at how arrow functions will work.\n\n```js\n// constructor\nfunction IceCream() {\n  this.scoops = 0;\n}\n\n// adds scoop to ice cream\nIceCream.prototype.addScoop = function() {\n  setTimeout(function() {\n    this.scoops++;\n    console.log('scoop added!');\n  }, 500);\n};\n\nconst dessert = new IceCream();\ndessert.addScoop();\n```\n> **Prints:**<br>\nscoop added!\n\nAfter running the code above, you'd _think_ that `dessert.scoops` would be `1` after half a millisecond. But, unfortunately, it's not:\n\n```js\nconsole.log(dessert.scoops);\n```\n\n> **Prints:**<br>\n0\n\nCan you tell why?\n\nThe function passed to `setTimeout()` is called without `new`, without `call()`, without `apply()`, and without a context object. That means the value of `this` inside the function is the global object and **NOT** the `dessert` object. So what actually happened was that a new `scoops` variable was created (with a default value of `undefined`) and was then incremented (`undefined + 1` results in `NaN`):\n\n```js\nconsole.log(scoops);\n```\n\n> **Prints:**<br>\nNaN\n\nOne way around this is to use closure:\n\n```js\n// constructor\nfunction IceCream() {\n  this.scoops = 0;\n}\n\n// adds scoop to ice cream\nIceCream.prototype.addScoop = function() {\n  const cone = this; // sets `this` to the `cone` variable\n  setTimeout(function() {\n    cone.scoops++; // references the `cone` variable\n    console.log('scoop added!');\n  }, 0.5);\n};\n\nconst dessert = new IceCream();\ndessert.addScoop();\n```\n\nThe code above _will_ work because instead of using `this` inside the function, it sets the `cone` variable to `this` and then looks up the `cone` variable when the function is called. This works because it's using the value of the `this` outside the function. So if we check the number of scoops in our dessert right now, we'll see the correct value of `1`:\n\n```js\nconsole.log(dessert.scoops);\n```\n\n> **Prints:**<br>\n1",
              "instructor_notes": ""
            },
            {
              "id": 261223,
              "key": "00501450-82a8-47d6-b531-b37b669f57d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Well that's exactly what arrow functions do, so let's replace the function passed to `setTimeout()` with an arrow function:\n\n```js\n// constructor\nfunction IceCream() {\n  this.scoops = 0;\n}\n\n// adds scoop to ice cream\nIceCream.prototype.addScoop = function() {\n  setTimeout(() => { // an arrow function is passed to setTimeout\n    this.scoops++;\n    console.log('scoop added!');\n  }, 0.5);\n};\n\nconst dessert = new IceCream();\ndessert.addScoop();\n```\n\nSince arrow functions inherit their `this` value from the surrounding context, this code works!\n\n```js\nconsole.log(dessert.scoops);\n```\n\n> **Prints:**<br>\n> 1\n\nWhen `addScoop()` is called, the value of `this` _inside_ `addScoop()` refers to `dessert`. Since an arrow function is passed to `setTimeout()`, it's using its surrounding context to determine what `this` refers to inside itself. So since `this` _outside_ of the arrow function refers to `dessert`, the value of `this` _inside_ the arrow function will also refer to `dessert`.\n\nNow what do you think would happen if we changed the `addScoop()` method to an arrow function?\n\n```js\n// constructor\nfunction IceCream() {\n    this.scoops = 0;\n}\n\n// adds scoop to ice cream\nIceCream.prototype.addScoop = () => { // addScoop is now an arrow function\n  setTimeout(() => {\n    this.scoops++;\n    console.log('scoop added!');\n  }, 0.5);\n};\n\nconst dessert = new IceCream();\ndessert.addScoop();\n```\n\nYeah, this doesn't work for the same reason - arrow functions inherit their `this` value from their surrounding context. Outside of the `addScoop()` method, the value of `this` is the global object. So if `addScoop()` is an arrow function, the value of `this` _inside_ `addScoop()` is the global object. Which then makes the value of `this` in the function passed to `setTimeout()` _also_ set to the global object!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 257661,
          "key": "2444913e-a976-4d3e-aafc-f1d60c93b23f",
          "title": "Default Function Parameters",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2444913e-a976-4d3e-aafc-f1d60c93b23f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261147,
              "key": "29fa3ac9-6738-4a9f-9221-9287a18f6309",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Take a look at this code:\n\n```js\nfunction greet(name, greeting) {\n  name = (typeof name !== 'undefined') ?  name : 'Student';\n  greeting = (typeof greeting !== 'undefined') ?  greeting : 'Welcome';\n\n  return `${greeting} ${name}!`;\n}\n\ngreet(); // Welcome Student!\ngreet('James'); // Welcome James!\ngreet('Richard', 'Howdy'); // Howdy Richard!\n```\n> **Returns:**<br>\nWelcome Student!<br>\nWelcome James!<br>\nHowdy Richard!\n\nWhat is all that horrible mess in the first two lines of the `greet()` function? All of that is there to provide default values for the function if the required arguments aren't provided. It's pretty ugly, though...\n\nFortunately, ES6 has introduced a new way to create defaults. It's called _default function parameters_.\n\n## Default function parameters\n\n**Default function parameters** are quite easy to read since they're placed in the function's parameter list:\n\n```js\nfunction greet(name = 'Student', greeting = 'Welcome') {\n  return `${greeting} ${name}!`;\n}\n\ngreet(); // Welcome Student!\ngreet('James'); // Welcome James!\ngreet('Richard', 'Howdy'); // Howdy Richard!\n```\n> **Returns:**<br>\nWelcome Student!<br>\nWelcome James!<br>\nHowdy Richard!\n\nWow, that's a lot less code, so much cleaner, and significantly easier to read!\n\nTo create a default parameter, you add an equal sign ( `=` ) and then whatever you want the parameter to default to if an argument is not provided. In the code above, both parameters have default values of strings, but they can be any JavaScript type!",
              "instructor_notes": ""
            },
            {
              "id": 261150,
              "key": "ea46de38-b239-4e6d-be99-f0ae456a1c22",
              "title": "Default Function Parameters",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ea46de38-b239-4e6d-be99-f0ae456a1c22",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the following code:\n\n```js\nfunction shippingLabel(name, address) {\n  name = (typeof name !== 'undefined') ? name : 'Richard';\n  address = (typeof address !== 'undefined') ?  address : 'Mountain View';\n  return `To: ${name} In: ${address}`;\n}\n```\n\nWhich of the following choices is the correct way to write the `shippingLabel()` function using default function parameters?",
                "answers": [
                  {
                    "id": "a1485275075943",
                    "text": "function shippingLabel(name = '', address = '') {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \\`To: ${name} In: ${address}\\`;<br>}",
                    "is_correct": false
                  },
                  {
                    "id": "a1485275284483",
                    "text": "function shippingLabel(name, address) {<br>&nbsp;&nbsp;&nbsp;&nbsp;name = name || 'Richard';<br>&nbsp;&nbsp;&nbsp;&nbsp;address = address || 'Mountain View';<br>&nbsp;&nbsp;&nbsp;&nbsp;return \\`To: ${name} In: ${address}\\`;<br>}",
                    "is_correct": false
                  },
                  {
                    "id": "a1485275285034",
                    "text": "function shippingLabel(name, address) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \\`To: ${name} In: ${address}\\`;<br>}",
                    "is_correct": false
                  },
                  {
                    "id": "a1485275285538",
                    "text": "function shippingLabel(name = 'Richard', address = 'Mountain View') {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \\`To: ${name} In: ${address}\\`;<br>}",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 261148,
          "key": "5368e2c8-157b-4c15-8aa8-e06a699e9798",
          "title": "Defaults and Destructuring",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5368e2c8-157b-4c15-8aa8-e06a699e9798",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261153,
              "key": "94d6c9e6-b8ff-4347-98f8-f4742ffe467a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Defaults and destructuring arrays\n\nYou can combine default function parameters with [destructuring](https://classroom.udacity.com/courses/ud356/lessons/42383e89-ac6a-491a-b7d0-198851287bbe/concepts/7c7be588-31e9-4c62-9dad-ecf23f943b19) to create some pretty powerful functions!\n\n```js\nfunction createGrid([width = 5, height = 5]) {\n  return `Generates a ${width} x ${height} grid`;\n}\n\ncreateGrid([]); // Generates a 5 x 5 grid\ncreateGrid([2]); // Generates a 2 x 5 grid\ncreateGrid([2, 3]); // Generates a 2 x 3 grid\ncreateGrid([undefined, 3]); // Generates a 5 x 3 grid\n```\n> **Returns:**<br>\nGenerates a 5 x 5 grid<br>\nGenerates a 2 x 5 grid<br>\nGenerates a 2 x 3 grid<br>\nGenerates a 5 x 3 grid\n\nThe `createGrid()` function expects an array to be passed to it. It uses destructuring to set the first item in the array to the `width` and the second item to be the `height`. If the array is empty or if it has only one item in it, then the default parameters kick in and give the missing parameters a default value of `5`.\n\nThere is a problem with this though, the following code will not work:\n\n```js\ncreateGrid(); // throws an error\n```\n> **Uncaught TypeError:** Cannot read property 'Symbol(Symbol.iterator)' of undefined\n\nThis throws an error because `createGrid()` expects an array to be passed in that it will then destructure. Since the function was called without passing an array, it breaks. But, we can use default function parameters for this!\n\n```js\nfunction createGrid([width = 5, height = 5] = []) {\n  return `Generates a ${width} x ${height} grid`;\n}\n```\n\nSee that new `= []` in the function's parameter? If `createGrid()` is called without any argument then it will use this default empty array. And since the array is empty, there's nothing to destructure into `width` and `height`, so their default values will apply! So by adding `= []` to give the entire parameter a default, the following code will now work:\n\n```js\ncreateGrid(); // Generates a 5 x 5 grid\n```\n> **Returns:** Generates a 5 x 5 grid",
              "instructor_notes": ""
            },
            {
              "id": 261164,
              "key": "b1166f02-696c-4c0b-9c6a-0bfffafadd8d",
              "title": "Destructuring with Array Defaults Parameter",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b1166f02-696c-4c0b-9c6a-0bfffafadd8d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the following code:\n\n```js\nfunction houseDescriptor([houseColor = 'green', shutterColors = ['red']]) {\n  return `I have a ${houseColor} house with ${shutterColors.join(' and ')} shutters`;\n}\n```\n\nWhich of the following choices will run without throwing an error?",
                "answers": [
                  {
                    "id": "a1485277080219",
                    "text": "houseDescriptor('red', ['white', 'gray', 'pink']);",
                    "is_correct": false
                  },
                  {
                    "id": "a1485278612080",
                    "text": "houseDescriptor(['green', ['white', 'gray', 'pink']]);",
                    "is_correct": true
                  },
                  {
                    "id": "a1485278612753",
                    "text": "houseDescriptor(['blue', 'purple']);",
                    "is_correct": false
                  },
                  {
                    "id": "a1485278613201",
                    "text": "houseDescriptor(['green']);",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 261165,
              "key": "8fe8828b-9f89-41d5-8f98-0ea3367de4d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Defaults and destructuring objects\n\nJust like array destructuring with array defaults, a function can have an object be a default parameter and use object destructuring:\n\n```js\nfunction createSundae({scoops = 1, toppings = ['Hot Fudge']}) {\n  const scoopText = scoops === 1 ? 'scoop' : 'scoops';\n  return `Your sundae has ${scoops} ${scoopText} with ${toppings.join(' and ')} toppings.`;\n}\n\ncreateSundae({}); // Your sundae has 1 scoop with Hot Fudge toppings.\ncreateSundae({scoops: 2}); // Your sundae has 2 scoops with Hot Fudge toppings.\ncreateSundae({scoops: 2, toppings: ['Sprinkles']}); // Your sundae has 2 scoops with Sprinkles toppings.\ncreateSundae({toppings: ['Cookie Dough']}); // Your sundae has 1 scoop with Cookie Dough toppings.\n```\n> **Returns:**<br>\nYour sundae has 1 scoop with Hot Fudge toppings.<br>\nYour sundae has 2 scoops with Hot Fudge toppings.<br>\nYour sundae has 2 scoops with Sprinkles toppings.<br>\nYour sundae has 1 scoop with Cookie Dough toppings.\n\nJust like the array example before, if you try calling the function without any arguments it won't work:\n\n```js\ncreateSundae(); // throws an error\n```\n> **Uncaught TypeError:** Cannot match against 'undefined' or 'null'.\n\nWe can prevent this issue by providing a default object to the function:\n\n```js\nfunction createSundae({scoops = 1, toppings = ['Hot Fudge']} = {}) {\n  const scoopText = scoops === 1 ? 'scoop' : 'scoops';\n  return `Your sundae has ${scoops} ${scoopText} with ${toppings.join(' and ')} toppings.`;\n}\n```\n\nBy adding an empty object as the default parameter in case no arguments are provided, calling the function without any arguments now works.\n\n```js\ncreateSundae(); // Your sundae has 1 scoop with Hot Fudge toppings.\n```\n> **Returns:** Your sundae has 1 scoop with Hot Fudge toppings.",
              "instructor_notes": ""
            },
            {
              "id": 261167,
              "key": "6ae998a7-b2d3-416a-ad6c-d2a4d6be6fda",
              "title": "Destructuring With Object Defaults Parameter",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6ae998a7-b2d3-416a-ad6c-d2a4d6be6fda",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the following code:\n\n```js\nfunction houseDescriptor({houseColor = 'green', shutterColors = ['red']} = {}) {\n  return `I have a ${houseColor} house with ${shutterColors.join(' and ')} shutters`;\n}\n```\n\nWhich of the following choices will run without throwing an error?",
                "answers": [
                  {
                    "id": "a1485279245716",
                    "text": "houseDescriptor({houseColor: 'red', shutterColors: ['white', 'gray', 'pink']});",
                    "is_correct": true
                  },
                  {
                    "id": "a1485279263632",
                    "text": "houseDescriptor({houseColor: 'red'});",
                    "is_correct": true
                  },
                  {
                    "id": "a1485279264263",
                    "text": "houseDescriptor();",
                    "is_correct": true
                  },
                  {
                    "id": "a1485279264768",
                    "text": "houseDescriptor({shutterColors: ['orange', 'blue']});",
                    "is_correct": true
                  },
                  {
                    "id": "a1485279265695",
                    "text": "houseDescriptor({});",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 261176,
              "key": "13ba0cf6-fcc5-4858-bff8-6e81e63e24db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Array defaults vs. object defaults\n\nDefault function parameters are a simple addition, but it makes our lives so much easier! One benefit of object defaults over array defaults is how they handle skipped options. Check this out:\n\n```js\nfunction createSundae({scoops = 1, toppings = ['Hot Fudge']} = {}) { … }\n```\n\n...with the `createSundae()` function using object defaults with destructuring, if you want to use the default value for `scoops` but change the `toppings`, then all you need to do is pass in an object with `toppings`:\n\n```js\ncreateSundae({toppings: ['Hot Fudge', 'Sprinkles', 'Caramel']});\n```\n\nCompare the above example with the same function that uses array defaults with destructuring.\n\n```js\nfunction createSundae([scoops = 1, toppings = ['Hot Fudge']] = []) { … }\n```\n\nWith this function setup, if you want to use the default number of `scoops` but change the `toppings`, you'd have to call your function a little...oddly:\n\n```js\ncreateSundae([undefined, ['Hot Fudge', 'Sprinkles', 'Caramel']]);\n```\n\nSince arrays are positionally based, we have to pass `undefined` to \"skip\" over the first argument (and accept the default) to get to the second argument.\n\nUnless you've got a strong reason to use array defaults with array destructuring, we recommend going with object defaults with object destructuring!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 261217,
          "key": "161138bd-464c-4ccf-a7fd-2dded2cca5a4",
          "title": "Quiz: Using Default Function Parameters (2-2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "161138bd-464c-4ccf-a7fd-2dded2cca5a4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261218,
              "key": "39735309-579c-4f2c-8a6f-5677c8d1fe65",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nCreate a `buildHouse()` function that accepts an object as a default parameter. The object should set the following properties to these default values:\n\n* `floors = 1`\n* `color = 'red'`\n* `walls = 'brick'`\n\nThe function should return the following if no arguments or any empty object is passed to the function.\n\n```text\nYour house has 1 floor(s) with red brick walls.\n```\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 261219,
              "key": "99b7e4de-ae4f-4799-ac8c-24e12a896e2a",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "99b7e4de-ae4f-4799-ac8c-24e12a896e2a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5460848022781952",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Using Default Function Parameters (2-2)\n */\n\n// your code goes here\n\n/* tests\nconsole.log(buildHouse()); // Your house has 1 floor(s) with red brick walls.\nconsole.log(buildHouse({})); // Your house has 1 floor(s) with red brick walls.\nconsole.log(buildHouse({floors: 3, color: 'yellow'})); // Your house has 3 floor(s) with yellow brick walls.\n*/\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 257662,
          "key": "5191a936-3491-4a25-a429-5d72acc35163",
          "title": "Class Preview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5191a936-3491-4a25-a429-5d72acc35163",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257668,
              "key": "cc1cd079-9bd3-4d48-b01a-c5f6d997ad31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Class Preview\nHere's a quick peek of what a JavaScript class look like:\n\n```js\nclass Dessert {\n  constructor(calories = 250) {\n    this.calories = calories;\n  }\n}\n\nclass IceCream extends Dessert {\n  constructor(flavor, calories, toppings = []) {\n    super(calories);\n    this.flavor = flavor;\n    this.toppings = toppings;\n  }\n  addTopping(topping) {\n    this.toppings.push(topping);\n  }\n}\n```\n\nNotice the new `class` keyword right in front of `Dessert` and `IceCream`, or the new `extends` keyword in `class IceCream extends Dessert`? What about the call to `super()` inside the IceCream's `constructor()` method.\n\nThere are a bunch of new keywords and syntax to play with when creating JavaScript classes. But, before we jump into the specifics of how to write JavaScript classes, we want to point out a rather confusing part about JavaScript compared with class-based languages.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213396,
          "key": "8f5f9b2b-c38c-47f6-af21-ae90eda29780",
          "title": "JavaScript's Illusion of Classes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8f5f9b2b-c38c-47f6-af21-ae90eda29780",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232934,
              "key": "852d1ff2-f15d-4224-8962-985ec90aa72c",
              "title": "JavaScript's Illusion of Classes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ISfkX503dlQ",
                "china_cdn_id": "ISfkX503dlQ.mp4"
              }
            }
          ]
        },
        {
          "id": 257669,
          "key": "a9105c4c-2ffb-4865-b24e-de09f570eb37",
          "title": "JavaScript Classes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a9105c4c-2ffb-4865-b24e-de09f570eb37",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261199,
              "key": "d5dde60a-6a0b-43a6-8894-574ce5fc6f81",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ES5 \"Class\" Recap\n\nSince ES6 classes are just a mirage and hide the fact that prototypal inheritance is actually going on under the hood, let's quickly look at how to create a \"class\" with ES5 code:\n\n```js\nfunction Plane(numEngines) {\n  this.numEngines = numEngines;\n  this.enginesActive = false;\n}\n\n// methods \"inherited\" by all instances\nPlane.prototype.startEngines = function () {\n  console.log('starting engines...');\n  this.enginesActive = true;\n};\n\nvar richardsPlane = new Plane(1);\nrichardsPlane.startEngines();\n\nvar jamesPlane = new Plane(4);\njamesPlane.startEngines();\n```\n\nIn the code above, the `Plane` function is a *constructor function* that will create new Plane objects. The data for a specific Plane object is passed to the `Plane` function and is set on the object. Methods that are \"inherited\" by each Plane object are placed on the `Plane.prototype` object. Then `richardsPlane` is created with one engine while `jamesPlane` is created with 4 engines. Both objects, however, use the same `startEngines` method to activate their respective engines.\n\nThings to note:\n\n* the constructor function is called with the `new` keyword\n* the constructor function, by convention, starts with a capital letter\n* the constructor function controls the setting of data on the objects that will be created\n* \"inherited\" methods are placed on the constructor function's prototype object\n\nKeep these in mind as we look at how ES6 classes work because, remember, ES6 classes set up all of this for you under the hood.\n\n## ES6 Classes\n\nHere's what that same `Plane` class would look like if it were written using the new `class` syntax:\n\n```js\nclass Plane {\n  constructor(numEngines) {\n    this.numEngines = numEngines;\n    this.enginesActive = false;\n  }\n\n  startEngines() {\n    console.log('starting engines…');\n    this.enginesActive = true;\n  }\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213397,
          "key": "87ea1632-2d15-4185-8c4a-2061dcc71fd3",
          "title": "Convert a Function to a Class",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "87ea1632-2d15-4185-8c4a-2061dcc71fd3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232935,
              "key": "55602fd2-c4d0-44b2-aa52-fd5484b7b054",
              "title": "Convert a Function to a Class",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JvpG_hX0-_0",
                "china_cdn_id": "JvpG_hX0-_0.mp4"
              }
            }
          ]
        },
        {
          "id": 257670,
          "key": "93153a84-fbee-4200-8ec6-6a41830e419f",
          "title": "Working with JavaScript Classes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "93153a84-fbee-4200-8ec6-6a41830e419f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261200,
              "key": "75d2ac9d-5bdc-4ee9-9b4a-0343aeb935bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Class is just a function\n\nJust to prove that there isn't anything special about `class`, check out this code:\n\n```js\nclass Plane {\n  constructor(numEngines) {\n    this.numEngines = numEngines;\n    this.enginesActive = false;\n  }\n\n  startEngines() {\n    console.log('starting engines…');\n    this.enginesActive = true;\n  }\n}\n\ntypeof Plane; // function\n```\n> **Returns:** function\n\nThat's right—it's just a function! There isn't even a new type added to JavaScript.",
              "instructor_notes": ""
            },
            {
              "id": 301421,
              "key": "f0651bfc-f3d5-47db-81bf-47c5f697fc3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️  Where Are All The Commas? ⚠️  \n\n> Did you notice that there aren't any commas between the method definitions in the Class? Commas are not used to separate properties or methods in a Class. If you add them, you'll get a `SyntaxError` of `unexpected token ,`",
              "instructor_notes": ""
            },
            {
              "id": 261202,
              "key": "5aeefaa6-f3f5-4aa3-9f45-46b7aa630cdb",
              "title": "ES6 Classes",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5aeefaa6-f3f5-4aa3-9f45-46b7aa630cdb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the following code:\n\n```js\nclass Animal {\n  constructor(name = 'Sprinkles', energy = 100) {\n    this.name = name;\n    this.energy = energy;\n  }\n\n  eat(food) {\n    this.energy += food / 3;\n  }\n}\n```\n\nWhich of the following are true?",
                "answers": [
                  {
                    "id": "a1485281919970",
                    "text": "The `eat()` method ends up on `Animal.prototype`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1485281974750",
                    "text": "typeof Animal === 'class'",
                    "is_correct": false
                  },
                  {
                    "id": "a1485281975278",
                    "text": "typeof Animal === 'function'",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 261206,
              "key": "8afd56ad-c479-4177-aabd-0f3139ca3108",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Static methods\n\nTo add a static method, the keyword `static` is placed in front of the method name. Look at the `badWeather()` method in the code below.\n\n```js\nclass Plane {\n  constructor(numEngines) {\n    this.numEngines = numEngines;\n    this.enginesActive = false;\n  }\n\n  static badWeather(planes) {\n    for (plane of planes) {\n      plane.enginesActive = false;\n    }\n  }\n\n  startEngines() {\n    console.log('starting engines…');\n    this.enginesActive = true;\n  }\n}\n```\n\nSee how `badWeather()` has the word `static` in front of it while `startEngines()` doesn't? That makes `badWeather()` a method that's accessed directly on the `Plane` class, so you can call it like this:\n\n```js\nPlane.badWeather([plane1, plane2, plane3]);\n```\n\n> **NOTE:** A little hazy on how constructor functions, class methods, or prototypal inheritance works? We've got a course on it! Check out [Object Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015).\n\n## Benefits of classes\n\n1. Less setup\n  * There's a lot less code that you need to write to create a function\n2. Clearly defined constructor function\n  * Inside the class definition, you can clearly specify the constructor function.\n3. Everything's contained\n  * All code that's needed for the class is contained in the class declaration. Instead of having the constructor function in one place, then adding methods to the prototype one-by-one, you can do everything all at once!\n\n## Things to look out for when using classes\n\n1. `class` is not magic\n  * The `class` keyword brings with it a lot of mental constructs from other, class-based languages. It doesn't magically add this functionality to JavaScript classes.\n2. `class` is a mirage over prototypal inheritance\n  * We've said this many times before, but under the hood, a JavaScript class just uses prototypal inheritance.\n3. Using classes requires the use of `new`\n  * When creating a new instance of a JavaScript class, the `new` keyword must be used\n\nFor example,\n\n```js\nclass Toy {\n   ...\n}\n\nconst myToy1 = Toy(); // throws an error\n```\n> **Uncaught TypeError:** Class constructor Toy cannot be invoked without 'new'\n\nbut, adding the `new` keyword fixes the problem\n\n```js\nconst myToy2 = new Toy(); // this works!\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 261207,
          "key": "6b91f1d9-e0e0-43b7-815f-1a9a47b78a1d",
          "title": "Super and Extends",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b91f1d9-e0e0-43b7-815f-1a9a47b78a1d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261208,
              "key": "4f06fd12-a120-4fa0-b116-eba75cd6eb87",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Subclasses with ES6\n\nNow that we've looked at creating classes in JavaScript. Let's use the new `super` and `extends` keywords to extend a class.\n\n```js\nclass Tree {\n  constructor(size = '10', leaves = {spring: 'green', summer: 'green', fall: 'orange', winter: null}) {\n    this.size = size;\n    this.leaves = leaves;\n    this.leafColor = null;\n  }\n\n  changeSeason(season) {\n    this.leafColor = this.leaves[season];\n    if (season === 'spring') {\n      this.size += 1;\n    }\n  }\n}\n\nclass Maple extends Tree {\n  constructor(syrupQty = 15, size, leaves) {\n    super(size, leaves);\n    this.syrupQty = syrupQty;\n  }\n\n  changeSeason(season) {\n    super.changeSeason(season);\n    if (season === 'spring') {\n      this.syrupQty += 1;\n    }\n  }\n\n  gatherSyrup() {\n    this.syrupQty -= 3;\n  }\n}\n\nconst myMaple = new Maple(15, 5);\nmyMaple.changeSeason('fall');\nmyMaple.gatherSyrup();\nmyMaple.changeSeason('spring');\n```\n\nBoth `Tree` and `Maple` are JavaScript classes. The `Maple` class is a \"subclass\" of `Tree` and uses the `extends` keyword to set itself as a \"subclass\". To get from the \"subclass\" to the parent class, the `super` keyword is used. Did you notice that `super` was used in two different ways? In `Maple`'s constructor method, `super` is used as a function. In `Maple`'s `changeSeason()` method, `super` is used as an object!\n\n## Compared to ES5 subclasses\n\nLet's see this same functionality, but written in ES5 code:\n\n```js\nfunction Tree(size, leaves) {\n  this.size = (typeof size === \"undefined\")? 10 : size;\n  const defaultLeaves = {spring: 'green', summer: 'green', fall: 'orange', winter: null};\n  this.leaves = (typeof leaves === \"undefined\")?  defaultLeaves : leaves;\n  this.leafColor;\n}\n\nTree.prototype.changeSeason = function(season) {\n  this.leafColor = this.leaves[season];\n  if (season === 'spring') {\n    this.size += 1;\n  }\n}\n\nfunction Maple (syrupQty, size, leaves) {\n  Tree.call(this, size, leaves);\n  this.syrupQty = (typeof syrupQty === \"undefined\")? 15 : syrupQty;\n}\n\nMaple.prototype = Object.create(Tree.prototype);\nMaple.prototype.constructor = Maple;\n\nMaple.prototype.changeSeason = function(season) {\n  Tree.prototype.changeSeason.call(this, season);\n  if (season === 'spring') {\n    this.syrupQty += 1;\n  }\n}\n\nMaple.prototype.gatherSyrup = function() {\n  this.syrupQty -= 3;\n}\n\nconst myMaple = new Maple(15, 5);\nmyMaple.changeSeason('fall');\nmyMaple.gatherSyrup();\nmyMaple.changeSeason('spring');\n```\n\nBoth this code and the class-style code above achieve the same functionality.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213398,
          "key": "358ada89-6344-4eda-bdec-3ffe27918773",
          "title": "Extending Classes from ES5 to ES6",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "358ada89-6344-4eda-bdec-3ffe27918773",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232936,
              "key": "c338be91-9a76-447f-922e-9d77989e129d",
              "title": "Extending Classes from ES5 to ES6",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b8fEBUFk-Oo",
                "china_cdn_id": "b8fEBUFk-Oo.mp4"
              }
            }
          ]
        },
        {
          "id": 261209,
          "key": "6d5a83b9-159a-458b-83f9-573f7372f874",
          "title": "Working with JavaScript Subclasses",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6d5a83b9-159a-458b-83f9-573f7372f874",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261210,
              "key": "d226819c-bcd9-4a3b-94ff-53e1d8762e00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Working with subclasses\n\nLike most of the new additions, there's a lot less setup code and it's a lot cleaner syntax to create a subclass using `class`, `super`, and `extends`.\n\nJust remember that, under the hood, the same connections are made between functions and prototypes.\n\n### `super` must be called before `this`\n\nIn a subclass constructor function, before `this` can be used, a call to the super class must be made.\n\n```js\nclass Apple {}\nclass GrannySmith extends Apple {\n  constructor(tartnessLevel, energy) {\n    this.tartnessLevel = tartnessLevel; // `this` before `super` will throw an error!\n    super(energy); \n  }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 261211,
              "key": "f2087099-1587-4188-8678-19cdf2fdbbb6",
              "title": "instanceOf Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f2087099-1587-4188-8678-19cdf2fdbbb6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the following code:\n\n```js\nclass Toy {}\nclass Dragon extends Toy {}\nconst dragon1 = new Dragon();\n```\n\nGiven the code above, is the following statement true or false?\n\n```js\ndragon1 instanceof Toy;\n```",
                "answers": [
                  {
                    "id": "a1485284684918",
                    "text": "true",
                    "is_correct": true
                  },
                  {
                    "id": "a1485284732754",
                    "text": "false",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 261212,
              "key": "883c746c-2173-4ede-9907-321aef986f1e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "883c746c-2173-4ede-9907-321aef986f1e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's say that a `Toy` class exists and that a `Dragon` class extends the `Toy` class.\n\nWhat is the correct way to create a `Toy` object from inside the `Dragon` class's `constructor` method?",
                "answers": [
                  {
                    "id": "a1485284836854",
                    "text": "super();",
                    "is_correct": true
                  },
                  {
                    "id": "a1485284856342",
                    "text": "super.call(this);",
                    "is_correct": false
                  },
                  {
                    "id": "a1485284856945",
                    "text": "parent();",
                    "is_correct": false
                  },
                  {
                    "id": "a1485284857401",
                    "text": "Toy();",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 261220,
          "key": "54bdd363-83d7-46e2-81d1-9d1d647a908f",
          "title": "Quiz: Building Classes and Subclasses (2-3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54bdd363-83d7-46e2-81d1-9d1d647a908f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261221,
              "key": "8d486683-555a-46e7-8da5-c589b6b72229",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nCreate a `Bicycle` subclass that extends the `Vehicle` class. The `Bicycle` subclass should override `Vehicle`'s constructor function by changing the default values for `wheels` from `4` to `2` and `horn` from `'beep beep'` to `'honk honk'`.\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 261222,
              "key": "a2d476ce-f0fb-41be-8aed-fc2ea8b15cf2",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a2d476ce-f0fb-41be-8aed-fc2ea8b15cf2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6444210480873472",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Building Classes and Subclasses (2-3)\n */\n\nclass Vehicle {\n\tconstructor(color = 'blue', wheels = 4, horn = 'beep beep') {\n\t\tthis.color = color;\n\t\tthis.wheels = wheels;\n\t\tthis.horn = horn;\n\t}\n\n\thonkHorn() {\n\t\tconsole.log(this.horn);\n\t}\n}\n\n// your code goes here\n\n/* tests\nconst myVehicle = new Vehicle();\nmyVehicle.honkHorn(); // beep beep\nconst myBike = new Bicycle();\nmyBike.honkHorn(); // honk honk\n*/\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 196710,
          "key": "478312f8-cc06-4190-8bb9-f9b4445f1596",
          "title": "Lesson 2 Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "478312f8-cc06-4190-8bb9-f9b4445f1596",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232937,
              "key": "e631456e-0cc0-4d9d-9dce-7acb2489f7b5",
              "title": "Lesson 2 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "x-2IDhoLS_g",
                "china_cdn_id": "x-2IDhoLS_g.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}