{
  "data": {
    "lesson": {
      "id": 196652,
      "key": "2baa2512-b298-4796-aa5a-9135d82ff298",
      "title": "Professional Developer-fu",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "With this massive improvement, not all browsers are able to support this new version of JavaScript. In this lesson, you'll learn about using polyfills and transpiling your ES6 JavaScript code to ES5.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/2baa2512-b298-4796-aa5a-9135d82ff298/196652/1516781002617/Professional%20Developer-fu%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/2baa2512-b298-4796-aa5a-9135d82ff298/196652/1516780987259/Professional%20Developer-fu%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 213367,
          "key": "71e01842-913a-4166-ac72-26d14bff16e4",
          "title": "The Web is Growing Up",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71e01842-913a-4166-ac72-26d14bff16e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232945,
              "key": "25c0db9c-c6c4-45d0-9a2d-ef598ceeb78b",
              "title": "The Web is Growing Up",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ue0FpyoZhts",
                "china_cdn_id": "ue0FpyoZhts.mp4"
              }
            }
          ]
        },
        {
          "id": 257577,
          "key": "17ce250d-ac1d-43de-b994-0c83978b30b8",
          "title": "Old and New Browsers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "17ce250d-ac1d-43de-b994-0c83978b30b8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257579,
              "key": "3bf5af3c-9163-410e-a714-0e781f96bcc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code doesn't work in old browsers\n\nThe code we've been looking at in this course is not supported by older browsers. Older browsers that were developed prior to the release of ES6 were developed to support the version of JavaScript at the time (which was ES5.1). If you try running any ES6 code in an older browser, it won't work.",
              "instructor_notes": ""
            },
            {
              "id": 301414,
              "key": "8c5caed3-65bc-4df1-84f0-44830815b043",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/59012473_ud356-l4-es6-code-safari-error/ud356-l4-es6-code-safari-error.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c5caed3-65bc-4df1-84f0-44830815b043",
              "caption": "_Attempting to run an arrow function in Safari 9, which does not support arrow functions. The result is a syntax error._",
              "alt": "Attempting to run an arrow function in Safari 9, which does not support arrow functions. The result is a syntax error.",
              "width": 784,
              "height": 526,
              "instructor_notes": null
            },
            {
              "id": 257587,
              "key": "3b611cb3-ee49-4ad0-a96d-e7713e496212",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It makes sense that code doesn't work in older browsers that were developed prior to the release of ES6, but there are some browsers that have been released after ES6 that don't support the new JavaScript syntax and functionality yet.\n\nTry using an arrow function in your code and opening it up in IE 11, and it won't work. There'll be an error on the console saying that it doesn't recognize the syntax.",
              "instructor_notes": ""
            },
            {
              "id": 301415,
              "key": "11274705-3af4-47de-a776-1208f581da97",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/59012490_ud356-l4-es6-code-ie-error/ud356-l4-es6-code-ie-error.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/11274705-3af4-47de-a776-1208f581da97",
              "caption": "_Attempting to run an arrow function in MSIE 11, which does not support arrow functions. The result is a syntax error._",
              "alt": "Attempting to run an arrow function in MSIE 11, which does not support arrow functions. The result is a syntax error.",
              "width": 1183,
              "height": 658,
              "instructor_notes": null
            },
            {
              "id": 257590,
              "key": "bc0289f9-a05c-4d70-a309-a2766a40b0ed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Most of us don't think much about the browser and all it can do...until it doesn't work! But really, browser makers have a tough time. Think about HTML, CSS, and JavaScript - these languages are fluid and are always improving. Browser makers have to keep up with all of these changes.\n\n**But how do they know about these changes?**\n\nThey learn (or actually build) the language specifications!\n\nJust like the [World Wide Web Consortium (W3C)](https://www.w3.org/) is the standards body for things like HTML, CSS, and SVG, [Ecma International](https://www.ecma-international.org/) is an industry association that develops and oversees standards like JavaScript and JSON. You can find the specifications for ES6 [here](http://www.ecma-international.org/ecma-262/6.0/index.html).\n\n### Further info\n\nEcma International is an important industry community and definitely worth checking out in more detail:\n\n* https://en.wikipedia.org/wiki/Ecma_International\n* http://www.ecma-international.org/memento/index.html\n\n> **NOTE:** The code we've been looking at in this course is not supported by older browsers. Older browsers that were developed prior to the release of ES6 were developed to support the version of JavaScript at the time (which was ES5.1). If you try running any ES6 code in an older browser, it won't work.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 257592,
          "key": "92284c1e-2cda-438d-837e-ae3571a60e65",
          "title": "ES6 Specification",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "92284c1e-2cda-438d-837e-ae3571a60e65",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257593,
              "key": "8db40268-7a8f-43b5-b2f9-de97e0616426",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The ES6 specification\n\nThe specification (commonly shortened to \"spec\") for ES6 can be found [here](http://www.ecma-international.org/ecma-262/6.0/index.html). The spec lists the set of rules and guidelines on how the language is supposed to function. It doesn't give specific details on _how_ browser makers are supposed to achieve functionality, but it does provide step-by-step instructions on how the language is supposed to work. While making this course, we repeatedly referred to this official spec.\n\nOk, so honestly, it can be a little difficult to decipher some of the cryptic wording of the spec. But when you have a question about ES6, we recommend checking out info on the topic like that provided by the [Mozilla Developer Network](https://developer.mozilla.org) and then also reviewing what the spec actually says. \n",
              "instructor_notes": ""
            },
            {
              "id": 257594,
              "key": "84f8ce97-c47d-4afc-8221-652ccaef21b3",
              "title": "ES6 Specification Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "84f8ce97-c47d-4afc-8221-652ccaef21b3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check out the [ES6 Specification](http://www.ecma-international.org/ecma-262/6.0/index.html). Which section in the spec covers arrow functions?",
                "answers": [
                  {
                    "id": "a1484684892890",
                    "text": "section 6",
                    "is_correct": false
                  },
                  {
                    "id": "a1484684905089",
                    "text": "section 10.3.2",
                    "is_correct": false
                  },
                  {
                    "id": "a1484684909276",
                    "text": "section 14.2",
                    "is_correct": true
                  },
                  {
                    "id": "a1484684913573",
                    "text": "section 18.3.29",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 257595,
          "key": "b3c593b2-e4f6-46d9-9551-e0e56af6a36f",
          "title": "Supported Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b3c593b2-e4f6-46d9-9551-e0e56af6a36f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257598,
              "key": "8b6c6cc1-4661-45dd-a398-4ced2ab95396",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How Can You Know What Features Browsers Support?\n\nWith new language specifications coming out every year and with browsers updating every other month, it can be quite challenging to know what browser supports which language features. Each browser maker (except for Safari) has a website that tracks its development status. Checkout the platform feature updates for each browser:\n\n* Google Chrome - https://www.chromestatus.com/features#ES6\n* Microsoft Edge - https://developer.microsoft.com/en-us/microsoft-edge/platform/status/?q=ES6\n* Mozilla Firefox - https://platform-status.mozilla.org/\n\n> **NOTE:** Safari doesn't have it's own platform status website. Under the hood, though, Safari is powered by the open source browser engine, Webkit. The status for Webkit features can be found [here](https://webkit.org/status/).\n\nThis can be a lot of information to track down. If you prefer a birdseye view of all the feature support for all JavaScript code, check out the ECMAScript Compatibility Table built by [@kangax](https://twitter.com/kangax):\n\n* http://kangax.github.io/compat-table/es6/\n",
              "instructor_notes": ""
            },
            {
              "id": 261421,
              "key": "62fd635e-ab9f-436e-ada9-5873fe053dbf",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5888ff26_es6-compatibility-tables/es6-compatibility-tables.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/62fd635e-ab9f-436e-ada9-5873fe053dbf",
              "caption": "Compatibility table of browser support for ECMAScript features.",
              "alt": null,
              "width": 1220,
              "height": 495,
              "instructor_notes": null
            },
            {
              "id": 257609,
              "key": "783738d6-b662-47c5-b690-99f9a175bc63",
              "title": "Compatibility Table Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "783738d6-b662-47c5-b690-99f9a175bc63",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Looking at the ECMAScript Compatibility Table, what kind of information does the first _colored_ column display? \n",
                "answers": [
                  {
                    "id": "a1484685558934",
                    "text": "The list of up-to-date browsers that support ES6.",
                    "is_correct": false
                  },
                  {
                    "id": "a1484685640302",
                    "text": "The list of all ES6 features.",
                    "is_correct": false
                  },
                  {
                    "id": "a1484685646746",
                    "text": "The status of all ES6 features supported by your current browser.",
                    "is_correct": true
                  },
                  {
                    "id": "a1484685657822",
                    "text": "Links to each browser platform's status for the specific ES6 feature.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 213368,
          "key": "e7375b57-6356-485b-bb74-d23498fd0a40",
          "title": "The Web is Eternal",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e7375b57-6356-485b-bb74-d23498fd0a40",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232949,
              "key": "f25bcf06-2bff-41aa-9893-e600e558f029",
              "title": "The Web is Eternal",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LwdL-8jFCyQ",
                "china_cdn_id": "LwdL-8jFCyQ.mp4"
              }
            }
          ]
        },
        {
          "id": 213369,
          "key": "13d0a1e8-f2ad-45a2-afa6-dedd1f5ccf98",
          "title": "Polyfills",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "13d0a1e8-f2ad-45a2-afa6-dedd1f5ccf98",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232946,
              "key": "27c975ae-92f7-4b52-8e17-31cd5ef21db4",
              "title": "Polyfill Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eC2_Umstx9U",
                "china_cdn_id": "eC2_Umstx9U.mp4"
              }
            }
          ]
        },
        {
          "id": 257612,
          "key": "a97c5af3-a227-4aba-9ea8-98fbecb5acf1",
          "title": "Using Polyfills",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a97c5af3-a227-4aba-9ea8-98fbecb5acf1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257613,
              "key": "112b9a5c-8b3a-46c7-82e0-27d3bd9eb5df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What is a polyfill?\n\n> A polyfill, or polyfiller, is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. \n\nCoined by [Remy Sharp](https://twitter.com/rem) - https://remysharp.com/2010/10/08/what-is-a-polyfill\n\n> We, as developers, should be able to develop with the HTML5 APIs, and scripts can create the methods and objects that should exist. Developing in this future-proof way means as users upgrade, your code doesn't have to change but users will move to the better, native experience cleanly.\nFrom the HTML5 Boilerplate team on polyfills - https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills\n\n## Further research:\n\nhttps://en.wikipedia.org/wiki/Polyfill\n\n## An example polyfill\n\nThe code below is a polyfill for the new ES6 String method, `startsWith()`: \n\n```js\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function (searchString, position) {\n    position = position || 0;\n    return this.substr(position, searchString.length) === searchString;\n  };\n}\n```\n\nAs you can see, a polyfill is just regular JavaScript.\n\nThis code is a simple polyfill (check it out on MDN), but there's also a significantly more robust one, [here](https://github.com/mathiasbynens/String.prototype.startsWith/blob/master/startswith.js)",
              "instructor_notes": ""
            },
            {
              "id": 257615,
              "key": "3a06d71a-44a9-49f8-ace4-f71345d7fd6a",
              "title": "Polyfill Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3a06d71a-44a9-49f8-ace4-f71345d7fd6a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why does the `startsWith()` polyfill begin with the following line?:\n\n```js\nif (!String.prototype.startsWith)\n```",
                "answers": [
                  {
                    "id": "a1484686110824",
                    "text": "Without it, the script would throw an error.",
                    "is_correct": false
                  },
                  {
                    "id": "a1484686131841",
                    "text": "It checks to make sure the `String.prototype` exists.",
                    "is_correct": false
                  },
                  {
                    "id": "a1484686132193",
                    "text": "It avoids overwriting the native `startsWith` method.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 213363,
          "key": "b61048ac-5167-4fe1-93fe-642d652d0ef8",
          "title": "Polyfill Walkthrough",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b61048ac-5167-4fe1-93fe-642d652d0ef8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232947,
              "key": "f020d18a-de58-4d36-b246-98dc9248c94d",
              "title": "Polyfill Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vDmB-gT-U88",
                "china_cdn_id": "vDmB-gT-U88.mp4"
              }
            }
          ]
        },
        {
          "id": 257617,
          "key": "ba4d8f5e-5a98-4f1e-84bd-e460ff26a773",
          "title": "Other Uses for Polyfills",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba4d8f5e-5a98-4f1e-84bd-e460ff26a773",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257619,
              "key": "3e051d84-3d76-4e35-ad6f-242adf7887e0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Polyfills aren't only for patching missing JavaScript features\n\nJavaScript is the language used to create a polyfill, but a polyfill doesn't just patch up missing JavaScript features! There are polyfills for all sorts of browser features:\n\n* SVG\n* Canvas\n* Web Storage (local storage / session storage)\n* Video\n* HTML5 elements\n* Accessibility\n* Web Sockets\n* and many more!\n\nFor a more-complete list of polyfills, check out [this link](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213370,
          "key": "b44f914d-d1f5-489e-b0bd-0c6119b25b29",
          "title": "Transpiling",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b44f914d-d1f5-489e-b0bd-0c6119b25b29",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232948,
              "key": "f93aa2c4-8c91-4b68-917e-b0093f049442",
              "title": "Transpiling Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ku2NATTmgks",
                "china_cdn_id": "Ku2NATTmgks.mp4"
              }
            },
            {
              "id": 257622,
              "key": "62ad0bc7-47c7-48cd-9497-ba16f02fe0ea",
              "title": "Compiler or Transpiler",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "62ad0bc7-47c7-48cd-9497-ba16f02fe0ea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To convert Java to JavaScript, would you use a compiler or a transpiler?",
                "answers": [
                  {
                    "id": "a1484686317209",
                    "text": "a compiler",
                    "is_correct": false
                  },
                  {
                    "id": "a1484686341106",
                    "text": "a transpiler",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 257623,
          "key": "e2141a12-c59a-4d1f-ac39-20e5408d86ee",
          "title": "Using Babel",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e2141a12-c59a-4d1f-ac39-20e5408d86ee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 257624,
              "key": "3e5e0905-876d-45ee-a2e0-5ba3e4254138",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The most popular JavaScript transpiler is called [Babel](https://babeljs.io/).\n\nBabel's original name was slightly more descriptive - 6to5. This was because, originally, Babel converted ES6 code to ES5 code. Now, Babel does a lot more. It'll convert ES6 to ES5, JSX to JavaScript, and Flow to JavaScript.\n\nBefore we look at transpiling code on our computer, let's do a quick test by transpiling some ES6 code into ES5 code directly on the Babel website. Check out [Babel's REPL](http://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=es2015) and paste the following code into the section on the left:\n\n```js\nclass Student {\n  constructor (name, major) {\n    this.name = name;\n    this.major = major;\n  }\n\n  displayInfo() {\n    console.log(`${this.name} is a ${this.major} student.`);\n  }\n}\n\nconst richard = new Student('Richard', 'Music');\nconst james = new Student('James', 'Electrical Engineering');\n```",
              "instructor_notes": ""
            },
            {
              "id": 261417,
              "key": "981da7bc-fc0b-4d62-87f8-d554a71e3267",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5888fc24_babel-es6-to-es5/babel-es6-to-es5.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/981da7bc-fc0b-4d62-87f8-d554a71e3267",
              "caption": "ES6 code on the left that's being transpiled to ES5 code on the right.",
              "alt": null,
              "width": 1518,
              "height": 733,
              "instructor_notes": null
            },
            {
              "id": 257628,
              "key": "560475fe-6e82-4e9d-878d-d7792da9e3d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Transpiling project in repo\n\nIf you check in the [repo for this project](https://github.com/udacity/course-es6/tree/master/lesson-4/walk-through-transpiling), inside the Lesson 4 directory is a little project that's all set up for transpiling ES6 code to ES5 code. There's an \"ES6\" directory that contains the ES6 code we'll be transpiling (using Babel) to ES5 code that will be able to run in every browser.\n",
              "instructor_notes": ""
            },
            {
              "id": 261418,
              "key": "74e76117-4e5f-4d67-b1ac-86edc3cdd52b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5888fd20_es6-code-in-project/es6-code-in-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/74e76117-4e5f-4d67-b1ac-86edc3cdd52b",
              "caption": "Code editor with ES6 code that will be transpiled.",
              "alt": null,
              "width": 897,
              "height": 527,
              "instructor_notes": null
            },
            {
              "id": 257635,
              "key": "e68d1ce5-0c37-45c6-8474-c1af83d95e08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The way Babel transforms code from one language to another is through plugins. There are plugins that transform ES6 arrow functions to regular ES5 functions (the [ES2015 arrow function plugin](http://babeljs.io/docs/plugins/transform-es2015-arrow-functions/)). There are plugins that transform ES6 template literals to regular string concatenation (the [ES2015 template literals transform](http://babeljs.io/docs/plugins/transform-es2015-template-literals/)). For a full list, check out [all of Babel's plugins](http://babeljs.io/docs/plugins/).\n\nNow, you're busy and you don't want to have to sift through a big long list of plugins to see which ones you need to convert your code from ES6 to ES5. So instead of having to use a bunch of individual plugins, Babel has **presets** which are groups of plugins bundled together. So instead of worrying about which plugins you need to install, we'll just use the [ES2015 preset](http://babeljs.io/docs/plugins/preset-es2015/) that is a collection of all the plugins we'll need to convert all of our ES6 code to ES5.\n\nYou can see that the project has a `.babelrc` file. This is where you'd put all of the plugins and/or presets that the project will use. Since we want to convert all ES6 code, we've set it up so that it has the ES2015 preset.",
              "instructor_notes": ""
            },
            {
              "id": 261420,
              "key": "5bac53bb-9df4-428e-b0a1-43e9a173381f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5888fdb4_es6-preset-in-project/es6-preset-in-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5bac53bb-9df4-428e-b0a1-43e9a173381f",
              "caption": "Code editor with `.babelrc` file that has ES2015 preset listed.",
              "alt": null,
              "width": 897,
              "height": 527,
              "instructor_notes": null
            },
            {
              "id": 257638,
              "key": "1a47eb6a-0a2c-4e19-a234-4a23a230faec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> **WARNING:** Babel uses both [Node](https://nodejs.org/) and [NPM](https://www.npmjs.com/) to distribute its plugins. So before you can install anything, make sure you have both of these tools installed:\n* install [Node](https://nodejs.org/) (which will automatically install NPM)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213364,
          "key": "b91e41ba-c30a-4772-868a-e57dd96e0684",
          "title": "Transpiling Walkthrough",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b91e41ba-c30a-4772-868a-e57dd96e0684",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232950,
              "key": "5170f82c-8af6-40ba-9934-e31e64b64042",
              "title": "Transpiling Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QGE5Emfg1hI",
                "china_cdn_id": "QGE5Emfg1hI.mp4"
              }
            }
          ]
        },
        {
          "id": 261404,
          "key": "d31889ae-7903-487d-994a-9f113feb8525",
          "title": "Transpiling Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d31889ae-7903-487d-994a-9f113feb8525",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 261407,
              "key": "15736fac-6071-4b84-b0bb-8ee6c37d36c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> **NOTE**: As of the creation of this course (circa Winter 2016), most of ES6 is supported by the current set of browsers. But that's \"most\", not \"all\", unfortunately. And that's also referring to \"current\" browsers. There are plenty of older browsers that do not support many, if any, of the new ES6 additions. However, it is safe to say that pretty much every browser supports the previous version of the language (ES5.1).",
              "instructor_notes": ""
            },
            {
              "id": 261426,
              "key": "69dd72fd-01e3-42c2-9587-bd70fb0ac135",
              "title": "Transpiling ES6 to ES5",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">Transpiling ES6 code to ES5 code.</div>",
              "video": {
                "youtube_id": "ihtUq_Ve0fk",
                "china_cdn_id": "ihtUq_Ve0fk.mp4"
              }
            },
            {
              "id": 261405,
              "key": "57671a32-3047-4d8c-b36c-08c14e295a39",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Transpiling Recap\n\nIt's important to stay on top of all the changes JavaScript is going through. The best way to do that is to start making use of the new features that are added. The problem is that not all browsers support these new features. So to have your cake and eat it too, you can write in ES6 and then use a transpiler to convert it to ES5 code. This lets you transform your project's code base to the newest version of the language while still letting it run everywhere. Then, once all of the browsers your app has to run on fully support ES6 code, you can stop transpiling your code and just serve the straight ES6 code, directly!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196716,
          "key": "a6b9bd3d-e712-4535-82f2-039fbcf7b59c",
          "title": "Course Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a6b9bd3d-e712-4535-82f2-039fbcf7b59c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232951,
              "key": "796472f7-385d-468b-9208-f92d16ca7fa1",
              "title": "Course Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hXddrbk5LF8",
                "china_cdn_id": "hXddrbk5LF8.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}