WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.345
Now that our state is living inside of our component,

00:00:03.345 --> 00:00:06.120
the next step we want to take is we want to make it so,

00:00:06.120 --> 00:00:09.405
whenever we click on one of these Delete buttons here,

00:00:09.404 --> 00:00:13.709
our application will delete the specific user that we clicked on.

00:00:13.710 --> 00:00:17.234
So, how we're going to do this is because our state

00:00:17.234 --> 00:00:21.179
is living up here inside of our AppComponent.

00:00:21.179 --> 00:00:25.769
We're going to add a method to our AppComponent which is responsible for taking

00:00:25.769 --> 00:00:31.134
in the specific contact and then deleting that contact from our contacts array.

00:00:31.135 --> 00:00:33.510
And then in order to get that method down to

00:00:33.509 --> 00:00:36.604
our ListContacts component so we could hook it up to the button,

00:00:36.604 --> 00:00:38.754
we will pass it in as a prop.

00:00:38.755 --> 00:00:40.140
Now, I know that was a lot of words.

00:00:40.140 --> 00:00:42.130
Let's go ahead and see it in action.

00:00:42.130 --> 00:00:47.535
So, what we want to do is let's create a removeContact method up here.

00:00:47.534 --> 00:00:52.619
And again the reason that the removeContact method is living inside of

00:00:52.619 --> 00:00:57.929
our AppComponent and not our ListContacts component is because that's where the data is.

00:00:57.929 --> 00:01:00.409
The data is living inside of our AppComponents.

00:01:00.409 --> 00:01:04.575
So, if we want to create a method which modifies that data,

00:01:04.575 --> 00:01:06.960
we need to do it wherever our state is living,

00:01:06.959 --> 00:01:09.015
which currently is the AppComponent.

00:01:09.015 --> 00:01:12.090
So, what this method is going to do is,

00:01:12.090 --> 00:01:14.760
it will take in an actual contact and

00:01:14.760 --> 00:01:18.060
then now we want to modify the state of our component.

00:01:18.060 --> 00:01:20.295
To do that, we can use

00:01:20.295 --> 00:01:24.560
the setState method which is going to be located on the component instance.

00:01:24.560 --> 00:01:26.805
Now, there's two ways to use setState.

00:01:26.805 --> 00:01:28.230
The first way is,

00:01:28.230 --> 00:01:30.540
you pass an object and then every

00:01:30.540 --> 00:01:36.175
key on this object will be merged with the current state.

00:01:36.174 --> 00:01:40.334
The other way to you setState is by passing it a function.

00:01:40.334 --> 00:01:44.549
So, here we're passing it a function which is returning an object and

00:01:44.549 --> 00:01:46.259
this object that we're returning from

00:01:46.260 --> 00:01:49.140
the function is going to be merged with the current state.

00:01:49.140 --> 00:01:51.885
So, what are the differences between these two?

00:01:51.885 --> 00:01:55.537
Well, when you're updating the state based of the previous state,

00:01:55.537 --> 00:01:58.155
like what we're going to be doing inside of this function,

00:01:58.155 --> 00:02:01.254
we'll need to use the callbacks at state.

00:02:01.254 --> 00:02:05.149
That's because, as the first argument to this function,

00:02:05.150 --> 00:02:08.265
we're going to be past the current state.

00:02:08.264 --> 00:02:12.854
If you're not updating the state of the component based on the current state,

00:02:12.854 --> 00:02:15.599
then you can use the object setState.

00:02:15.599 --> 00:02:19.125
But it's my preference to always just use

00:02:19.125 --> 00:02:21.419
the functional setState because I never really

00:02:21.419 --> 00:02:24.074
like to think about whether I should use one or the other.

00:02:24.074 --> 00:02:27.269
Instead, I just always use functional setState.

00:02:27.270 --> 00:02:29.225
Now that's a preference, you can use either one.

00:02:29.224 --> 00:02:33.090
But again, if you're updating the state of your component based on the previous state,

00:02:33.090 --> 00:02:36.344
then you always need to use functional setState

00:02:36.344 --> 00:02:40.365
because it passes you the current state of your component.

00:02:40.365 --> 00:02:45.330
So, now what we'll do is we want to update contacts and what we want the new contacts to

00:02:45.330 --> 00:02:50.650
be is the result of calling currentState.contact.filter.

00:02:50.650 --> 00:02:54.960
So, we want to filter out a specific contact and the contact we want to filter

00:02:54.960 --> 00:03:01.580
out is where the id does not equal the id of the contact that we passed in.

00:03:01.580 --> 00:03:04.225
So, if you've never used filter before, what this is going to do is,

00:03:04.224 --> 00:03:06.644
it's going to return us a brand new array,

00:03:06.645 --> 00:03:12.075
removing the specific contact that we passed in when we invoked removeContact.

00:03:12.074 --> 00:03:14.719
But now, the problem we have is we have this method,

00:03:14.719 --> 00:03:17.965
but we need to figure out a way to actually invoke it.

00:03:17.965 --> 00:03:19.560
Well, what we want to do is,

00:03:19.560 --> 00:03:23.104
we want to invoke it whenever one of these buttons is clicked.

00:03:23.104 --> 00:03:28.530
But the UI for rendering one of these buttons isn't inside of our AppComponent,

00:03:28.530 --> 00:03:31.800
instead it's inside of our ListContacts component.

00:03:31.800 --> 00:03:37.860
So, just as we are passing data down as a prop here with our contacts,

00:03:37.860 --> 00:03:41.825
we can also pass a function down to be invoked later on.

00:03:41.824 --> 00:03:43.739
So, what we'll do is,

00:03:43.740 --> 00:03:46.935
let's have an onDeleteContact prop here,

00:03:46.935 --> 00:03:50.995
which is going to reference our removeContact method.

00:03:50.995 --> 00:03:53.430
And then, now just as we are doing with

00:03:53.430 --> 00:03:58.215
our contacts inside our list contacts component here,

00:03:58.215 --> 00:04:03.300
what we can do with our button is we can say whenever this button is clicked on,

00:04:03.300 --> 00:04:08.060
go ahead and invoke this arrow function.

00:04:08.060 --> 00:04:10.284
And then when that arrow function is invoked,

00:04:10.284 --> 00:04:14.055
go ahead and invoke props.onDeleteContact,

00:04:14.055 --> 00:04:18.030
which again is just going to be referencing removeContact here.

00:04:18.029 --> 00:04:21.209
And when we invoke our removeContact function,

00:04:21.209 --> 00:04:22.979
what we want to pass it,

00:04:22.980 --> 00:04:25.545
is the contact we want to remove.

00:04:25.545 --> 00:04:26.970
So, what we can do is,

00:04:26.970 --> 00:04:29.520
just pass a contact which is going to be

00:04:29.519 --> 00:04:33.789
this specific contact that we are mapping over right here.

00:04:33.790 --> 00:04:38.819
So, now what should happen is when we click on an individual contact,

00:04:38.819 --> 00:04:42.750
we get an error which was unexpected but we can fix it.

00:04:42.750 --> 00:04:46.855
So, this should be currentState.contacts, not.contact.

00:04:46.855 --> 00:04:49.420
So, let's head over and it's going to be right here.

00:04:49.420 --> 00:04:52.379
So, the state property is, as I mentioned,

00:04:52.379 --> 00:04:56.339
Contacts, so we can go ahead and add an 's' right there.

00:04:56.339 --> 00:04:58.199
And the now if all of this is working,

00:04:58.199 --> 00:05:00.569
when we click on an individual contact,

00:05:00.569 --> 00:05:05.529
let's do myself, then that individual contact is going to be removed.

