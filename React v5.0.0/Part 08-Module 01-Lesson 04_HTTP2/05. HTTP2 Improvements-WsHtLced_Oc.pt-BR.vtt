WEBVTT
Kind: captions
Language: pt-BR

00:00:00.167 --> 00:00:02.875
Richard mostrou algumas
falhas do HTTP/1

00:00:02.917 --> 00:00:05.417
e disse que o HTTP/2
as resolveria,

00:00:05.450 --> 00:00:06.625
mas como ele faz isso?

00:00:06.667 --> 00:00:11.375
Pegue seu lápis, pois vou mostrar
as maravilhas do HTTP/2!

00:00:12.250 --> 00:00:15.750
Lembra da legibilidade dos
headers de solicitação e resposta?

00:00:16.000 --> 00:00:17.167
Pode esquecer isso.

00:00:17.208 --> 00:00:20.417
Esse é o 1º passo para aumentar
o desempenho com o HTTP/2.

00:00:20.450 --> 00:00:21.958
Foi bom enquanto durou,

00:00:22.000 --> 00:00:26.625
mas ninguém, de fato, se beneficia
da abordagem com texto simples.

00:00:26.667 --> 00:00:30.250
Nós desperdiçamos bytes preciosos
ao usar texto

00:00:30.292 --> 00:00:32.417
quando um único bit é suficiente.

00:00:32.458 --> 00:00:35.625
Mas não se preocupe, ferramentas
como Wireshark ou DevTools

00:00:35.667 --> 00:00:39.250
permitirão que você
visualize headers, mesmo em HTTP/2.

00:00:39.283 --> 00:00:43.208
O 2º grande problema que o HTTP/2
resolve é o bloqueio HOL.

00:00:43.250 --> 00:00:46.125
Ele faz isso por meio
de um recurso chamado Multiplexing.

00:00:46.167 --> 00:00:48.292
Esse nome chique significa

00:00:48.333 --> 00:00:52.583
combinar vários sinais
num único sinal.

00:00:52.616 --> 00:00:57.042
Com o HTTP/2, temos uma conexão
em vez de seis.

00:00:57.083 --> 00:00:59.417
Parece um retrocesso terrível
à primeira vista,

00:00:59.458 --> 00:01:03.708
mas estamos usando essa conexão
de maneira diferente do HTTP/1.

00:01:03.750 --> 00:01:08.333
A conexão dedicada do HTTP/1
agora deu lugar a uma stream.

00:01:08.375 --> 00:01:11.292
E todas as streams partilham
desta conexão.

00:01:11.333 --> 00:01:16.500
As streams se dividem em frames
que são multiplexadas na conexão.

00:01:16.542 --> 00:01:18.292
Quando uma stream é bloqueada,

00:01:18.333 --> 00:01:23.333
outra stream pode assumir a conexão
e usar o que seria tempo ocioso.

00:01:23.375 --> 00:01:25.208
O bloqueio HOL já era!

00:01:25.250 --> 00:01:29.500
Por fim, HTTP/2 dá conta dos dados
dos headers sem compressão.

00:01:29.542 --> 00:01:33.417
Com HTTP/2, os headers não passam
apenas pela compressão do key.zip.

00:01:33.450 --> 00:01:36.583
Os programadores bolaram
uma compressão

00:01:36.616 --> 00:01:42.333
específica para estrutura
de headers e multiplexing do HTTP/2.

00:01:42.375 --> 00:01:44.750
Todas as streams
partilham a conexão

00:01:44.792 --> 00:01:46.625
e o compressor.

00:01:46.667 --> 00:01:49.542
Ou seja, um header nunca precisa
ser enviado duas vezes

00:01:49.583 --> 00:01:52.333
já que o compressor
reconhece que ele já foi enviado

00:01:52.375 --> 00:01:55.000
e manda uma referência no lugar.

00:01:55.042 --> 00:01:57.583
Por exemplo,
cookies são headers enormes,

00:01:57.616 --> 00:01:59.958
então é muito vantajoso dizer:

00:02:00.000 --> 00:02:03.042
insira aqui o mesmo header
de três solicitações atrás

00:02:03.083 --> 00:02:05.042
em vez do valor fatual.

00:02:05.083 --> 00:02:08.208
Não vou entrar em detalhes
sobre o algoritmo do compressor,

00:02:08.250 --> 00:02:10.458
mas caso tenha interesse
em seu funcionamento

00:02:10.500 --> 00:02:13.167
veja a leitura complementar
nas anotações do instrutor.

