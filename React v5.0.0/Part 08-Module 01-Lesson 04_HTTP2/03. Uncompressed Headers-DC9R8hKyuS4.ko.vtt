WEBVTT
Kind: captions
Language: ko

00:00:00.499 --> 00:00:03.570
데이터를 보내는데 걸리는 시간을 줄이기 위해

00:00:03.570 --> 00:00:06.990
여러 사이트들은 압축 알고리즘을 사용해

00:00:06.990 --> 00:00:08.430
gzip파일로 데이터를 보냅니다

00:00:08.430 --> 00:00:10.650
이 boilerplate project도

00:00:10.650 --> 00:00:12.690
이 알고리즘을 사용합니다

00:00:12.690 --> 00:00:15.330
이것에 대한 더 자세한 정보는
아래에 서술되어 있습니다

00:00:15.330 --> 00:00:17.410
데이터 압축은 훌륭한 방법입니다

00:00:17.410 --> 00:00:19.680
하지만 요청문과 응답문의 
헤더들은 여전히 압축되지

00:00:19.680 --> 00:00:21.660
않은 상태로 보내집니다

00:00:21.660 --> 00:00:24.490
말이 안되는 일이죠

00:00:24.490 --> 00:00:27.750
그들은 평문이고, 아주 
압축되기 쉽습니다

00:00:27.750 --> 00:00:30.690
또한 그들은 똑같은 문장을
반복하게 됩니다

00:00:30.690 --> 00:00:33.690
호스트 헤더는 항상 똑같고,
쿠키나 다른 헤더 역시

00:00:33.690 --> 00:00:35.250
마찬가지입니다

00:00:35.250 --> 00:00:37.650
구글의 연구 결과에 따르면,

00:00:37.650 --> 00:00:41.280
헤더는 평균 800 바이트 길이 였습니다

00:00:41.280 --> 00:00:43.920
이제 우리가 절약할 수 있는 양을 계산해 보죠

00:00:43.920 --> 00:00:47.760
만약 사이트가 100개의 요청을 보내면

00:00:47.760 --> 00:00:50.310
80kb 정도가 헤더로 소요됩니다

00:00:50.310 --> 00:00:51.670
그리고 대부분은 중복된 데이터입니다

00:00:51.670 --> 00:00:54.510
만약 우리가 이를 압축하면 많은
공간을 확보할 수 있습니다

00:00:54.510 --> 00:00:57.720
하지만 HTTP/1은 이를 지원하지 않습니다

00:00:57.720 --> 00:01:00.800
그러나 HTTP2로는 할 수 있습니다!

