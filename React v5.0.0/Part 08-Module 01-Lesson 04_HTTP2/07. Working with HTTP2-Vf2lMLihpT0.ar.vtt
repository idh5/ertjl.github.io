WEBVTT
Kind: captions
Language: ar

00:00:00.500 --> 00:00:02.520
HTTP/2 تجري
كثيرًا من التغييرات.

00:00:02.520 --> 00:00:04.859
لكن كيف يمكننا
الانتقال من HTTP/1

00:00:04.860 --> 00:00:07.440
إلى عالم HTTP/2 المذهل هذا؟

00:00:07.440 --> 00:00:09.690
ما الذي يتعين علينا القيام به
لتلبية احتياجات جميع
المستخدمين

00:00:09.689 --> 00:00:12.419
على أفضل
وجه ممكن؟

00:00:12.419 --> 00:00:15.810
بفضل عدم وجود حظر رأس السطر
في HTTP/2

00:00:15.810 --> 00:00:18.690
أصبحت طلبات ضغط العنوان الجديد
رخيصة جدًا الآن.

00:00:18.690 --> 00:00:21.600
لذا فإن بعض الأمور مثل تجميع
ملفات JavaScript أو
CSS

00:00:21.600 --> 00:00:23.250
لم يعد ضروريًا بعد ذلك.

00:00:23.250 --> 00:00:25.410
ويمكن أن يؤدي إلى
حدوث أمور أكثر سوءًا.

00:00:25.410 --> 00:00:27.629
فكروا في تحديث
ملف مخزن مؤقتًا.

00:00:27.629 --> 00:00:29.640
إذا عالجتم الأخطاء الإملائية في
ملف JavaScript،

00:00:29.640 --> 00:00:32.158
مثل قوس معقوف مفقود،
فستجبرون المستخدمين على

00:00:32.158 --> 00:00:35.549
إعادة تنزيل الكائن الثنائي المتسلسل
بأكمله من
JavaScript

00:00:35.549 --> 00:00:38.729
بدلًا من الجزء
الذي تغير فعليًا.

00:00:38.729 --> 00:00:40.890
إذا تم فصل كل
ملف JavaScript،

00:00:40.890 --> 00:00:44.700
فستقومون بإبطال التخزين
المؤقت لهذا الملف المفرد.

00:00:44.700 --> 00:00:46.830
الميزة الأخرى هي
ضغط عنوان جديد

00:00:46.829 --> 00:00:49.859
بحيث كلما أصبحت أكثر فعالية
يتم إرسال المزيد من
الطلبات.

00:00:49.859 --> 00:00:53.888
كلما تم إرسال مزيد من الطلبات،
ازدادت إمكانية إعادة
استخدام مزيد من العناوين.

00:00:53.889 --> 00:00:55.679
يعني ذلك أن وجود
عدة اتصالات

00:00:55.679 --> 00:00:59.280
بخوادم مختلفة
أمر سيء بالفعل لأدائكم.

00:00:59.280 --> 00:01:02.969
ومع ذلك، لا يزال تقليل حجم ملفات JavaScript وCSS

00:01:02.969 --> 00:01:05.039
وصوركم وضغطها فكرة جيدة.

00:01:05.040 --> 00:01:07.140
إن وحدات البايت المحفوظة هي وحدات بايت محفوظة.

00:01:07.140 --> 00:01:09.329
في البلاد النامية
على وجه التحديد،

00:01:09.329 --> 00:01:11.159
يعني ذلك توفير الأموال.

00:01:11.159 --> 00:01:14.129
بالإضافة إلى ذلك، لا تزال جميع النصائح
المتعلقة
بتحسين الأداء

00:01:14.129 --> 00:01:17.849
مثل تأجيل JavaScript أو
تضمين الأنماط صالحة.

00:01:17.849 --> 00:01:20.759
فضلًا عن استثمار الوقت
في بناء دعم المشكلة دون
اتصال

00:01:20.760 --> 00:01:22.740
مع عامل الخدمة.

00:01:22.739 --> 00:01:26.489
الأهم من ذلك، هو HTTP/2 متوافق مع الإصدارات
السابقة.

00:01:26.489 --> 00:01:30.839
وستتمكن جميع الخوادم التي تدعم HTTP/2 من دعم
HTTP/1.

00:01:30.840 --> 00:01:35.340
سيعود العميل الذي لا يدعم HTTP/2
إلى HTTP/1

00:01:35.340 --> 00:01:37.320
وسيظل يعمل كما كان من قبل.

00:01:37.319 --> 00:01:39.929
وأصبح هؤلاء
العملاء نادرين للغاية.

00:01:39.930 --> 00:01:42.930
لذلك لا تقلقوا بشأن
استخدام HTTP/2.

00:01:42.930 --> 00:01:47.850
في وقت تصوير الفيلم في أوائل عام
2016 ، كان 71٪ من
عدد زيارات الويب

00:01:47.849 --> 00:01:49.719
يدعم HTTP/2.

00:01:49.719 --> 00:01:52.079
لذا من المقبول أن نقول
إنه بإمكانكم تحسين

00:01:52.079 --> 00:01:55.950
موقعكم على الويب لـ HTTP/2 دون
إيلاء اهتمام كبير لـ
HTTP/1 بعد الآن

00:01:55.950 --> 00:01:59.420
لأن هذا الرقم
سيزداد فحسب.

