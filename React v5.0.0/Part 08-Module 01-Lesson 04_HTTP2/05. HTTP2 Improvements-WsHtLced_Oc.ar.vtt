WEBVTT
Kind: captions
Language: ar

00:00:00.500 --> 00:00:03.270
لم يوضح لكم ريتشارد سوى
بعض العيوب مع HTTP/1،

00:00:03.270 --> 00:00:05.570
وقال أن HTTP/2
سيحلها.

00:00:05.570 --> 00:00:06.930
كيف يتم ذلك؟

00:00:06.929 --> 00:00:08.629
حسنًا، أخرجوا
قلم ملاحظتك،

00:00:08.630 --> 00:00:12.320
لأنني على وشك أن أوضح
لكم عجائب HTTP/2.

00:00:12.320 --> 00:00:15.230
هل تتذكرون قابلة للقراءة بواسطة المستخدم
لعناوين
الاستجابات

00:00:15.230 --> 00:00:16.070
والطلبات؟

00:00:16.070 --> 00:00:17.179
حسنًا، يجب أن تنسوا كل ذلك.

00:00:17.179 --> 00:00:20.629
إنها الخطوة الأولى لتحسين
الأداء باستخدام HTTP/2.

00:00:20.629 --> 00:00:23.089
من الرائع أن يستمر ذلك،
لكن لا أحد يستفيد حقًا

00:00:23.089 --> 00:00:26.899
من نهج النص العادي
الذي يتبعه HTTP/1.

00:00:26.899 --> 00:00:29.509
نهدر مجموعة كبيرة من
البايتات في هجاء الأشياء

00:00:29.510 --> 00:00:32.658
في شكل نص عندما
يكفي استخدام بايت واحد.

00:00:32.658 --> 00:00:33.649
ومع ذلك لا تقلقوا.

00:00:33.649 --> 00:00:36.049
لا تزال أدوات مثل Wireshark
أو DevTools

00:00:36.049 --> 00:00:39.409
تتيح لكم رؤية العناوين،
حتى باستخدام HTTP/2.

00:00:39.409 --> 00:00:41.750
المشكلة الكبيرة الثانية
التي حلها HTTP/2

00:00:41.750 --> 00:00:43.429
هي حظر رأس السطر.

00:00:43.429 --> 00:00:46.429
وحل هذه المشكلة
بتقنية تسمى مضاعفات توجيه
الإرشادات.

00:00:46.429 --> 00:00:48.500
مضاعفات توجيه الإرشادات
هو عبارة عن مصطلح صوتي
مميز

00:00:48.500 --> 00:00:50.509
يعني دمج
إشارات متعددة

00:00:50.509 --> 00:00:52.820
في إشارة مفردة جديدة.

00:00:52.820 --> 00:00:57.170
باستخدام HTTP/2، يكون لدينا الآن
اتصال واحد بدلًا
من ستة اتصالات.

00:00:57.170 --> 00:00:59.670
يبدو ذلك فب البداية أننا رجعنا
خطوة كبيرة إلى
الوراء،

00:00:59.670 --> 00:01:02.060
لكننا نستخدم الاتصال المفرد
بشكل مختلف

00:01:02.060 --> 00:01:03.980
عن HTTP/1.

00:01:03.979 --> 00:01:06.829
يُعرف الآن ما كان يُستخدم عل أنه اتصال مخصص في
HTTP/1

00:01:06.829 --> 00:01:09.530
باسم تدفق، وتشارك جميع التدفقات

00:01:09.530 --> 00:01:11.540
في ذلك الاتصال المفرد.

00:01:11.540 --> 00:01:13.490
يتم تقسيم هذه التدفقات
إلى إطارات

00:01:13.489 --> 00:01:16.789
ويتم تعدد إرسالها على
هذا الاتصال المفرد.

00:01:16.790 --> 00:01:19.100
عند حظر تدفق واحد،
يمكن أن يستحوذ

00:01:19.099 --> 00:01:21.890
تدفق آخر على الاتصال
ويستفيد من

00:01:21.890 --> 00:01:23.500
وقت الخمول.

00:01:23.500 --> 00:01:25.400
انتهت مشكلة حظر رأس السطر.

00:01:25.400 --> 00:01:29.790
وأخيرًا، يهتم HTTP/2 ببيانات العنوان غير المضغوطة.

00:01:29.790 --> 00:01:31.850
باستخدام HTTP/2،
لا يتم ضغط العناوين

00:01:31.849 --> 00:01:34.399
باستخدام
[؟ key.zip ،؟]

00:01:34.400 --> 00:01:36.830
إذ توصل المهندسون
إلى ضغط HTTP/2

00:01:36.829 --> 00:01:39.769
الذي تم تخصيصه
لبنية محددة من الرؤوس

00:01:39.769 --> 00:01:42.560
وميزة مضاعفات توجيه الإرشادات
لـ HTTP/2.

00:01:42.560 --> 00:01:45.710
لا تقوم جميع التدفقات
بمشاركة الاتصال فحسب

00:01:45.709 --> 00:01:46.909
بل الضاغط أيضًا.

00:01:46.909 --> 00:01:49.759
يعني ذلك أنه لا يجب إرسال
عنوان مرتين مطلقًا،

00:01:49.760 --> 00:01:52.730
لأن الضاغط يتعرف
على أنه تم إرساله من قبل،

00:01:52.730 --> 00:01:55.130
ويرسل مرجعًا بدلًا منه.

00:01:55.129 --> 00:01:57.799
عل سبيل المثال، إن ملفات تعريف الارتباط
هي عناوين
طويلة حقًا.

00:01:57.799 --> 00:02:00.079
لذلك، من المفيد جدًا
أن نقول،

00:02:00.079 --> 00:02:02.689
أدخلوا عنوان ملف تعريف الارتباط نفسه
الذي تم طرحه
منذ ثلاثة طلبات

00:02:02.689 --> 00:02:05.239
هنا، بدلًا من
القيمة الفعلية.

00:02:05.239 --> 00:02:08.388
لن أتطرق إلى تعقيدات
خوارزمية الضغط هذه.

00:02:08.389 --> 00:02:10.860
لكن إذا كنتم تهتمون بالتعرف على
طريقة عملها،

00:02:10.860 --> 00:02:14.260
توجد بعض المقالات المقروءة
المفيدة في ملاحظات
المعلم.

