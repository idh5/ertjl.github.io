WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.625
To reduce the time it takes to send data,

00:00:02.625 --> 00:00:05.685
a lot of websites compress their assets with Gzip or

00:00:05.685 --> 00:00:08.830
other compression algorithms that work on the web. The H.T.

00:00:08.830 --> 00:00:12.435
modified boilerplate project uses the Gzip compression.

00:00:12.435 --> 00:00:14.634
Check below for more information about this.

00:00:14.634 --> 00:00:17.286
Compression of the data is great,

00:00:17.286 --> 00:00:21.545
but the request and response headers are still being sent uncompressed.

00:00:21.545 --> 00:00:24.295
When you think about it, that doesn't make a lot of sense.

00:00:24.295 --> 00:00:27.720
They are plain text which makes them highly compressible.

00:00:27.720 --> 00:00:30.660
Also they repeat a lot across requests.

00:00:30.660 --> 00:00:32.340
The host header's always the same,

00:00:32.340 --> 00:00:33.580
the cookies are the same,

00:00:33.580 --> 00:00:35.025
and so are some other headers.

00:00:35.025 --> 00:00:36.621
In a Google's research paper,

00:00:36.621 --> 00:00:38.445
they state that on average,

00:00:38.445 --> 00:00:40.865
headers take up about 800 bytes.

00:00:40.865 --> 00:00:43.740
Let's look at the potential savings we could have.

00:00:43.740 --> 00:00:45.975
If a site made 100 requests,

00:00:45.975 --> 00:00:48.600
roughly 80 kilobytes of data would be taken up by

00:00:48.600 --> 00:00:51.540
the headers and most of that would be redundant.

00:00:51.540 --> 00:00:54.470
We'd save a lot of space if we could compress the headers.

00:00:54.470 --> 00:00:57.405
Unfortunately, we can't do that with HTTP/1.

00:00:57.405 --> 00:01:00.000
But with HTTP/2, we can!

