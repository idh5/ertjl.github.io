WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.305
So, Richard just showed you some of the flaws with HTTP/1 and

00:00:03.305 --> 00:00:06.660
said that HTTP/2 would solve them. But how does he do it?

00:00:06.660 --> 00:00:08.580
Well, take out your note-taking pencil

00:00:08.580 --> 00:00:10.995
because I'm about to show you the wonders of HTTP/2.

00:00:10.995 --> 00:00:15.995
Remember the human readability of requests and response headers?

00:00:15.995 --> 00:00:20.560
Well, that's going to go. It's the first step to improve performance with HTTP/2.

00:00:20.560 --> 00:00:23.070
It was nice while it lasted but nobody is really

00:00:23.070 --> 00:00:26.850
benefiting from the plain text approach that HTTP/1 took.

00:00:26.850 --> 00:00:29.580
We are wasting precious bytes by spelling things out in

00:00:29.580 --> 00:00:33.450
text form when a single bit is sufficient. Don't worry, though.

00:00:33.450 --> 00:00:39.285
Tools like Wireshark or dev tools will still let you see headers even with HTTP/2.

00:00:39.285 --> 00:00:43.375
The second big problem HTTP/2 solves is head-of-line blocking.

00:00:43.375 --> 00:00:46.200
It does this through a technique called multiplexing.

00:00:46.200 --> 00:00:48.930
Multiplexing is a fancy sounding term that means

00:00:48.930 --> 00:00:52.470
combining multiple signals into a new single signal.

00:00:52.470 --> 00:00:57.085
With HTTP/2, we now have one connection instead of six.

00:00:57.085 --> 00:01:00.060
That seems like a terrible step backwards at first but we are

00:01:00.060 --> 00:01:03.660
using the single connection differently than HTTP/1 would have.

00:01:03.660 --> 00:01:07.200
What used to be a dedicated connection in HTTP/1 is now

00:01:07.200 --> 00:01:11.405
called a stream and all streams share that single connection.

00:01:11.405 --> 00:01:13.680
These streams are split up into frames and are

00:01:13.680 --> 00:01:16.530
being multiplexed onto that single connection.

00:01:16.530 --> 00:01:18.240
When one stream is blocked,

00:01:18.240 --> 00:01:20.520
another stream can take over the connection

00:01:20.520 --> 00:01:23.385
and make good use of what would have been idle time.

00:01:23.385 --> 00:01:25.350
Head-of-line blocking be gone.

00:01:25.350 --> 00:01:29.625
Lastly, HTTP/2 takes care of header that are big uncompressed.

00:01:29.625 --> 00:01:33.690
With HTTP/2, headers are not just being compressed with key zip.

00:01:33.690 --> 00:01:37.380
The engineers came up with an HTTP/2 compression that is tailored

00:01:37.380 --> 00:01:41.730
towards the specific structure of headers and the multiplexing feature of HTTP/2.

00:01:41.730 --> 00:01:46.855
All streams not only share the connection but also the compressor.

00:01:46.855 --> 00:01:50.520
This means a header never has to be sent twice since the compressor

00:01:50.520 --> 00:01:55.050
recognizes that it's been sent before and sends a reference instead.

00:01:55.050 --> 00:01:57.750
For example cookies are really long headers,

00:01:57.750 --> 00:01:59.850
so it is an enormous advantage to say,

00:01:59.850 --> 00:02:04.950
"Inject the same cookie header as thread requests ago here instead of the actual value".

00:02:04.950 --> 00:02:08.190
I won't go into the intricacies of this compression algorithm.

00:02:08.190 --> 00:02:10.605
But if you're interested in how it works,

00:02:10.605 --> 00:02:13.100
there is some additional reading in the instructor notes.

