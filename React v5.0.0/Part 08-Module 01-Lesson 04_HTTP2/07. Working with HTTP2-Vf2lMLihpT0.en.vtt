WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.385
HTTP/2 brings a lot of changes.

00:00:02.385 --> 00:00:07.335
But how do we transition from HTTP/1 to this amazing HTTP/2 world?

00:00:07.335 --> 00:00:11.895
What do we have to do to cater to all the units out there in the best possible manner?

00:00:11.895 --> 00:00:14.945
With head-of-line blocking gone in HTTP/2,

00:00:14.945 --> 00:00:18.555
and the new header compression requests are now cheap.

00:00:18.555 --> 00:00:23.172
So things like concatenating your JavaScript or CSS are not necessary anymore,

00:00:23.172 --> 00:00:25.345
and it can actually make things worse.

00:00:25.345 --> 00:00:27.435
Think about updating a cached file.

00:00:27.435 --> 00:00:29.580
If you fix a typo in a JavaScript file,

00:00:29.580 --> 00:00:30.830
like a missing curly brace,

00:00:30.830 --> 00:00:35.400
you would force your users to redownload the entire concatenated blob of JavaScript,

00:00:35.400 --> 00:00:38.670
instead of just the fragment that actually changed.

00:00:38.670 --> 00:00:40.740
If each JavaScript file was separate,

00:00:40.740 --> 00:00:44.640
you would only invalidate the cache on that single file.

00:00:44.640 --> 00:00:46.800
Another advantage is the new header compression

00:00:46.800 --> 00:00:49.635
becoming more effective the more requests are sent.

00:00:49.635 --> 00:00:51.080
The more requests are sent,

00:00:51.080 --> 00:00:53.780
the more headers can be reused.

00:00:53.780 --> 00:00:55.710
That means that having multiple connections to

00:00:55.710 --> 00:00:59.250
different servers is actually bad for your performance.

00:00:59.250 --> 00:01:02.360
That being said, minifying and compressing your JavaScripts,

00:01:02.360 --> 00:01:05.380
CSS, and images is still a good idea.

00:01:05.380 --> 00:01:06.975
A byte saved is a bytes saved.

00:01:06.975 --> 00:01:09.060
And especially in developing countries,

00:01:09.060 --> 00:01:10.905
that means saved money.

00:01:10.905 --> 00:01:13.140
Additionally, all the advice given for

00:01:13.140 --> 00:01:15.525
rendering performance like deferring a JavaScript or

00:01:15.525 --> 00:01:18.510
in-lining styles is still valid and so is

00:01:18.510 --> 00:01:22.670
investing time in building proper offline support with service worker.

00:01:22.670 --> 00:01:26.370
Most importantly, HTTP/2 is backwards compatible.

00:01:26.370 --> 00:01:28.695
All servers that speak HTTP/2,

00:01:28.695 --> 00:01:30.780
will be able to speak HTTP/1.

00:01:30.780 --> 00:01:35.175
A client that can't speak HTTP/2 will just fall back to HTTP/1,

00:01:35.175 --> 00:01:37.110
and keep working as before.

00:01:37.110 --> 00:01:39.870
And those clients are becoming exceedingly rare.

00:01:39.870 --> 00:01:42.670
So don't be scared of working with HTTP/2.

00:01:42.670 --> 00:01:45.360
At the time of filming in early 2016,

00:01:45.360 --> 00:01:49.590
71 percent of the webs traffic have support for HTTP/2.

00:01:49.590 --> 00:01:53.565
So, it is fair to say that you can optimize your web for HTTP/2,

00:01:53.565 --> 00:01:56.440
without paying much attention to HTTP/1 anymore,

00:01:56.440 --> 00:01:58.190
as this number will only grow.

