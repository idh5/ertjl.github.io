WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.149
Now, the only other view inside of our application that we need to

00:00:03.149 --> 00:00:06.810
make is the actual tweet view when you click on a tweet.

00:00:06.809 --> 00:00:09.024
So, you'll notice here that we get the tweet itself,

00:00:09.025 --> 00:00:12.179
and then we get an ability to reply to this tweet.

00:00:12.179 --> 00:00:15.900
But if we click on one that has a few different replies,

00:00:15.900 --> 00:00:18.765
you'll notice what we get is the tweet itself,

00:00:18.765 --> 00:00:20.330
an ability to reply,

00:00:20.329 --> 00:00:24.250
and then all of the replies to this original tweet.

00:00:24.250 --> 00:00:27.210
So, one thing to notice is that React router is eventually

00:00:27.210 --> 00:00:30.120
going to be what is rendering this component,

00:00:30.120 --> 00:00:34.359
and we are going to get the ID of the Tweet by using a URL parameter here.

00:00:34.359 --> 00:00:36.865
So now, inside of our Components folder,

00:00:36.865 --> 00:00:39.590
let's actually make this new component.

00:00:39.590 --> 00:00:41.525
We will call it TweetPage.

00:00:41.524 --> 00:00:44.644
We will import the usual suspects,

00:00:44.645 --> 00:00:47.700
React and Component from React.

00:00:50.750 --> 00:00:55.715
What we want to render first is just a div,

00:00:55.715 --> 00:00:59.335
and then we can go ahead and export this.

00:00:59.335 --> 00:01:01.689
First, let's just render TweetPage,

00:01:01.689 --> 00:01:04.134
so that we can make sure that this is working.

00:01:04.135 --> 00:01:06.150
So, just as we did with our other components,

00:01:06.150 --> 00:01:12.410
let's go into our main App.js file and import TweetPage from /TweetPage.

00:01:12.409 --> 00:01:16.700
Then instead of rendering New Tweet down here we want to render our TweetPage component.

00:01:16.700 --> 00:01:18.189
As I mentioned earlier,

00:01:18.189 --> 00:01:21.804
what's going to happen is when React router renders this component,

00:01:21.805 --> 00:01:28.130
it's going to pass to it the specific URL parameter as match.params.id.

00:01:28.129 --> 00:01:30.064
So, what we will do because we're not using

00:01:30.064 --> 00:01:32.489
React router yet is we just want to fake that.

00:01:32.489 --> 00:01:35.644
So, we will give this a match prop which is an object

00:01:35.644 --> 00:01:38.780
that has a param property on it, which has an ID.

00:01:38.780 --> 00:01:45.474
Now, what we need is one of the IDs of the tweets inside of our application.

00:01:45.474 --> 00:01:48.549
So, let's grab one of those.

00:01:49.819 --> 00:01:53.199
We can grab this one right here.

00:01:55.739 --> 00:02:00.048
So, this is going to be passed to our components that then,

00:02:00.049 --> 00:02:02.720
when we do add in React router we don't need to change anything

00:02:02.719 --> 00:02:06.560
because we'll already be passed match.params.id.

00:02:06.560 --> 00:02:10.400
Then now, inside of TweetPage what we need to do is we need to figure out

00:02:10.400 --> 00:02:15.034
what data this page needs from the Redux store.

00:02:15.034 --> 00:02:17.454
So, we're going to import react-redux,

00:02:17.455 --> 00:02:21.290
and as always, we need to connect down here.

00:02:21.289 --> 00:02:25.129
So, what will be exported from this file or from this module,

00:02:25.129 --> 00:02:27.419
will be the connected component.

00:02:27.419 --> 00:02:29.750
So, we have mapStateToProps.

00:02:29.750 --> 00:02:32.389
So, now what we're going to do is let's grab

00:02:32.389 --> 00:02:36.294
the authedUser as well as the Tweets and all of the users.

00:02:36.294 --> 00:02:39.569
Then again the second argument to mapStateToProps is going to be

00:02:39.569 --> 00:02:43.584
any props that are passed to the component so we can grab those.

00:02:43.585 --> 00:02:46.099
Then now, in order to get the ID

00:02:46.099 --> 00:02:48.474
of the component or the Tweet that we're going to be rendering,

00:02:48.474 --> 00:02:50.354
we can grab it from,

00:02:50.354 --> 00:02:53.659
as I just mentioned, prop.match.params.

00:02:53.659 --> 00:02:55.990
Again, this is coming right now manually from us.

00:02:55.990 --> 00:02:57.740
But when we tie in React router,

00:02:57.740 --> 00:02:59.805
it's going to be coming from React router.

00:02:59.805 --> 00:03:05.370
Then now, the data that we want to be passed to the component is we want the ID,

00:03:05.370 --> 00:03:07.969
which is the ID of the Tweet we're going to be rendering.

00:03:07.969 --> 00:03:12.715
Then we want any information about the replies because we need to go ahead and show,

00:03:12.715 --> 00:03:14.360
as I mentioned earlier,

00:03:14.360 --> 00:03:17.415
every reply to the Tweet down here.

00:03:17.414 --> 00:03:21.074
So, what we can do is we will say, first,

00:03:21.074 --> 00:03:24.979
if there doesn't exist a Tweet with this ID,

00:03:24.979 --> 00:03:27.359
then the replies is just going to be an empty array.

00:03:27.360 --> 00:03:28.980
But if there does,

00:03:28.979 --> 00:03:31.109
then we want to say tweets[ID],

00:03:31.110 --> 00:03:32.870
which will be the individual tweet,

00:03:32.870 --> 00:03:37.469
that will have a replies property on it which is an array.

00:03:37.469 --> 00:03:41.469
So, we can call.sort because we want to sort these chronologically.

00:03:41.469 --> 00:03:49.090
So, we can do tweets[b].timestamp-tweets[a].timestamp.

00:03:49.090 --> 00:03:51.555
Then now, if we add this to connect,

00:03:51.555 --> 00:03:55.370
what we should see here if we console.log,

00:03:55.370 --> 00:03:58.585
the stock props inside of our TweetPage component.

00:03:58.585 --> 00:04:02.330
What we should see here is we just get our normal UI.

00:04:02.330 --> 00:04:05.380
But what we've logged to the console is right here,

00:04:05.379 --> 00:04:08.634
so we're being passed match.params.ID.

00:04:08.634 --> 00:04:12.319
But more importantly, we're being passed the ID of the Tweet we want to render,

00:04:12.319 --> 00:04:16.129
as well as the replies that it contains.

00:04:16.129 --> 00:04:21.800
So now, what that will allow us to do is inside of our render method,

00:04:21.800 --> 00:04:26.449
let's grab the ID as well as the replies coming from this.props,

00:04:26.449 --> 00:04:29.399
and then we're going to need a few different components that we want to render.

00:04:29.399 --> 00:04:31.339
First, the Tweet component,

00:04:31.339 --> 00:04:34.219
which will allow us to pass to it the ID of

00:04:34.220 --> 00:04:37.060
this week which we already got from our replies,

00:04:37.060 --> 00:04:39.800
as well as the tweets.

00:04:40.589 --> 00:04:44.060
So, down here what we want to do is first,

00:04:44.060 --> 00:04:46.980
let's render the Tweets passing it the ID.

00:04:46.980 --> 00:04:49.085
So, if we were to just stop right here,

00:04:49.084 --> 00:04:53.539
what would happen is our app would look like this. So, pretty good.

00:04:53.540 --> 00:05:00.230
But what we also want is an ability to reply to this tweet as well as any of the replies.

00:05:00.230 --> 00:05:05.379
So, what we can do is we can have a new tweet here.

00:05:05.379 --> 00:05:10.790
If you'll remember, the way that we are telling our application that the user

00:05:10.790 --> 00:05:13.150
is replying to a Tweet rather than creating

00:05:13.149 --> 00:05:16.120
their own Tweet is with this ID prop right here.

00:05:16.120 --> 00:05:18.365
So, if we pass an ID Prop to NewTweet,

00:05:18.365 --> 00:05:23.790
that means we are replying to the tweet and the tweet we are replying to has this ID.

00:05:23.790 --> 00:05:31.875
Then finally, what we want to do is if replies.length does not equal 0,

00:05:31.875 --> 00:05:35.490
then what we want to show is a little header here.

00:05:35.490 --> 00:05:37.694
We will give it a className of center.

00:05:37.694 --> 00:05:40.944
Then we can throw in the replies.

00:05:40.944 --> 00:05:49.790
Then we want to loop over those replies by using replies.map.

00:05:49.790 --> 00:05:53.810
For each reply ID inside of our replies array,

00:05:53.810 --> 00:05:57.685
what we want to do is create a list item.

00:05:57.685 --> 00:06:01.430
We'll give it a key of whatever the replyId is.

00:06:01.430 --> 00:06:05.209
Then we want to render our Tweet component passing it an ID,

00:06:05.209 --> 00:06:07.154
which is going to be the replyId.

00:06:07.154 --> 00:06:11.263
So, now, if we look at our view,

00:06:11.264 --> 00:06:13.519
if everything is working correctly,

00:06:13.519 --> 00:06:16.419
you'll notice here what we have is the tweet itself,

00:06:16.420 --> 00:06:20.730
and again, this tweet is the tweet with this ID.

00:06:20.730 --> 00:06:27.410
Then we are able to reply to this tweet as well as show all of the replies down below.

00:06:27.410 --> 00:06:29.500
So, what should happen here,

00:06:29.500 --> 00:06:33.839
is if everything is working previously,

00:06:34.060 --> 00:06:36.379
and it looks like we got an error here.

00:06:36.379 --> 00:06:37.500
This is an easy one to fix.

00:06:37.500 --> 00:06:39.625
You'll notice this is tweet.replyTo,

00:06:39.625 --> 00:06:41.920
but it should be replyingTo.

00:06:41.920 --> 00:06:48.759
So, that's going to be inside of our tweets reducer right here.

00:06:48.759 --> 00:06:50.889
This should be replyingTo.

00:06:50.889 --> 00:06:54.550
Then now, what should happen if everything else is working,

00:06:54.550 --> 00:06:58.305
we can reply to any Tweet we want.

00:06:58.305 --> 00:07:01.860
You'll notice it shows up down here inside of our replies.

00:07:01.860 --> 00:07:05.569
So now, that we have built out every view in our application,

00:07:05.569 --> 00:07:08.870
the next thing we need to do is actually add in React router so that we can

00:07:08.870 --> 00:07:13.740
dynamically change the component that's rendered based on the URL.

