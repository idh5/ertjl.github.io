WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.220
Now that we have the initial data for our application,

00:00:03.220 --> 00:00:07.599
the next thing we are going to do is build out this dashboard component right here.

00:00:07.599 --> 00:00:10.619
So, inside of our components folder,

00:00:10.619 --> 00:00:13.329
let's make a new file called Dashboard,

00:00:13.339 --> 00:00:17.740
and I'm just going to build out the skeleton for this real quick.

00:00:28.550 --> 00:00:31.935
So, now that we have our dashboard component,

00:00:31.934 --> 00:00:35.659
the next question we need to answer is what data

00:00:35.659 --> 00:00:39.589
does this dashboard component need from the state of our Redux store?

00:00:39.590 --> 00:00:41.870
Again, what this dashboard component is going to be

00:00:41.869 --> 00:00:45.079
responsible for is rendering all of the different tweets.

00:00:45.079 --> 00:00:49.914
So, what we'll do is let's make a function down here.

00:00:49.914 --> 00:00:52.240
We'll call it mapStateToProps.

00:00:52.240 --> 00:00:54.500
It's going to take in this state of

00:00:54.500 --> 00:00:58.734
our store and specifically the data we need is the tweets,

00:00:58.734 --> 00:01:02.359
and then what it is going to do is it's going to

00:01:02.359 --> 00:01:06.605
return an object that has a tweetIds property on it.

00:01:06.605 --> 00:01:09.180
So, we will say Object.keys,

00:01:09.909 --> 00:01:14.899
so we're going to grab all of the different IDs of our tweets and then we

00:01:14.900 --> 00:01:19.085
want to call.sort so they are all sorted by their timestamp.

00:01:19.084 --> 00:01:26.959
So, we will say tweets[b].timestamp-tweets[a].timestamp,

00:01:26.959 --> 00:01:28.884
because again these are just the keys here.

00:01:28.885 --> 00:01:30.734
So, now what we've done is,

00:01:30.734 --> 00:01:39.965
if we import connect from react-redux and then we export that,

00:01:39.965 --> 00:01:43.350
passing it, mapStateToProps, and

00:01:43.349 --> 00:01:47.739
then invoking that second function we get back passing it Dashboard.

00:01:47.739 --> 00:01:50.449
Now, what will happen is if we render our Dashboard,

00:01:50.450 --> 00:01:55.900
let's go ahead in console.log(this.props),

00:01:55.900 --> 00:01:57.710
and now inside of App.js,

00:01:57.709 --> 00:02:00.099
let's import our dashboards so that we can see this.

00:02:00.099 --> 00:02:03.233
This Dashboard is going to come from Dashboard,

00:02:03.233 --> 00:02:07.174
and then here instead of rendering Starter Code, let's render Dashboard.

00:02:07.174 --> 00:02:10.724
So now, if we look at our props,

00:02:10.724 --> 00:02:18.254
what we should see is right here is where it is being shown.

00:02:18.254 --> 00:02:21.245
So, you'll notice we have a dispatch method

00:02:21.245 --> 00:02:23.870
because we hooked up our component to connect,

00:02:23.870 --> 00:02:26.300
and we also have a bunch of tweetIds.

00:02:26.300 --> 00:02:32.715
So, what we'll do inside of Dashboard for now is let's start rendering out the UI.

00:02:32.715 --> 00:02:35.659
Instead of rendering all of the actual tweets,

00:02:35.659 --> 00:02:37.854
what we'll do is we will just render the tweet ID.

00:02:37.854 --> 00:02:39.159
Then, in the next video,

00:02:39.159 --> 00:02:42.139
we will build out a tweet component which is responsible

00:02:42.139 --> 00:02:45.924
for taking in a tweet ID and building out this UI right here.

00:02:45.925 --> 00:02:49.490
But again, for now, what we want to do is inside of Dashboard,

00:02:49.490 --> 00:02:51.050
let's render an h3,

00:02:51.050 --> 00:02:58.080
we'll give it a className of center, so your Timeline.

00:02:58.250 --> 00:03:03.175
Then, now, we actually want to render our unordered list.

00:03:03.175 --> 00:03:07.260
We'll give this a className of dashboard-list.

00:03:07.259 --> 00:03:13.789
Inside of here, we now can do this.props.tweetIds.map.

00:03:16.939 --> 00:03:22.215
For each item or for each ID inside of our tweetIds array,

00:03:22.215 --> 00:03:26.905
what we want to do is render a list item giving it a key.

00:03:26.905 --> 00:03:28.939
Then as I mentioned, for now,

00:03:28.939 --> 00:03:31.719
we will just say we have a div,

00:03:31.719 --> 00:03:33.530
we'll say TWEET ID is going to be the ID.

00:03:33.530 --> 00:03:43.430
So now, what should happen is we have our timeline here,

00:03:43.430 --> 00:03:45.754
and eventually once the data comes in,

00:03:45.754 --> 00:03:48.284
we get all of our different tweet IDs.

00:03:48.284 --> 00:03:50.990
What we'll be able to do in the next video is we can

00:03:50.990 --> 00:03:54.200
build out the tweet component passing it a tweet IDs,

00:03:54.199 --> 00:03:57.774
and that will give us something that looks like this.

00:03:57.775 --> 00:04:01.439
But before we do that, what I want to do real quick inside of,

00:04:01.439 --> 00:04:03.120
so we'll delete this console.log,

00:04:03.120 --> 00:04:04.844
inside of our App.js file,

00:04:04.844 --> 00:04:09.895
I want to make it so we only render the Dashboard once the data from our initial data,

00:04:09.895 --> 00:04:13.360
specifically from this handleInitialData invocation is finished.

00:04:13.360 --> 00:04:21.245
So, what we'll do is let's come down here and grab some data off of our store.

00:04:21.245 --> 00:04:24.155
What we want is the authedUser,

00:04:24.154 --> 00:04:27.139
and then the data that we're going to pass to

00:04:27.139 --> 00:04:30.919
our component is going to have a loading property on it,

00:04:30.920 --> 00:04:35.620
and loading will be true if authedUser equals null.

00:04:35.620 --> 00:04:39.879
So, what we're doing here is we're saying if the authedUser is null,

00:04:39.879 --> 00:04:42.814
then what we want to do is,

00:04:42.814 --> 00:04:45.540
instead of rendering the dashboard,

00:04:46.259 --> 00:04:49.060
we just want to render null.

00:04:49.060 --> 00:04:52.155
If it is not null,

00:04:52.154 --> 00:04:56.179
then what we want to render is our Dashboard component.

00:04:56.180 --> 00:05:01.850
So, eventually, what dashboard will be rendering is a UI that looks like this,

00:05:01.850 --> 00:05:04.160
but we want to make sure that we don't even try to render that

00:05:04.160 --> 00:05:07.910
UI until our application has finished loading the initial data,

00:05:07.910 --> 00:05:12.255
which it will once our authedUser is not equal to null.

00:05:12.254 --> 00:05:14.735
So, right here, if loading is true, render null.

00:05:14.735 --> 00:05:17.449
If not, then just render our Dashboard component.

00:05:17.449 --> 00:05:19.620
So, as I've mentioned a few times now,

00:05:19.620 --> 00:05:25.610
now that our Dashboard has all of the tweet IDs inside of it that we need to render,

00:05:25.610 --> 00:05:31.465
what we'll do in the next video is we will build out the UI for the individual tweets.

00:05:31.464 --> 00:05:35.469
So that way, instead of mapping over all of our IDs and just showing the ID,

00:05:35.470 --> 00:05:39.350
we will map over all of our IDs and show the actual tweet.

