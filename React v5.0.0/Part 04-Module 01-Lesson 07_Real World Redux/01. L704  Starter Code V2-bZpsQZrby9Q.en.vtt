WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.700
So, at this point, if you run your app,

00:00:01.700 --> 00:00:04.464
you should see this view right here that just says starter code.

00:00:04.464 --> 00:00:06.419
What we're going to do in this video is just walk

00:00:06.419 --> 00:00:08.519
through a little bit of the code that you were given.

00:00:08.519 --> 00:00:11.199
So, this is just an app created with Create React app,

00:00:11.199 --> 00:00:13.199
so it should look fairly familiar to you.

00:00:13.199 --> 00:00:15.875
Our index.js file describes our app,

00:00:15.875 --> 00:00:19.625
and then uses ReactDOM that render to render it to the view.

00:00:19.625 --> 00:00:22.710
Our components folder just has a very simple

00:00:22.710 --> 00:00:25.894
app.js file inside of it that says starter code,

00:00:25.894 --> 00:00:30.300
and you'll notice here that we have given you a bunch of styles.

00:00:30.300 --> 00:00:35.120
These are the styles that I will be referencing throughout the rest of this course.

00:00:35.119 --> 00:00:36.829
If you want to do your own styles,

00:00:36.829 --> 00:00:38.184
you're more than welcome to.

00:00:38.185 --> 00:00:41.660
But because this isn't necessarily a course about styling,

00:00:41.659 --> 00:00:45.779
I'm just going to reference the classes in this index.css file.

00:00:45.780 --> 00:00:48.575
The more interesting code that was given to you is

00:00:48.575 --> 00:00:51.910
inside of this utils folder right here.

00:00:51.909 --> 00:00:54.299
So, typically whenever you're dealing with Redux,

00:00:54.299 --> 00:00:56.059
so odds are whenever you're dealing with Redux,

00:00:56.060 --> 00:00:58.460
odds are your data is going to be asynchronous,

00:00:58.460 --> 00:01:00.740
meaning it's living in a database somewhere.

00:01:00.740 --> 00:01:02.734
So, because we didn't want to have to set

00:01:02.734 --> 00:01:05.349
up a full-fledged server and database for this course,

00:01:05.349 --> 00:01:09.099
what I did was we have this _DATA.js file here,

00:01:09.099 --> 00:01:11.149
and this represents our fake database.

00:01:11.150 --> 00:01:15.034
So, we have users, we also have a bunch of tweets,

00:01:15.034 --> 00:01:17.120
and then down here below,

00:01:17.120 --> 00:01:20.969
we just have a few different methods to get access to our data.

00:01:20.969 --> 00:01:25.280
So, you'll never actually interact with this _DATA.js file directly because what you'll

00:01:25.280 --> 00:01:29.989
do is you'll go through this api.js file to interact with the database.

00:01:29.989 --> 00:01:32.349
So, this is like an API file that was given

00:01:32.349 --> 00:01:34.729
to you that if you want to interact with the server,

00:01:34.730 --> 00:01:36.335
which then interacts with the database,

00:01:36.334 --> 00:01:38.629
you would use these methods right here.

00:01:38.629 --> 00:01:39.920
So, we have getInitialData,

00:01:39.920 --> 00:01:44.030
which is going to be responsible for getting the initial data of our applications.

00:01:44.030 --> 00:01:46.129
So, we have _getUsers as well as _getTweets,

00:01:46.129 --> 00:01:50.509
then we just return an object which has both of those properties on it.

00:01:50.510 --> 00:01:52.609
We can also toggle the like button of

00:01:52.609 --> 00:01:55.590
a specific tweet by invoking this method right here,

00:01:55.590 --> 00:01:58.390
and then we also want to be able to save a tweet.

00:01:58.390 --> 00:02:00.349
So, again, because we didn't want to have two set

00:02:00.349 --> 00:02:02.704
up a full-fledged server as well as a database,

00:02:02.704 --> 00:02:04.584
we're just going to mock that,

00:02:04.584 --> 00:02:07.699
and in order to interact with our fake database,

00:02:07.700 --> 00:02:10.979
you will go through these functions right here.

00:02:10.979 --> 00:02:13.709
Now, the last file you were given is helpers.js.

00:02:13.710 --> 00:02:15.860
This one's kind of explanatory.

00:02:15.860 --> 00:02:17.970
We want a way to format the date,

00:02:17.969 --> 00:02:20.419
so this one just takes in a timestamp and then

00:02:20.419 --> 00:02:23.204
formats it and returns that formatted timestamp.

00:02:23.205 --> 00:02:28.190
Then format tweet to takes in a bunch of information about a new tweet,

00:02:28.189 --> 00:02:32.419
and then just formats it in the way that works for our Redux store.

00:02:32.419 --> 00:02:35.869
We'll go through why things are set up this way a little bit

00:02:35.870 --> 00:02:39.120
later in the course as far as how we're going to structure our Redux store.

00:02:39.120 --> 00:02:41.319
But for now, know that if you want to format a tweet,

00:02:41.319 --> 00:02:44.584
we can just invoke the formatTweet function.

00:02:44.585 --> 00:02:48.200
So, if you are still curious about the code that we have given you,

00:02:48.199 --> 00:02:53.579
go ahead and explore the data.js file as well as the api.js file.

00:02:53.580 --> 00:02:55.469
What we're going to do in the next videos,

00:02:55.469 --> 00:02:58.490
we're going to set up some of the actions responsible

00:02:58.490 --> 00:03:02.400
for fetching the initial data of our application.

