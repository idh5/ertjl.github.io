WEBVTT
Kind: captions
Language: pt-BR

00:00:00.163 --> 00:00:02.546
Agora que podemos curtir
os tuítes,

00:00:02.588 --> 00:00:05.536
a próxima funcionalidade
a ser adicionada ao aplicativo

00:00:05.578 --> 00:00:07.986
será a capacidade de adicionar
um novo tuíte.

00:00:08.028 --> 00:00:11.234
Neste vídeo,
nós construiremos a IU,

00:00:11.276 --> 00:00:13.751
que será capaz de compor
o novo tuíte.

00:00:13.793 --> 00:00:14.958
No próximo vídeo,

00:00:15.000 --> 00:00:18.415
configuraremos actions
e reducers para lidar

00:00:18.457 --> 00:00:20.325
com a composição
do novo tuíte.

00:00:20.367 --> 00:00:23.125
Primeiro,
vamos até components

00:00:23.167 --> 00:00:25.350
para criarmos
um novo arquivo,

00:00:25.392 --> 00:00:28.293
que chamaremos
de "NewTweet.js".

00:00:28.335 --> 00:00:32.207
Este será
um componente normal.

00:00:40.094 --> 00:00:42.597
Aqui temos a IU básica
do componente.

00:00:42.639 --> 00:00:44.797
Agora colocaremos
"Novo Tuíte"

00:00:44.839 --> 00:00:47.757
e, dentro do aplicativo,
o que faremos primeiro

00:00:47.799 --> 00:00:50.549
para podermos ver isto
conforme construímos,

00:00:50.591 --> 00:00:51.951
será importar.

00:00:51.993 --> 00:00:54.167
Agora, em vez de renderizarmos
Dashboard,

00:00:54.209 --> 00:00:56.654
renderizaremos
o componente NewTweet.

00:00:56.696 --> 00:00:59.496
Se estiver funcionando,
veremos aqui...

00:01:03.112 --> 00:01:05.408
Veremos
o componente NewTweet.

00:01:06.104 --> 00:01:11.590
Agora, nós faremos...
Isto irá lidar com a IU

00:01:11.632 --> 00:01:13.423
de criação do novo tuíte.

00:01:13.465 --> 00:01:17.927
Este será um componente controlado,
ou seja, o React estará no controle

00:01:17.969 --> 00:01:23.338
do texto do campo input,
e isso porque...

00:01:23.380 --> 00:01:28.153
Perceba que, quando não há texto,
o botão de envio fica desabilitado.

00:01:28.195 --> 00:01:30.728
Mas quando digitamos,
a IU é alterada

00:01:30.770 --> 00:01:32.514
e o botão é habilitado.

00:01:32.556 --> 00:01:34.250
Sempre que atualizarmos a IU

00:01:34.292 --> 00:01:36.563
a partir do estado atual
do componente,

00:01:36.605 --> 00:01:39.010
usaremos um componente
controlado.

00:01:39.052 --> 00:01:41.721
Text começará
como uma string vazia,

00:01:41.763 --> 00:01:44.730
e precisaremos de um método
handleChange,

00:01:44.772 --> 00:01:47.545
que criará um evento.

00:01:47.587 --> 00:01:52.410
Ele pegará o valor específico
do campo text

00:01:52.452 --> 00:01:56.426
a partir da propriedade target.value
no evento.

00:01:56.468 --> 00:01:58.787
Então chamamos setState...

00:02:01.387 --> 00:02:04.734
para atualizar o texto
do estado local.

00:02:04.776 --> 00:02:07.457
E esta é a primeira vez
neste projeto

00:02:07.499 --> 00:02:11.120
que usaremos o estado do componente
React e não do Redux,

00:02:11.162 --> 00:02:14.999
e isso porque é mais fácil,

00:02:15.041 --> 00:02:18.374
e colocar esta forma de estado
dentro do Redux

00:02:18.416 --> 00:02:19.921
não traria nenhum benefício.

00:02:19.963 --> 00:02:23.157
Na verdade, seria mais complicado
fazer isso

00:02:23.199 --> 00:02:27.288
em vez de colocar coisas
dentro do estado do componente.

00:02:27.975 --> 00:02:31.894
Se este estado for ser compartilhado
com alguns componentes,

00:02:31.936 --> 00:02:35.188
ou se precisarmos passá-lo
como propriedade ou camada,

00:02:35.230 --> 00:02:37.483
então poderíamos usar
o estado Redux.

00:02:37.525 --> 00:02:39.836
Mas, por ora,
não faz nenhum sentido usá-lo

00:02:39.878 --> 00:02:42.147
só porque temos
o estado do componente,

00:02:42.189 --> 00:02:44.491
não tem problema.

00:02:44.533 --> 00:02:48.963
E não usaremos o estado
do componente no nosso aplicativo.

00:02:49.005 --> 00:02:53.714
Agora que temos handleChange,
vamos criar o último método

00:02:54.337 --> 00:02:56.074
chamado "handleSubmit".

00:02:56.730 --> 00:02:58.911
Por ora,

00:02:59.791 --> 00:03:01.687
chamaremos...

00:03:03.078 --> 00:03:04.838
e.preventDefault.

00:03:05.871 --> 00:03:08.824
Obteremos o texto do estado.

00:03:09.959 --> 00:03:13.494
Vamos acabar adicionando
o tuíte à Store

00:03:14.942 --> 00:03:16.226
e faremos o console.log

00:03:16.268 --> 00:03:20.174
para - na hora de configurar -
garantir que está funcionando.

00:03:20.216 --> 00:03:26.205
Quando terminarmos,
devemos redefinir o campo text

00:03:26.247 --> 00:03:28.660
para que seja uma string vazia.
Parece bom.

00:03:28.702 --> 00:03:32.684
Agora temos os dois métodos
e o estado do componente.

00:03:32.726 --> 00:03:35.605
A próxima coisa
será construir a IU

00:03:35.647 --> 00:03:37.297
para este componente.

00:03:37.339 --> 00:03:41.665
Como lembrete,
estamos construindo esta IU.

00:03:41.707 --> 00:03:43.144
Ela terá um cabeçalho,

00:03:43.186 --> 00:03:47.793
a área de texto
e o botão de enviar.

00:03:47.835 --> 00:03:50.320
Vamos começar
com o cabeçalho.

00:03:50.362 --> 00:03:53.802
Teremos um h3,
cujo className será center.

00:03:54.553 --> 00:03:57.922
Ele dirá
"Escreva um novo tuíte".

00:04:00.289 --> 00:04:03.435
Abaixo disso,
teremos o formulário,

00:04:04.402 --> 00:04:08.977
cujo className
será new-tweet.

00:04:10.275 --> 00:04:12.673
E, quando o formulário
for entregue,

00:04:12.715 --> 00:04:16.948
invocaremos o método handleSubmit,
que já criamos.

00:04:17.971 --> 00:04:21.811
Agora o formulário precisa
de uma área de texto.

00:04:23.683 --> 00:04:25.625
Ela terá
algumas propriedades.

00:04:25.667 --> 00:04:28.483
O placeholder será
"O que está acontecendo?",

00:04:28.525 --> 00:04:31.026
assim como no Twitter.

00:04:31.068 --> 00:04:33.131
O valor será...

00:04:35.035 --> 00:04:38.962
text, e podemos desestruturar
isso aqui em cima.

00:04:39.004 --> 00:04:41.314
Isto virá de this.state.

00:04:43.530 --> 00:04:49.026
Quando o campo input mudar,
executaremos o método handleChange,

00:04:49.068 --> 00:04:51.105
que será responsável
pela atualização

00:04:51.147 --> 00:04:53.905
do estado
do nosso componente.

00:04:53.947 --> 00:04:58.433
O className será textarea,

00:04:58.475 --> 00:05:03.104
e a maxLength será
igual a 280.

00:05:03.146 --> 00:05:06.113
Isso parece bom,
mas o que desejamos fazer é,

00:05:06.155 --> 00:05:10.860
quando faltar menos
de 100 caracteres,

00:05:10.902 --> 00:05:13.646
exibir esta seção

00:05:13.688 --> 00:05:16.356
avisando ao usuário
sobre o espaço restante.

00:05:16.398 --> 00:05:19.791
O que podemos fazer aqui...

00:05:21.143 --> 00:05:22.998
é criar
a variável tweetLeft,

00:05:23.040 --> 00:05:27.321
que será "280 - text.Length".

00:05:27.363 --> 00:05:31.550
Agora podemos dizer que se
o comprimento do tuíte

00:05:31.592 --> 00:05:35.728
for menor ou igual a 100,

00:05:36.375 --> 00:05:39.782
então exibiremos este div,

00:05:39.824 --> 00:05:42.783
cujo className
será tweet-length,

00:05:44.830 --> 00:05:49.846
e que exibirá a quantidade
de caracteres que falta.

00:05:49.888 --> 00:05:52.582
Por fim,
renderizaremos um botão,

00:05:54.719 --> 00:05:56.556
que dirá "Enviar".

00:05:56.598 --> 00:06:00.077
Nele, teremos
algumas propriedades.

00:06:00.119 --> 00:06:05.437
O className será btn,
type será submit

00:06:06.238 --> 00:06:07.938
e ele ficará desabilitado

00:06:07.980 --> 00:06:12.892
se text for igual
a uma string vazia.

00:06:14.340 --> 00:06:16.723
Isto parece bom.

00:06:18.268 --> 00:06:20.043
Vamos testar.

00:06:20.085 --> 00:06:23.602
Veremos que,
ao clicarmos em enviar,

00:06:23.644 --> 00:06:26.146
o texto não será
adicionado ainda,

00:06:26.188 --> 00:06:28.045
pois faremos isso
no próximo vídeo,

00:06:28.087 --> 00:06:31.039
mas ele está aqui.
Vejamos se tudo está funcionando,

00:06:31.081 --> 00:06:33.119
ou seja, se o texto
vem do componente

00:06:33.161 --> 00:06:36.159
e se podemos registrá-lo
no console.

00:06:36.201 --> 00:06:38.055
A única alteração

00:06:38.097 --> 00:06:40.559
será uma anotação
para nós mesmos.

00:06:40.601 --> 00:06:44.431
Quando enviarmos
o novo tuíte,

00:06:44.473 --> 00:06:48.950
queremos redirecionar o usuário
para a View principal.

00:06:48.992 --> 00:06:52.366
Então aqui eu vou adicionar
um comentário

00:06:52.408 --> 00:06:54.517
para nos lembrarmos
disso posteriormente,

00:06:54.559 --> 00:06:56.889
quando começarmos a adicionar
o React Router.

00:06:56.931 --> 00:06:58.777
Então diremos...

00:07:00.647 --> 00:07:05.152
"redirecionar para a View principal
quando enviado."

