WEBVTT
Kind: captions
Language: pt-BR

00:00:00.128 --> 00:00:03.895
No momento,
vemos a linha do tempo

00:00:03.937 --> 00:00:06.503
ou o painel da nossa IU.

00:00:06.545 --> 00:00:09.238
Vou mostrar algo
que podemos alterar.

00:00:09.280 --> 00:00:11.254
Ao recarregarmos
o aplicativo,

00:00:11.296 --> 00:00:14.587
não vemos nada na IU
até que os dados sejam carregados.

00:00:14.629 --> 00:00:17.482
Então, neste vídeo,
nós baixaremos

00:00:17.524 --> 00:00:20.930
uma barra de carregamento Redux,
que podemos exibir aqui

00:00:20.972 --> 00:00:24.304
enquanto o aplicativo
estiver carregando,

00:00:24.346 --> 00:00:26.824
e o usuário
obterá a linha do tempo

00:00:26.866 --> 00:00:29.500
quando os dados terminarem
de serem carregados.

00:00:29.542 --> 00:00:32.956
No terminal, execute

00:00:32.998 --> 00:00:36.477
yarn add react-redux-loading.

00:00:40.630 --> 00:00:44.141
Ao terminar,
reinicie o aplicativo

00:00:44.183 --> 00:00:48.545
e siga
para o arquivo index.js,

00:00:48.587 --> 00:00:50.633
dentro de reducers.

00:00:50.675 --> 00:00:52.802
O que queremos fazer aqui

00:00:52.844 --> 00:00:54.794
é adicionar
algumas informações

00:00:54.836 --> 00:00:57.499
sobre o estado atual
de carregamento do aplicativo

00:00:57.541 --> 00:00:59.114
na Store Reducers.

00:00:59.156 --> 00:01:03.033
O pacote que acabamos
de baixar nos permite,

00:01:03.075 --> 00:01:04.810
em partes,

00:01:05.474 --> 00:01:09.200
exportar
uma loadingBarReducer...

00:01:11.889 --> 00:01:17.211
e isso nos permitirá
adicionar a reducer

00:01:17.253 --> 00:01:21.188
como parte do estado
da Store Redux.

00:01:21.230 --> 00:01:25.420
Agora, se observarmos
o estado da Store,

00:01:25.462 --> 00:01:28.172
teremos o mesmo de antes,

00:01:28.214 --> 00:01:31.516
mas também teremos
este objeto loadingBar.

00:01:31.558 --> 00:01:34.541
Com isso, existem
outras duas partes.

00:01:34.583 --> 00:01:37.652
Se quisermos usar isso
no aplicativo,

00:01:37.694 --> 00:01:40.557
também precisaremos de alguns
criadores de ação

00:01:40.599 --> 00:01:41.988
para podermos disparar

00:01:42.030 --> 00:01:44.508
a fim de alterar
o estado da loadingBar,

00:01:44.550 --> 00:01:46.806
e precisaremos
renderizar um componente,

00:01:46.848 --> 00:01:50.000
que exibirá a IU
da loadingBar.

00:01:50.649 --> 00:01:54.359
O legal deste pacote
react-redux-loading

00:01:54.401 --> 00:01:57.486
é que ele fornece
outras duas coisas.

00:01:57.528 --> 00:02:02.552
Em shared.js,

00:02:02.594 --> 00:02:06.025
nós importaremos
dois criadores de ação

00:02:06.067 --> 00:02:08.353
do pacote
react-redux-loading.

00:02:08.395 --> 00:02:12.280
O primeiro será chamado
de "showLoading"

00:02:12.322 --> 00:02:15.777
e o segundo será chamado
de "hideLoading".

00:02:15.819 --> 00:02:20.864
Antes de invocarmos
a função getInicialData,

00:02:20.906 --> 00:02:26.257
queremos disparar showLoading
para exibir a barra de carregamento.

00:02:26.299 --> 00:02:31.352
E, após obtermos as informações
de getInicialData,

00:02:31.394 --> 00:02:33.697
de atualizar os usuários,
os tuítes

00:02:33.739 --> 00:02:35.845
e de configurar
os usuários autenticados,

00:02:35.887 --> 00:02:38.795
dispararemos hideLoading.

00:02:38.837 --> 00:02:42.445
Embora seja
um pacote do MPM -

00:02:42.487 --> 00:02:44.242
uma biblioteca
de código aberto -,

00:02:44.284 --> 00:02:47.446
ainda podemos usar
os criadores de ação fornecidos

00:02:47.488 --> 00:02:51.687
para atualizar o estado
da Store Redux adequadamente.

00:02:51.729 --> 00:02:55.399
Agora, no arquivo App.js,

00:02:56.104 --> 00:02:59.550
vamos importar o componente
que nos foi fornecido.

00:02:59.592 --> 00:03:02.831
LoadingBar
será a exportação padrão.

00:03:04.087 --> 00:03:05.991
Agora,

00:03:06.033 --> 00:03:11.599
renderizaremos LoadingBar
dentro do método render.

00:03:11.641 --> 00:03:15.414
Se observarmos o aplicativo,
perceba que, ao recarregar,

00:03:15.456 --> 00:03:17.751
vemos
a barra de carregamento.

00:03:17.793 --> 00:03:21.199
E, quando os dados retornam,
ela é ocultada.

