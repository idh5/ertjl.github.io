WEBVTT
Kind: captions
Language: pt-BR

00:00:00.200 --> 00:00:02.435
Por estarmos usando
esta sintaxe

00:00:02.469 --> 00:00:06.473
em que retornamos uma função
de um criador de ação,

00:00:06.506 --> 00:00:09.209
precisamos garantir
que o middleware Redux-thunk

00:00:09.242 --> 00:00:10.844
dê suporte a ela.

00:00:10.877 --> 00:00:12.012
Enquanto estamos aqui,

00:00:12.045 --> 00:00:15.181
também vamos adicionar
nosso middleware logger.

00:00:15.215 --> 00:00:17.517
Vamos criar uma pasta
de middleware

00:00:17.550 --> 00:00:20.887
e, dentro dela,
teremos dois arquivos.

00:00:20.920 --> 00:00:25.325
O index.js, que vai exportar
a invocação de applyMiddleware,

00:00:25.358 --> 00:00:27.894
e nosso arquivo logger.js.

00:00:27.927 --> 00:00:29.963
Primeiro,
vamos criar o logger.

00:00:29.996 --> 00:00:35.235
Ao criarmos este logger
com esta sintaxe estranha,

00:00:35.268 --> 00:00:41.141
que contém store,
next e action,

00:00:41.175 --> 00:00:45.445
queremos que o logger mostre
quando uma ação é disparada

00:00:45.478 --> 00:00:50.950
e qual será o novo estado
depois que esta ação for disparada.

00:00:50.984 --> 00:00:54.287
Vamos agrupar tudo isto
no console.

00:00:54.320 --> 00:00:57.157
E vamos fazer o log
de qual é a ação,

00:00:57.190 --> 00:00:59.492
colocando .action no console.

00:00:59.526 --> 00:01:04.097
Podemos colocar o returnValue
aqui, usando next,

00:01:04.130 --> 00:01:06.666
que será disparado,
passando a ação para ele.

00:01:06.700 --> 00:01:08.301
Isto vai atualizar o estado.

00:01:09.369 --> 00:01:12.372
E vai nos permitir escrever
que o novo estado

00:01:12.405 --> 00:01:16.109
é o que conseguirmos escrevendo
store.getState.

00:01:16.142 --> 00:01:21.348
Nós queremos retornar
o returnValue.

00:01:21.381 --> 00:01:25.919
E queremos que a export default
seja logger.

00:01:25.952 --> 00:01:30.423
E, dentro de index.js,
na nossa pasta middleware,

00:01:30.457 --> 00:01:35.829
podemos importar logger,
vindo do logger.

00:01:35.862 --> 00:01:41.729
Temos que garantir que instalamos
o pacote redux-thunk.

00:01:41.771 --> 00:01:44.971
Então, no terminal,
você instala o pacote,

00:01:45.005 --> 00:01:47.841
escrevendo yarn
add redux-thunk.

00:01:50.510 --> 00:01:52.979
Quando terminar,
reinicie o aplicativo.

00:01:53.013 --> 00:01:58.018
Volte ao arquivo index.js
dentro da sua pasta middleware.

00:01:58.051 --> 00:02:02.784
Vamos importar
o middleware thunk

00:02:02.817 --> 00:02:04.820
que acabamos de instalar.

00:02:05.216 --> 00:02:09.162
E precisamos importar
a applyMiddleware

00:02:09.195 --> 00:02:11.865
do pacote Redux.

00:02:11.898 --> 00:02:17.270
E a invocação de applyMiddleware
será nossa export default.

00:02:17.303 --> 00:02:20.407
Podemos escrever thunk
e logger.

00:02:20.440 --> 00:02:24.744
E, dentro do arquivo index.js,

00:02:24.778 --> 00:02:28.748
temos que garantir que nossa Store
está ciente do middleware,

00:02:28.782 --> 00:02:34.454
então podemos importar o middleware
de ./middleware.

00:02:34.487 --> 00:02:40.060
Isto vai dizer:
"Ok. Importe a export default vinda

00:02:40.093 --> 00:02:43.563
do arquivo index.js
na pasta do middleware",

00:02:43.596 --> 00:02:48.368
que será nossa invocação
applyMiddleware aqui.

00:02:48.401 --> 00:02:53.440
Como o segundo argumento
para createStore,

00:02:53.473 --> 00:02:55.508
podemos passar o middleware.

00:02:55.542 --> 00:02:57.141
Mesmo sem escrever nada,

00:02:57.174 --> 00:02:59.443
porque não disparamos
nenhuma ação,

00:02:59.476 --> 00:03:01.348
é isto que faremos
no próximo vídeo.

00:03:01.381 --> 00:03:04.451
Quando o aplicativo carregar,
buscaremos os dados iniciais

00:03:04.484 --> 00:03:05.919
de que o aplicativo precisa.

