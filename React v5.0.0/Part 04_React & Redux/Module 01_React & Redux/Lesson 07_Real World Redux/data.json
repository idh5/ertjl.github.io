{
  "data": {
    "lesson": {
      "id": 578661,
      "key": "f126db7d-157a-4b30-90de-17bd8b07208b",
      "title": "Real World Redux",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "You’ll take your knowledge of Redux and utilize it by building a real-world Redux application. You’ll also learn advanced Redux topics like reducer composition and normalization.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f126db7d-157a-4b30-90de-17bd8b07208b/578661/1544040226290/Real+World+Redux+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f126db7d-157a-4b30-90de-17bd8b07208b/578661/1544040217105/Real+World+Redux+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 578511,
          "key": "9371c8b3-8df8-4fc8-a511-3b21ae438261",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9371c8b3-8df8-4fc8-a511-3b21ae438261",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578662,
              "key": "37e1a537-412b-4327-8da3-d38c574d5315",
              "title": "Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "B_DSLj-XyPI",
                "china_cdn_id": "B_DSLj-XyPI.mp4"
              }
            },
            {
              "id": 578731,
              "key": "75181d89-efb6-4054-ba74-4a06aee0eddf",
              "title": "L702  Introduction To Chirper V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tF5ES2V20xY",
                "china_cdn_id": "tF5ES2V20xY.mp4"
              }
            },
            {
              "id": 578508,
              "key": "cf05f004-1782-4365-8d94-4772a0ea6cc7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Check out the project, here: https://tylermcginnis.com/projects/redux-twitter/\n\nClone the starter code, here: https://github.com/udacity/reactnd-chirper-app",
              "instructor_notes": ""
            },
            {
              "id": 578509,
              "key": "5db41877-c654-4766-b117-a85be8481ed3",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5db41877-c654-4766-b117-a85be8481ed3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've cloned the starter repository.",
                "I've installed all of the packages.",
                "I've started the development server."
              ],
              "positive_feedback": "Awesome work!",
              "video_feedback": null,
              "description": "This is a major project, so you'll want to follow along from the beginning! So check off each of the following:"
            },
            {
              "id": 578733,
              "key": "6da5406b-bbd8-4e0b-9c42-2717bc2ae88e",
              "title": "L704  Starter Code V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bZpsQZrby9Q",
                "china_cdn_id": "bZpsQZrby9Q.mp4"
              }
            }
          ]
        },
        {
          "id": 578516,
          "key": "4b397702-886d-4c91-8175-f3606a58afed",
          "title": "Project Walkthrough",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4b397702-886d-4c91-8175-f3606a58afed",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578512,
              "key": "c74e290b-e55d-469f-89de-b3609e9a4ff3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Walkthrough\n\nTo help you solidify your understanding of React and Redux, we will do a project walkthrough. The project we'll be building is called “Chirper”. Building this simple Twitter clone will help you practice improving the predictability of an application's state; establishing strict rules for getting, listening, and updating the store; and identifying what state should live inside of Redux and what state should live inside of React components. \n\nAs with most things, there is more than one correct way to achieve a successful result. We will be discussing one approach to building a React/Redux project. We encourage you to come up with an approach that works for you. Regardless of the approach you choose, make sure always to plan out your project's architecture _before_ starting to code. ",
              "instructor_notes": ""
            },
            {
              "id": 578513,
              "key": "9fcec20c-67b5-4d05-8e98-add2792ef7fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Importance of Planning Your Project\n\nMany developers make the mistake of starting to code before they've put any thought into figuring out precisely what their app's architecture should be. This approach results in spending an incredible amount of time debugging, restructuring the code, and sometimes even starting over, completely!\n\nTrust us, planning out your project before starting to code will save you a _lot_ of time later on.\n\nIn our Chirper project walkthrough, we'll go over the planning stages as well as the coding stages of the project. ",
              "instructor_notes": ""
            },
            {
              "id": 578514,
              "key": "decaa5e5-ebaa-4023-94e8-a70b92793f84",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Planning Your React/Redux App's Architecture\n\nIn the Planning Stage, we will go over 4 steps that will help you come up with your app's architecture, which is often the trickiest part. \n\n## A Guide for the Planning Stages of Your Project\n\n1. Identify What Each View Should Look Like\n* Break Each View Into a Hierarchy of Components\n* Determine What Events Happen in the App\n* Determine What Data Lives in the Store",
              "instructor_notes": ""
            },
            {
              "id": 578515,
              "key": "49a1a538-d3f9-45c5-acb1-3f03fd7b47d8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Coding in Stages\n\nWe'll be building the project along together, breaking down each phase of the project's development. The first thing we we'll do is take a look at the different views the final project should have.\n\nLet's dive in!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578542,
          "key": "6bc00d52-4e7a-49e5-9988-a974f627bef1",
          "title": "Planning Stage: Steps 1&2 - Break Down Views and Components",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6bc00d52-4e7a-49e5-9988-a974f627bef1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578517,
              "key": "d1d8b026-4410-46a0-9d4e-7c77abc01f54",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Step 1 - Identify Each View\n\nWe need to determine the look and functionality of each view in your app. One of the best approaches is to draw each view of the app on paper so that you'll have a good idea of what information and data you're planning to have on each page.\n\nInstead of paper and pencil, you can be a bit more digital and use [software for creating mockups](https://codingsans.com/blog/mockup-tools). If you were given project specifications, check your mock against them to make sure that you have all of the required features.\n\nFor this project, we'll use the screenshots of the app we'll be building instead of mocks.\n\n# View for the Dashboard Page\n\nLet's start by looking at the Dashboard View.",
              "instructor_notes": ""
            },
            {
              "id": 578665,
              "key": "38883206-0a40-4ac2-a9ca-58a197caf9b5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd5601_nd019-redux-l7-views-01-dashboard/nd019-redux-l7-views-01-dashboard.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/38883206-0a40-4ac2-a9ca-58a197caf9b5",
              "caption": "The \"dashboard\" view displaying the navigation and tweets.",
              "alt": "",
              "width": 2432,
              "height": 1590,
              "instructor_notes": null
            },
            {
              "id": 578519,
              "key": "0b2ac888-9fa3-457b-adae-68f363345698",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Dashboard View Requirements\n\n* is located at the home route (`/`)\n* shows tweets sorted from most recently added at the top, to oldest at the bottom\n* each tweet will show:\n - the author\n - the time stamp\n - who the author is replying to\n - the text of the tweet\n - a reply button - with the number of replies (if higher than 0)\n - a like button - with the number of likes (if higher than 0)",
              "instructor_notes": ""
            },
            {
              "id": 578520,
              "key": "278ba66d-89c2-4241-8907-6e1546265fe9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# View for the Tweet Page",
              "instructor_notes": ""
            },
            {
              "id": 578666,
              "key": "ad0a4ea4-23c6-451a-b69f-cb43a916f8e3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd5636_nd019-redux-l7-views-02-tweet/nd019-redux-l7-views-02-tweet.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ad0a4ea4-23c6-451a-b69f-cb43a916f8e3",
              "caption": "The view for a single tweet.",
              "alt": "",
              "width": 2432,
              "height": 1880,
              "instructor_notes": null
            },
            {
              "id": 578522,
              "key": "e7359686-c4e6-44fd-8efe-0e3b84d15f7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Tweet Page View Requirements\n\n* is located at `/tweet/:id`\n* shows an individual tweet\n - the author\n - the time stamp\n - a reply button - with the number of replies (if higher than 0)\n - a like button - with the number of likes (if higher than 0)\n* has a reply form\n* shows all replies ",
              "instructor_notes": ""
            },
            {
              "id": 578523,
              "key": "dc89a6e0-7909-4ffa-8690-2cde6c70be32",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# View for Creating a New Tweet",
              "instructor_notes": ""
            },
            {
              "id": 578667,
              "key": "be66f42a-3231-49aa-b8c8-477f04db56a4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd5660_nd019-redux-l7-views-03-new-tweet/nd019-redux-l7-views-03-new-tweet.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/be66f42a-3231-49aa-b8c8-477f04db56a4",
              "caption": "The view for creating a new Tweet.",
              "alt": "",
              "width": 2234,
              "height": 1084,
              "instructor_notes": null
            },
            {
              "id": 578525,
              "key": "98e390f1-1423-4965-b7c8-07529d913adb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The New Tweet View Requirements\n\n* is located at `/new`\n* has a textbox for adding a new tweet",
              "instructor_notes": ""
            },
            {
              "id": 578526,
              "key": "f71431dd-ece7-4618-8758-4dabb6e78e4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# View Recap\n\nSo these are the 3 views we need in our app: \n\n* Dashboard\n* Tweet\n* New Tweet\n\nWe now have a clear idea of what we're trying to build and can be confident that our views meet all of the provided requirements.\n\nNow, let's move on to Step 2, where we'll make a conceptual skeleton of our app.",
              "instructor_notes": ""
            },
            {
              "id": 578527,
              "key": "f92944d2-1e48-44d9-b5be-0d7b55d47b19",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Step 2: Break Each View Into a Hierarchy of Components\n\nIn this step, we'll do 2 things:\n\n* draw boxes around every component\n* arrange our components into a hierarchy",
              "instructor_notes": ""
            },
            {
              "id": 578528,
              "key": "3e482d47-ac90-4fa8-92c3-6237f5744554",
              "title": "Review Checkpoint",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e482d47-ac90-4fa8-92c3-6237f5744554",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "How do you know whether something should be a component in a React app?"
              },
              "answer": {
                "text": "Thanks for your response. According to the [Thinking in React docs](https://reactjs.org/docs/thinking-in-react.html#step-1-break-the-ui-into-a-component-hierarchy), the **Single Responsibility Principle** is a great strategy!",
                "video": null
              }
            },
            {
              "id": 578529,
              "key": "82332a45-3d5d-4dca-bb40-dad7fbb1dc33",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "According to [Thinking in React docs](https://reactjs.org/docs/thinking-in-react.html#step-1-break-the-ui-into-a-component-hierarchy):\n\n> ...a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.",
              "instructor_notes": ""
            },
            {
              "id": 578530,
              "key": "304f7919-d601-4373-9ae4-ea47f178979f",
              "title": "Components Knowledge Check",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "304f7919-d601-4373-9ae4-ea47f178979f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are true?",
                "answers": [
                  {
                    "id": "a1522357913962",
                    "text": "Components let you split the UI into independent, reusable chunks.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522357920649",
                    "text": "Each view typically has a component that represents that view.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522357921184",
                    "text": "Presentational Components don't know where their data comes from.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522357921664",
                    "text": "Components that are connected to the store are called \"containers\".",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 578531,
              "key": "c1385eaf-d621-496c-a07f-68fcb49de62d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's get started by drawing boxes around all of the components and giving them all names. Remember that we have three views:\n\n* Dashboard\n* Tweet\n* New Tweet\n\nLet's start with the Dashboard view.",
              "instructor_notes": ""
            },
            {
              "id": 578532,
              "key": "6c40df22-aa00-409a-9f44-46fb198e7da2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Components for the Dashboard View",
              "instructor_notes": ""
            },
            {
              "id": 578668,
              "key": "59955a60-a0bc-4a63-b690-7c0c482803a0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd56d2_nd019-redux-l7-components-01-dashboard/nd019-redux-l7-components-01-dashboard.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/59955a60-a0bc-4a63-b690-7c0c482803a0",
              "caption": "Dashboard view broken up into Components.",
              "alt": "",
              "width": 2432,
              "height": 1590,
              "instructor_notes": null
            },
            {
              "id": 578534,
              "key": "af7689db-5a0f-49c9-8faa-9ee214cf811f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I broke this view into the following React Components:\n\n* **App** - the overall container for the project\n* **Navigation** - displays the navigation \n* **Tweets List** - responsible for the entire list of tweets\n* **Tweet** - in charge of display the content for a single tweet",
              "instructor_notes": ""
            },
            {
              "id": 578535,
              "key": "224cc731-ae49-402f-9707-db50d541411e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Components for the Tweet View",
              "instructor_notes": ""
            },
            {
              "id": 578669,
              "key": "e2d1b800-83ef-480b-b19c-220ce36cc2a3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd56f5_nd019-redux-l7-components-02-tweet/nd019-redux-l7-components-02-tweet.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e2d1b800-83ef-480b-b19c-220ce36cc2a3",
              "caption": "Tweet view broken up into Components.",
              "alt": "",
              "width": 2432,
              "height": 1880,
              "instructor_notes": null
            },
            {
              "id": 578537,
              "key": "013c955c-5800-4e67-b088-c20e40a05627",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I broke this view into the following React Components:\n\n* **App** - the overall container for the project\n* **Navigation** - displays the navigation \n* **Tweet Container** - displays a list of tweets\n* **Tweet** - displays the content for a single tweet\n* **New Tweet** - display the form to create a new tweet (reply)",
              "instructor_notes": ""
            },
            {
              "id": 578538,
              "key": "4cdf4a3a-6924-4f7d-80e9-ea65891401e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Components for the New Tweet View",
              "instructor_notes": ""
            },
            {
              "id": 578670,
              "key": "7115da11-0eda-4df0-b2a9-64a4c1896c43",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd570f_nd019-redux-l7-components-03-new-tweet/nd019-redux-l7-components-03-new-tweet.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7115da11-0eda-4df0-b2a9-64a4c1896c43",
              "caption": "New Tweet view broken up into Components.",
              "alt": "",
              "width": 2234,
              "height": 1084,
              "instructor_notes": null
            },
            {
              "id": 578540,
              "key": "caaa6430-ad28-4972-bcf5-e8150ab4ed5d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I broke this view into the following React Components:\n\n* **App** - the overall container for the project\n* **Navigation** - displays the navigation \n* **New Tweet** - display the form to create a new tweet",
              "instructor_notes": ""
            },
            {
              "id": 578541,
              "key": "cc911286-18f1-4898-8904-65c184e49152",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# All Components\n\nSo from the way I broke things down, the application will have the following components:\n\n* App\n* Navigation \n* Tweets List\n* Tweet Container\n* Tweet\n* New Tweet\n\nThis component hierarchy tells us which components will be used inside of other components. It gives us the skeleton of our app. All of these are presentational components. Right now, we don't care which components will be upgraded to containers. As we start building out the store, we'll create additional components that will be container components to get data from the store and pass it to the presentational components that need the data.\n\nThus far, we haven't done anything that's special to Redux; all of the steps above are applicable and useful for React applications that do not use Redux. \n\nRemember that Redux doesn't care about _how_ our app looks or what components it uses. Instead, it gives a way to manage the _state_ of the application in a predictable way. When we talk about _state_, we're really talking about _data_ - not just any kind of data inside the app, but data that can change based on the events in the app. \n\nLet's move on to Step 3, where we'll start thinking about the data in this app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578555,
          "key": "bb335fa7-c62b-432f-96d0-fdacf739ce1c",
          "title": "Planning Stage: Step 3 - Determine Events In The App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bb335fa7-c62b-432f-96d0-fdacf739ce1c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578543,
              "key": "ae7a4268-5fea-461d-9e4e-5ba58f591e9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Determine What Events Happen in the App\n\nWe need to take a look at _what_ is happening in each component. Let's determine what actions the app or the user is performing **on the data**. Is the data being set, modified, or deleted?...then we'll need an action to keep track of that event!\n\nLet's *italicize* the action and __bold__ the data.\n\n# Tweets List Component",
              "instructor_notes": ""
            },
            {
              "id": 578671,
              "key": "b4fee5f9-10bd-4a38-b1ce-951a8d294531",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd5744_nd019-redux-l7-store-01-tweet-list/nd019-redux-l7-store-01-tweet-list.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b4fee5f9-10bd-4a38-b1ce-951a8d294531",
              "caption": "The Tweets List Component",
              "alt": "",
              "width": 2432,
              "height": 1590,
              "instructor_notes": null
            },
            {
              "id": 578545,
              "key": "474cb345-a5ef-4f0d-a5ca-d0dd8709f744",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For the Tweets List component, the only information that we see is that we'll have to get a list of all of the tweets. So for this component, we just need to:\n\n* *get* the __tweets__\n\nSo the action type for event this will probably be something like `GET_LIST_OF_TWEETS` or `GET_DATA`.",
              "instructor_notes": ""
            },
            {
              "id": 578546,
              "key": "142aa77b-c05a-42bf-9da1-36af38ad79ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Tweet Component",
              "instructor_notes": ""
            },
            {
              "id": 578672,
              "key": "8c5007f3-9c46-44d4-a730-56084532d379",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd5771_nd019-redux-l7-store-02-tweet/nd019-redux-l7-store-02-tweet.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c5007f3-9c46-44d4-a730-56084532d379",
              "caption": "The Tweet Component",
              "alt": "",
              "width": 2432,
              "height": 1590,
              "instructor_notes": null
            },
            {
              "id": 578548,
              "key": "721929e9-ec0a-4a8b-9ff3-79d691516c99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* We *get* a particular tweet from a list of __tweets__.\n* We *get* the __authedUser (user that is currently logged in)__ so the user can *toggle* the likes on each __tweet__.\n* We *get* the __authedUser__ so the user can *reply* to a __tweet__.",
              "instructor_notes": ""
            },
            {
              "id": 578549,
              "key": "e79f7eee-9de1-4af3-a67d-17f6ee2a6be2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Tweet Container Component",
              "instructor_notes": ""
            },
            {
              "id": 578674,
              "key": "0e32c79a-af7c-44c5-9551-dfb683598364",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd578d_nd019-redux-l7-store-03-tweet-container/nd019-redux-l7-store-03-tweet-container.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0e32c79a-af7c-44c5-9551-dfb683598364",
              "caption": "The Tweet Container Component",
              "alt": "",
              "width": 2432,
              "height": 1880,
              "instructor_notes": null
            },
            {
              "id": 578551,
              "key": "282a436b-b6a2-455d-a7db-209bac6a7c53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* We *get* a specific tweet from a list of __tweets__.\n* We *get* the replies to a specific tweet from a list of __tweets__.",
              "instructor_notes": ""
            },
            {
              "id": 578552,
              "key": "b1999574-4cf0-48c7-9426-ce7a902ee389",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# New Tweet Component",
              "instructor_notes": ""
            },
            {
              "id": 578675,
              "key": "e0c3743d-88ef-4262-a827-6dc90099f61c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd57a6_nd019-redux-l7-store-04-new-tweet/nd019-redux-l7-store-04-new-tweet.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e0c3743d-88ef-4262-a827-6dc90099f61c",
              "caption": "The New Tweet Component",
              "alt": "",
              "width": 2234,
              "height": 1084,
              "instructor_notes": null
            },
            {
              "id": 578554,
              "key": "30a0d301-8a02-4970-99ee-fe9c32b9c358",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* We *get* the __authedUser__ so the user can *create* a new __tweet__.\n* We *set* the __text of the new tweet__.\n\nLet's move on to Step 4, where we'll determine which of the data above will live in the store.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578563,
          "key": "7eef8e73-7871-4526-b12a-23e3a15a3a16",
          "title": "Planning Stage: Step 4 - Data and the Store",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7eef8e73-7871-4526-b12a-23e3a15a3a16",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578556,
              "key": "89ed7552-9dda-4505-ae08-89d0b3abf475",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Determine What Data Lives in the Store\n\nRemember that the main problems that Redux (and the react-redux bindings!)  was meant to solve were:\n\n* Propagation of props through the entire component tree.\n* Ensuring consistency and predictability of the state across the app.\n\nAccording to Dan Abramov, the creator of Redux, we should follow the following principle for determining whether to store a piece of data in the store or in a React component:\n\n> \"Use Redux for state that matters globally or is mutated in complex ways… The rule of thumb is: do whatever is less awkward.\"\n\nTake a look at [Organizing State](https://redux.js.org/faq/organizing-state) and [How to choose between Redux's store and React's state?](https://github.com/reactjs/redux/issues/1287) for further information about this.\n\nFor each piece of data from Step 3, let's see whether it's used by multiple components or mutated in a complex way.\n\n*Text of the new tweet*\n_Used by_: New Tweet Component\n\nThis piece of data is not used by multiple components and is not mutated in a complex way. That means that it's a great candidate for component state instead of app state that resides in the store.\n\n*Tweets*\n_Used by_: Dashboard Component, Tweet Page Component, Tweet Component\n\nIn the Tweet Page Component, we need to show the reply tweets. Let's take a look at our starter code in the `_Data.js` file. This is how the tweets are stored in the database:\n\n```js\nlet tweets = {\n  tweetId: {\n    id: tweetId,\n    text: tweetText,\n    author: userId,\n    timestamp: timestamp,\n    likes: [userId1, userId2],\n    replies: [tweetId1, tweetId2],\n    replyingTo: tweetId_OR_null\n  }\n};\n```\n\nTo get the reply tweets, we can get the tweet with a specific id from the list of all of the tweets and access its `replies` property.\n\nIn the Dashboard Component, we need to access the current list of tweets. If the Dashboard Component knows the ID of the tweet that needs to be displayed, it can just pass that ID to the Tweet Component, which will render the tweet.\n\nIn the Tweet Component, we need to pick out a tweet with a specific id from the current list of tweets. \n\nThat means that we can store the tweets in the store and make the Tweet Page Component, the Dashboard Component, and the Tweet Component into containers (components that have access to the store via the `connect` function).\n\nAs soon as that data changes — if someone likes the tweet, for example — all of the components that use that data will update.",
              "instructor_notes": ""
            },
            {
              "id": 578702,
              "key": "0d4c741c-bdb5-41f6-bec6-5649bce41b0d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd64fe_1-2/1-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0d4c741c-bdb5-41f6-bec6-5649bce41b0d",
              "caption": "The Store contains a tweets property.",
              "alt": "",
              "width": 424,
              "height": 306,
              "instructor_notes": null
            },
            {
              "id": 578558,
              "key": "765a1a51-f5ea-4c7a-925f-71997d73c115",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Keep in mind that each tweet contains the author's name and the author's avatar. One way we could model our state is:\n\n```js\ntweets: {\n  tweetId: {tweetId, authorId, authorName, authorAvatar, timestamp, text, likes, replies, replyingTo},\n  tweetId: {tweetId, authorId, authorName, authorAvatar, timestamp, text, likes, replies, replyingTo}\n}\n```\n\nModeling the state this way is not wrong, but it's inconvenient if we want to extend the functionality of our application in the future to be able to find tweets made by a particular author. \n\nMoreover, this way of storing the data mixes the two types of objects:\n\n* tweets data\n* user data\n\nThis goes against the recommendation to normalize our state. According to the [Redux documentation](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape), here are the principles of state normalization:\n\n* Each _type_ of data gets its own \"table\" in the state.\n* Each \"data table\" should store the individual items in an object, with the IDs of the items as keys and the items themselves as the values.\n* Any references to individual items should be done by storing the item's ID.\n* Arrays of IDs should be used to indicate ordering.\n\nIn our application, normalized state would look like this:\n\n```js\n{\n  tweets: {\n    tweetId: { tweetId, authorId, timestamp, text, likes, replies, replyingTo},\n    tweetId: { tweetId, authorId, timestamp, text, likes, replies, replyingTo}\n  },\n  users: {\n    userId: {userId, userName, avatar, tweetsArray},\n    userId: {userId, userName, avatar, tweetsArray}\n  }\n}\n```\n\nOur store at this point:",
              "instructor_notes": ""
            },
            {
              "id": 578704,
              "key": "acb67fa5-23ed-46df-b44a-cd7bca82ac87",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6595_1/1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/acb67fa5-23ed-46df-b44a-cd7bca82ac87",
              "caption": "The Store contains a tweets property and a users property.",
              "alt": "",
              "width": 425,
              "height": 305,
              "instructor_notes": null
            },
            {
              "id": 578560,
              "key": "3b8df900-889d-44d7-98b1-2ec780890472",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's continue going through our data. \n\n*authedUser*\n_Used by_: Tweet Component, New Tweet Component\n\nEach Tweet Component needs to show whether the logged in used has liked a tweet. In order to do that, we need to know who the logged in user is. From looking at our Component Hierarchy from Step 2, we know that the Tweet Component gets used by multiple components. Therefore, we need to upgrade this component to a container so it could access the `authedUser` piece of data from the store to see whether to show a red heart.\n\nWe also know that for every new tweet, we'll have to record who the tweet's author (authedUser) is. The React way of storing state is to put the state in the most parent component and then pass it down to all the children that need it. In this app, that would mean storing in the App Component.\n\nOne way to do that is to store the authedUser in the App Component and then pass it down to the components that need access to it. While this works, it's inconvenient. It would be much simpler to just store the autheredUser in the store and then provide the Tweet Component access to the store. The New Tweet Component could then just dispatch an action with the text of the new tweet and the id of the tweet we're replying to as parameters in order to save the new tweet. \n\nSaving a tweet is an asynchronous operation and we could use redux thunks to do that. Thunks give us access to the store, so we could have the following action creator: \n\n```js\nfunction handleAddTweet(text, replyingTo) {\n  return (dispatch, getState) => {\n    const { authedUser } = getState();\n\n    return saveTweetToDatabase({\n      text,\n      author: authedUser,\n      replyingTo\n    }).then(tweet => dispatch(addTweet(tweet)));\n  };\n}\n```\n\nGenerally, accessing the store from an action creator is [considered an anti-pattern](https://stackoverflow.com/questions/35667249/accessing-redux-state-in-an-action-creator/35674575#35674575). Dan Abramov says that the few use cases where it's acceptable to do that are:\n\n> to check cached data before you make a request or to check whether you are authenticated (in other words, doing a conditional dispatch).\n\nAnother reason we would want to keep the `authedUser` piece of data in the store is that if we extend our application to include the ability to sign in and sign out, this functionality would be easy to manage with Redux.\n\nThe New Tweet Component doesn't need to access the `authedUser` piece of state, but it _does_ need to be able to dispatch an action to let the reducers know that a new tweet has been made. In order to have access to the `dispatch` method, a component must be connected to the store. In other words, it must be a container. So, we know that both the Tweet Component and the New Tweet Component will be upgraded to containers.",
              "instructor_notes": ""
            },
            {
              "id": 578677,
              "key": "d5ee0e03-e392-4955-b47a-3dd65282a5b9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd5886_1/1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d5ee0e03-e392-4955-b47a-3dd65282a5b9",
              "caption": "The Store contains a tweets property, a users property, and an authedUser property.",
              "alt": "",
              "width": 425,
              "height": 313,
              "instructor_notes": null
            },
            {
              "id": 578562,
              "key": "efc72c31-64e6-4317-a412-6bf3bc0e8095",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We are done making our store! While we were making our store, we also determined which components will be upgraded to containers, so our skeleton app is now even more complete.\n\nWe are now at a good point to start coding. We will go view by view and fill in the details of our skeleton along the way.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578575,
          "key": "7292f959-73ad-43e5-b95b-d2d9dbfa5657",
          "title": "Actions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7292f959-73ad-43e5-b95b-d2d9dbfa5657",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578564,
              "key": "7284a6f0-6d9b-417d-8d55-1909f40296a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's start from the Dashboard View. Our Dashboard View displays a list of tweets and a menu.\n\nWe need to take a look at _what_ is happening in this view. Let's determine what actions the app or the user is performing **on the data** - is the data being set, modified, or deleted?\n\nRemember that in Step 4 of the Planning Stage, we determined that our store will look like this:",
              "instructor_notes": ""
            },
            {
              "id": 578705,
              "key": "9aec4c70-7a3e-4084-90b1-449d925e0301",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd65c5_1/1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9aec4c70-7a3e-4084-90b1-449d925e0301",
              "caption": "The Store contains a tweets property, a users property, and an authedUser property.",
              "alt": "",
              "width": 425,
              "height": 305,
              "instructor_notes": null
            },
            {
              "id": 578566,
              "key": "0e34c0fb-2c72-4316-a9b0-4f94e92d4adf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When the app loads, the Dashboard View is displayed. The Dashboard Component therefore needs to:\n\n* *get* the __tweets__\n* *get* the __users__\n* *get* the __authedUser__\n\nThis data is stored in a database. For this view to load all of the tweets (including their author's avatars), we need to 1) get the `tweets` and `users` data from the database; and then 2) to pass that data into the component.",
              "instructor_notes": ""
            },
            {
              "id": 578567,
              "key": "c31afb42-37c9-45d8-8ea9-2f3e6b680ef4",
              "title": "API Best Practices for React Apps",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c31afb42-37c9-45d8-8ea9-2f3e6b680ef4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are best practices for making API requests in React apps? Select all that apply.",
                "answers": [
                  {
                    "id": "a1522358808678",
                    "text": "The component’s `render()` method.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522358819367",
                    "text": "The `componentDidMount()` lifecycle method",
                    "is_correct": true
                  },
                  {
                    "id": "a1522358842649",
                    "text": "The component's constructor.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522358848404",
                    "text": "The `shouldComponentUpdate()` lifecycle method.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 578568,
              "key": "892cc36c-ae76-4ee4-9f1b-418da90feabe",
              "title": "API Best Practices for React & Redux Apps",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "892cc36c-ae76-4ee4-9f1b-418da90feabe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are best practices for making API requests in React/Redux apps? Select all that apply.",
                "answers": [
                  {
                    "id": "a1522358923970",
                    "text": "From presentational components.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522358925545",
                    "text": "From the render method.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522358926130",
                    "text": "From the reducer.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522358927490",
                    "text": "From asynchronous action creators.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522358928049",
                    "text": "From the ComponentDidMount lifecycle method.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 578569,
              "key": "087243da-7b7f-4027-9ae3-d86dc3bbad97",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Remember how normal Action Creators return actions - simple Javascript objects that then go to all of our reducers? Making an API request is an asynchronous action, so we cannot just send a plain Javascript object to our reducers. Redux middleware can gain access to an action when it's on its way to the reducers. We'll be using the `redux-thunk` middleware in this example. \n\nIf the Redux Thunk middleware is enabled (which is done via the `applyMiddleware()` function), then any time your action creator returns a function instead of a Javascript object, it will go to the `redux-thunk` middleware.\n\nDan Abramov [describes](https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559) what happens next: \n\n> “The middleware will call that function with dispatch method itself as the first argument...The action will only reach the reducers once the API request is completed.\nIt will also “swallow” such actions so don't worry about your reducers receiving weird function arguments. Your reducers will only receive plain object actions—either emitted directly, or emitted by the functions as we just described.”\n\nHere's what a thunk action creator looks like:\n\n```js\nfunction handleInitialData () { \n return function (dispatch) {}\n}\n```\n\nWhich is equivalent to this in ES6:\n\n```js\nfunction handleInitialData () {\n return (dispatch) => {}\n}\n```\n\nNow, we need to give our components access to the data that came in. In other words, we need to populate the store with `tweets` and `users`.",
              "instructor_notes": ""
            },
            {
              "id": 578708,
              "key": "a54359b7-e1a6-4804-ac6a-1fb376125ae6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd66ac_image5/image5.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a54359b7-e1a6-4804-ac6a-1fb376125ae6",
              "caption": "The Model of Our Store",
              "alt": "",
              "width": 500,
              "height": 512,
              "instructor_notes": null
            },
            {
              "id": 578571,
              "key": "fc799710-5c40-429f-a95f-40f33e340dfd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **tweets** slice of the state in the store will be modified by actions that go through the _tweets_ reducer.\nThe **users** slice of the state in the store will be modified by actions that go through the _users_ reducer.\nAnd, similarly, the **authedUser** portion of the state in the store will be modified by actions that go through the _authedUser_ reducer.",
              "instructor_notes": ""
            },
            {
              "id": 578735,
              "key": "a662d386-91fd-48cf-a97c-7e81dfdaf220",
              "title": "L705  First Actions V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Px3vpZBHhHI",
                "china_cdn_id": "Px3vpZBHhHI.mp4"
              }
            },
            {
              "id": 578736,
              "key": "1a5b59bc-ff21-481c-89a4-817b8af90d63",
              "title": "L729 Authorized User Action V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-cqWNcFKB5E",
                "china_cdn_id": "-cqWNcFKB5E.mp4"
              }
            },
            {
              "id": 578574,
              "key": "53f031ab-28b3-4a12-a410-7b469cf9f881",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in the previous videos.](https://github.com/udacity/reactnd-chirper-app/commit/acc11b20446b9e19dc861ab9ec46d9de57aa6ea8)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578596,
          "key": "95858356-82cd-48eb-82ed-27c70683fbd9",
          "title": "Reducers & Middleware",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "95858356-82cd-48eb-82ed-27c70683fbd9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578576,
              "key": "2adb362b-c099-4317-bbfc-d91266cccee2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Reducers \n\nA [Reducer](https://redux.js.org/basics/reducers) describes _how_ an application's state changes. You’ll often see the [Object Spread Operator](https://redux.js.org/recipes/using-object-spread-operator) (`...`) used inside of a reducer because a reducer **must return a _new_ object** instead of mutating the old state. If you need a refresher on the spread operator, you can check out [this ES6 lesson](https://classroom.udacity.com/nanodegrees/nd019/parts/dd3570ff-515e-48d6-ac3c-771174cb5d40/modules/c29cc580-23a9-4543-8e94-c0754bacd7fc/lessons/42383e89-ac6a-491a-b7d0-198851287bbe/concepts/398d36e6-3393-4c50-b870-44a4dffb0ac4), which is located in the extracurricular content for this Nanodegree program.\n\nIf you want to know _why_ Redux requires immutability, check out the [Immutable Data\nSection of the docs:]( https://redux.js.org/faq/immutable-data#why-is-immutability-required).\n\nReducers have the following signature:\n\n```js\n(previousState, action) => newState\n```\n\nIn our app, the `tweets` reducer will determine how the `tweets` part of the state changes. The `users` reducer will determine how the `users` part of the state changes, and so forth:",
              "instructor_notes": ""
            },
            {
              "id": 578709,
              "key": "c1e50d13-da19-47dc-97bb-f063a6b0a99b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6717_image5/image5.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c1e50d13-da19-47dc-97bb-f063a6b0a99b",
              "caption": "This is how our state will be modified.",
              "alt": "",
              "width": 500,
              "height": 512,
              "instructor_notes": null
            },
            {
              "id": 578578,
              "key": "82bd1850-de07-4cbb-9e51-b507c17a7eff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Initializing State\n\nThere are 2 ways to initialize the state inside the store:\n\n* You can pass the initial state (or a part of the initial state) as `preloadedState` to the `createStore` function.\n\nFor example: \n\n```js\nconst store = createStore (\n  rootReducer,\n  { tweets: {} }\n);\n```\n\n* You can include a default state parameter as the first argument inside a particular reducer function.\n\nFor example: \n\n``` js\nfunction tweets (state = {}, action) {\n}\n```\n\nTo see how these approaches interact, check out the [Initializing State section of the documentation](https://redux.js.org/recipes/structuring-reducers/initializing-state).",
              "instructor_notes": ""
            },
            {
              "id": 578756,
              "key": "ed4081f7-4a60-4afd-b132-c713fd877e5d",
              "title": "L704  Reducers V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QnntUz8r9lo",
                "china_cdn_id": "QnntUz8r9lo.mp4"
              }
            },
            {
              "id": 578580,
              "key": "6ec0d97f-c80f-424d-a141-bf773943af24",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In our app, we initialized each slice of the store by setting a default `state` value as the first parameter inside each reducer function.\n\nAt this point, our store looks like this:",
              "instructor_notes": ""
            },
            {
              "id": 578715,
              "key": "d5a4ca62-1cd5-4142-9434-b6867ed7e944",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6ca3_image4/image4.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d5a4ca62-1cd5-4142-9434-b6867ed7e944",
              "caption": "Initialized State Inside the Store",
              "alt": "",
              "width": 425,
              "height": 313,
              "instructor_notes": null
            },
            {
              "id": 578582,
              "key": "705bd690-3f40-4d34-972b-49a37e016ac9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **tweets** slice of the state in the store has been initialized to an empty object.\nThe **users** slice of the state in the store has been initialized to an empty object.\nAnd, the **authedUser** slice of the state in the store has been initialized to null.",
              "instructor_notes": ""
            },
            {
              "id": 578583,
              "key": "68cc12e3-36ac-4fe0-8571-9ebbf46e55f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So, we have a `tweets` to manage the _tweets_ slice of the state, a `users` reducer to manage the _users_ slice of the state, and an `authedUser` reducer to manage the _authedUser_ portion of the state. Each of these reducers will manage just its own part of the state. \n\nWe will combine all of these reducers into one main, root reducer, which will combine the results of calling the `tweets` reducer, `users` reducer, and `authedUser` reducer into a single state object. Remember, we need to do this because the `createStore` function only accepts a single reducer.\n\n```js\ncombineReducers({\n  authedUser: authedUser,\n  tweets: tweets,\n  users: users\n});\n\n```\n\nOr using ES6's [property shorthand](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer), it can just be:\n\n```js\ncombineReducers({\n  authedUser,\n  tweets,\n  users\n});\n```",
              "instructor_notes": ""
            },
            {
              "id": 578584,
              "key": "6af61e2f-6e3c-4c64-a45e-f267c1ee6574",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that all of our reducers are set up, we need to actually create the store and provide it to our application. To actually use any of the code that we've written up to this point, we need to install the `redux` package. Then, to provide the store to our application, we'll also need to install the `react-redux` package.\n\nSo install these packages and then restart your terminal:\n\n```bash\nyarn add react-redux redux\n```",
              "instructor_notes": ""
            },
            {
              "id": 578585,
              "key": "abc1bdbf-9c3a-46a4-9fd5-5b607ea17226",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "abc1bdbf-9c3a-46a4-9fd5-5b607ea17226",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've installed the redux package.",
                "I've installed the react-redux package.",
                "I've restarted the project in the Terminal."
              ],
              "positive_feedback": "Thanks!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 578757,
              "key": "4753bf14-051d-4d5d-b822-8745e180b615",
              "title": "L704 Creating The Store V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ac3-sWH49XY",
                "china_cdn_id": "Ac3-sWH49XY.mp4"
              }
            },
            {
              "id": 578587,
              "key": "f5efe7c7-d702-45e0-9d50-cfff8b39e14b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in the previous videos.](https://github.com/udacity/reactnd-chirper-app/commit/99605e45670d8beabb571c77a8943d7c64f9be75)",
              "instructor_notes": ""
            },
            {
              "id": 578588,
              "key": "0fa89369-104d-44b2-8906-91f86505ed18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Redux applications have a single store. We have to pass the Root Reducer to our `createStore()` function in order for the store to know what pieces of state it should have. The point of creating a store is to allow components to be able to access it without having to pass the data down through multiple components.\n\nThe `Provider` component (which comes from the `react-redux` package) makes it possible for all components to access the store via the `connect()` function.",
              "instructor_notes": ""
            },
            {
              "id": 578589,
              "key": "afc1e54b-33c3-484c-80c4-90f8fa8e39ed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Middleware\n\nOur last bit of setup involves setting up the app's Middleware functions. Just like in the previous Todos application, we're going to create a _logger_ middleware that will help us view the actions and state of the store as we interact with our application. Also, since the `handleInitialData()` action creator in `src/actions/shared.js` returns a function, we'll need to install the `react-thunk` package:\n\n```bash\nyarn add redux-thunk\n```",
              "instructor_notes": ""
            },
            {
              "id": 578590,
              "key": "3685a22f-50ad-4807-a2f4-86c582442486",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3685a22f-50ad-4807-a2f4-86c582442486",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've installed the redux-thunk package.",
                "I've restarted the project in the Terminal."
              ],
              "positive_feedback": "Thanks!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 578591,
              "key": "2e4e70ef-191c-4b9c-ac24-a76547cf9b30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the next video, we’ll hook up our `redux-thunk` middleware, so our thunk action creators actually work. We’ll also put in logger middleware to make debugging easier. Do you remember how to build custom middleware?\n\nAll middleware follows this currying pattern:\n\n```js\nconst logger = (store) => (next) => (action) => {\n // ...\n}\n```\n\nUse [the Babel Repl](http://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=Q&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&lineWrap=false&presets=latest%2Creact%2Cstage-2&prettier=false&targets=&version=6.26.0&envVersion=) if you want to see this code in ES5.\n\nThe variable `logger` is assigned to a function that takes the `store` as its argument. That function returns another function, which is passed `next` (which is the next middleware in line or the dispatch function). That other function return another function which is passed an `action`. Once inside that third function, we have access to `store`, `next`, and `action`.\n\nIt’s important to note that the value of the `next` parameter will be determined by the `applyMiddleware` function. Why? All middleware will be called in the order it is listed in that function. In our case, the `next` will be `dispatch` because `logger` is the last middleware listed in that function.",
              "instructor_notes": ""
            },
            {
              "id": 578737,
              "key": "d2ac6c88-66b0-4f0e-95b8-7ecf7b42857c",
              "title": "L705 Project Middleware V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HXYqXy4uflw",
                "china_cdn_id": "HXYqXy4uflw.mp4"
              }
            },
            {
              "id": 578593,
              "key": "2dc4b303-d88a-4810-b152-87a54b7aef18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/6176c497a95b10c101a0d9104a160d44645b40f2)",
              "instructor_notes": ""
            },
            {
              "id": 578594,
              "key": "cc50f547-1554-4e17-a52d-8c6d2035eabd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here’s our middleware wiring: \n\n```js\nexport default applyMiddleware(\n  thunk,\n  logger\n);\n```\n\nEach thing returned by an action creator - be it an action or a function - will go through our thunk middleware. This is the source code for the thunk middleware:\n\n```js\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n```\n\nIf the thunk middleware sees an _action_, that action will be sent to the next middleware in line - the logger middleware. If it sees a _function_, the `thunk` middleware will call that function. That function can contain side effects - such as API calls - and dispatch actions, simple Javascript objects. These dispatched actions will again go to all of the middleware. The thunk middleware will see that it’s a simple action and pass the action on to the next middleware, the logger.\n\nOnce inside the logger:\n\n```js\nconst logger = store => next => action => {\n  console.group(action.type); \n  console.log(\"The action:\", action);\n  const returnValue = next(action);\n  console.log(\"The new state:\", store.getState());\n  console.groupEnd();\n  return returnValue;\n};\n```",
              "instructor_notes": ""
            },
            {
              "id": 578595,
              "key": "a6d8f8ad-046a-4623-8286-b1c121851300",
              "title": "Order of Middleware",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a6d8f8ad-046a-4623-8286-b1c121851300",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Would these two pieces of code make the logger produce the same output in the console?\n\n```js\nexport default applyMiddleware(\n  logger,\n  thunk\n);\n```\n\n```js\nexport default applyMiddleware(\n  thunk,\n  logger\n);\n```",
                "answers": [
                  {
                    "id": "a1522360418160",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1522360445805",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 578603,
          "key": "30175cf8-0b20-49a9-b972-6bb25dd36327",
          "title": "Initializing the App's Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "30175cf8-0b20-49a9-b972-6bb25dd36327",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578597,
              "key": "b4920b31-9be1-4d04-9d94-7d6fce3e440d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We have previously determined that we need to get the `users` and `tweets` data from our database and send that data to our store, along with the `authedUser` data, when the home page loads.\n\nWe have also created a thunk action creator that gets the data from the database and then dispatches actions to the store to set the three pieces of state we have in our store:\n\n* `users`\n* `tweets`\n* `authedUser`\n\nHere's what the `handleInitialData()` thunk action creator looks like:\n\n``` js \nfunction handleInitialData () {\n  return (dispatch) => {\n    return getInitialData()\n      .then(({ users, tweets }) => {\n        dispatch(receiveUsers(users));\n        dispatch(receiveTweets(tweets));\n        dispatch(setAuthedUser(AUTHED_ID));\n      });\n  };\n}\n\n```\nNow, the question is _where_ do we dispatch this action creator?",
              "instructor_notes": ""
            },
            {
              "id": 578598,
              "key": "7cf3f6b6-3445-4971-a665-f9b280a30d2a",
              "title": "Where to put the handleInitialData() function",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7cf3f6b6-3445-4971-a665-f9b280a30d2a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Think about this for a moment - Will our app work as desired if we dispatch the `handleInitialData()` action creator inside of the _Dashboard_ Component?",
                "answers": [
                  {
                    "id": "a1522359605783",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1522359614182",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 578599,
              "key": "8558466b-435e-4dd5-9ba3-471205614acf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When we walked through the architecture of our app, we saw that the _App_ Component will contain every other component. If we load the initial data (by dispatching the `handleInitialData()` action creator) from the App component, then no matter which route our users goes to, they’ll see all of the correct data.",
              "instructor_notes": ""
            },
            {
              "id": 578739,
              "key": "3b666d17-4c5a-425a-995e-573d25dd41a2",
              "title": "L706 Initial Data V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ydXVJmVqebQ",
                "china_cdn_id": "ydXVJmVqebQ.mp4"
              }
            },
            {
              "id": 578601,
              "key": "446f7eee-0232-42ee-9685-23148064e12f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/a81f80deee8ba2692f805ba445b761aeb7357398)",
              "instructor_notes": ""
            },
            {
              "id": 578602,
              "key": "53bafe6a-ca2e-4128-92d7-c6c7e0c70ea0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Using the `connect()` function upgrades a component to a container. Containers can read state from the store and dispatch actions. Read more about our ability to customize our container’s relationship with the store in the [`react-redux`\nAPI documentation](https://github.com/reactjs/react-redux/blob/master/docs/api.md). Make sure to go through the excellent examples that are provided in the linked documentation to gain a deeper understanding of Redux.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578609,
          "key": "18344f19-6939-4082-b7b4-b0b2644c0bec",
          "title": "Dashboard Component",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "18344f19-6939-4082-b7b4-b0b2644c0bec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578604,
              "key": "44efbe68-9fae-4b9a-89af-7f7c4d1fbbb5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dashboard Component\n\nIn Step 4 of the Planning Stage, we determined that our store should look like this:\n\nIn our application, normalized state would look like this:\n\n```js \n{\n  tweets: {\n    tweetId: { tweet id, author’s id, timestamp, text, likes, replies, replyingTo},\n    tweetId: { tweet id, author’s id, timestamp, text, likes, replies, replyingTo}\n  },\n  users: {\n    userId: {user’s id, user’s name, avatar, tweets array},\n    userId: {user’s id, user’s name, avatar, tweets array}\n  }\n}\n\n```\n\nIn the Planning Stage, we also determined that the Dashboard Component will be a container since it will need access to the `tweets` part of the store in order to display the list of tweets.\n\nTo make a container, we need to make use the `connect()` function. Remember that the signature of the connect function looks like this:\n\n```js\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n```\nTake a look at the [react-redux documentation](https://github.com/reactjs/react-redux/blob/master/docs/api.md) if you need a refresher.\n\nThese details about `mapStateToProps` and `mapDispatchToProps` are crucial:\n\n> mapStateToProps - If this argument is specified, the new component will subscribe to Redux store updates. This means that any time the store is updated, mapStateToProps will be called. The results of mapStateToProps must be a plain object, which will be merged into the component’s props. If you don't want to subscribe to store updates, pass null or undefined in place of mapStateToProps.\n\n> mapDispatchToProps - If an object is passed, each function inside it is assumed to be a Redux action creator. An object with the same function names, but with every action creator wrapped into a dispatch call so they may be invoked directly, will be merged into the component’s props.\n> If a function is passed, it will be given dispatch as the first parameter. It’s up to you to return an object that somehow uses dispatch to bind action creators in your own way. (Tip: you may use the [bindActionCreators()](https://redux.js.org/api-reference/bindactioncreators) helper from Redux.)\n\nDo you remember the Component Hierarchy we made in Step 2 of the Planning Stage? We said that the Tweet Component will be inside of the Dashboard Component. If the Dashboard Component knows the ID of the tweet that needs to be displayed, it can just pass that ID to the Tweet Component, which will render the tweet.\n\nRemember that the signature of the `mapStateToProps` function is:\n\n```js\nmapStateToProps(state, [ownProps])\n```\n\n* `state` is the state inside the store\n* `ownProps` are the properties that have been passed to this component from a parent component\n\nSince we only care about the `tweets` part of the store, we can use destructuring to pass the `tweets` part of the state in the store as the parameter to the `mapStateToProps()` function.",
              "instructor_notes": ""
            },
            {
              "id": 578717,
              "key": "27383d31-959c-4952-a789-65ad99af2481",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6d18_untitled-diagram-21/untitled-diagram-21.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/27383d31-959c-4952-a789-65ad99af2481",
              "caption": "The breakdown of our `mapStateToProps` function",
              "alt": "",
              "width": 500,
              "height": 512,
              "instructor_notes": null
            },
            {
              "id": 578606,
              "key": "d9ebf9a6-baec-40da-8710-a09b9e371a30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So this is what the Dashboard Component's `mapStateToProps()` function looks like:\n\n```js\nfunction mapStateToProps( {tweets} ){\n  return { tweetIds: Object.keys(tweets) };\n}\n\n```\n\nThe important things to note are that:\n\n* **tweets** is the slice of the state that this component cares about\n* **tweetIds** will show up as a property on this container",
              "instructor_notes": ""
            },
            {
              "id": 578740,
              "key": "a2c43756-a32f-40b2-921b-0d5b5cb3b367",
              "title": "L707 Dashboard V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xjqf3vm3KjY",
                "china_cdn_id": "xjqf3vm3KjY.mp4"
              }
            },
            {
              "id": 578608,
              "key": "faa058b1-4278-4d07-9a74-280747b5676e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/baadd738d83c0b0905577192df8794d5460c2ba4)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578621,
          "key": "3be2fe87-b450-4384-a64f-c42e9756b0f6",
          "title": "Tweet Component",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3be2fe87-b450-4384-a64f-c42e9756b0f6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 633512,
              "key": "326df952-afe7-4f79-ae59-f43bb9724d3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Tweet Component\n\nIn Step 4 of the Planning Stage, we saw that this component will need access to the following data:\n\n* `users`\n* `tweets`\n* `authedUser`. \n\nLet's connect this component to the store!",
              "instructor_notes": ""
            },
            {
              "id": 578741,
              "key": "20028524-1070-492b-8262-88e6cda29c23",
              "title": "L710  Tweet State V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Q6sAKQaQTJ8",
                "china_cdn_id": "Q6sAKQaQTJ8.mp4"
              }
            },
            {
              "id": 578610,
              "key": "73a4b332-2b23-4f31-8d35-daf86d19c72a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice how we're passing an `id` prop along to the Tweet component:\n\n```js\n<Tweet id={id} />\n```\n\nBecause we're doing this, the `mapStateToProps` function's second argument (`ownProps`) will be an object that has an `id` property with this value.",
              "instructor_notes": ""
            },
            {
              "id": 578718,
              "key": "05e32012-a677-4c58-a7ec-afe1bba70fbe",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6d97_untitled-diagram-21-4/untitled-diagram-21-4.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/05e32012-a677-4c58-a7ec-afe1bba70fbe",
              "caption": "Arguments inside the `mapStateToProps` function",
              "alt": "",
              "width": 622,
              "height": 273,
              "instructor_notes": null
            },
            {
              "id": 578614,
              "key": "2e585aab-d11e-45f7-9bf1-2aeadbff20bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So as of right now, this is what the `mapStateToProps` function looks like:\n\n```js\nfunction mapStateToProps ({authedUser, users, tweets}, { id }) {\n  const tweet = tweets[id];\n\n  return {\n    authedUser,\n    tweet: formatTweet(tweet, users[tweet.author], authedUser)\n  };\n}\n\n```\n\nThe important thing to notice here is that `mapStateToProps` accepts two arguments:\n\n* the state of the store\n* the props passed to the Tweet component\n\nWe're destructuring both arguments. From the store, we're extracting:\n\n* the `authedUser` data \n* the users data\n* the tweets data\n\nThen we're getting the `id` from the props passed to the Tweets Component. We need both of these pieces of data (coming from the store's state and coming from the component) so that we can determine which Tweet should be displayed by Tweet Component.",
              "instructor_notes": ""
            },
            {
              "id": 578742,
              "key": "5757db02-8581-4cba-85ca-999e68099f03",
              "title": "L733  Handling A Parent Tweet V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fNHUigCJpkY",
                "china_cdn_id": "fNHUigCJpkY.mp4"
              }
            },
            {
              "id": 578616,
              "key": "5dafc75b-4bc3-415d-af5b-4556616f73ee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So this is what the final state of the Tweet Component's `mapStateToProps` function looks like:\n\n```js\nfunction mapStateToProps ({authedUser, users, tweets}, { id }) {\n  const tweet = tweets[id];\n  const parentTweet = tweet ? tweets[tweet.replyingTo] : null;\n\n  return {\n    authedUser,\n    tweet: tweet\n      ? formatTweet(tweet, users[tweet.author], authedUser, parentTweet)\n      : null\n  };\n}\n\n```\n\nNow that we're getting all of the data we need from the store, we can actually build the UI for the Tweet Component. ",
              "instructor_notes": ""
            },
            {
              "id": 578743,
              "key": "a8204228-f54d-4764-bb37-ce83c763ec8d",
              "title": "L709 Tweet UI V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "es890SLMDqM",
                "china_cdn_id": "es890SLMDqM.mp4"
              }
            },
            {
              "id": 578618,
              "key": "beea5d31-dce6-418f-927c-97b74f2d8b11",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here are the code changes for building out the Tweet Component.](https://github.com/udacity/reactnd-chirper-app/commit/6db39add5b99c8e4996896ff3454c0239de4d5cc)",
              "instructor_notes": ""
            },
            {
              "id": 578744,
              "key": "7824c50a-21a9-4961-9aa9-1fd7a17c10c0",
              "title": "L710 Loading V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FvmgIlJPjQ8",
                "china_cdn_id": "FvmgIlJPjQ8.mp4"
              }
            },
            {
              "id": 578620,
              "key": "2582efc1-4ab7-4354-87b9-3384e6539dc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/1fdbaaa20d45fbb94dc461405f756f17815f20fd)",
              "instructor_notes": ""
            },
            {
              "id": 730212,
              "key": "43ac8ac0-dc7a-406f-a4bb-027c91c807e5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Further Research\n\n* [The Perils of Using a Common Redux Anti-Patterns](https://itnext.io/the-perils-of-using-a-common-redux-anti-pattern-344d778e59da)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578632,
          "key": "2a27b356-bde5-43bb-b649-d1b61d23af42",
          "title": "Liking a Tweet",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2a27b356-bde5-43bb-b649-d1b61d23af42",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578622,
              "key": "d553113d-2e0b-41f5-99c0-a450f6618519",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Liking a Tweet\n\nIn the Planning stage, we figured out that we needed to give the Tweet Component access to the `authedUser` data for the tweet to correctly show whether the logged in user liked the tweet or not and for the user to reply to tweets. We also figured out that once the user likes or un-likes a tweet, that information needs to be reflected in the store for other components show the correct data.\n\nWe’ll need to write an asynchronous action creator since we need to record whether the logged in user liked a tweet not only in the store but also in our database. [Redux thunks](https://github.com/gaearon/redux-thunk) to the rescue! ",
              "instructor_notes": ""
            },
            {
              "id": 578727,
              "key": "9bf5e5de-1258-4062-83f3-a28c19d899ed",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6f56_untitled-diagram-22/untitled-diagram-22.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9bf5e5de-1258-4062-83f3-a28c19d899ed",
              "caption": "A Thunk Action Creator returns a function that will be passed `store.dispatch` and `store.getState` when it's invoked.",
              "alt": "",
              "width": 500,
              "height": 512,
              "instructor_notes": null
            },
            {
              "id": 578624,
              "key": "04fdee6e-f023-49a4-a7ed-acce6cb38362",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can write this as our thunk action creator:\n\n```js\nfunction handleToggleTweet (info) {\n  return (dispatch) => {\n    saveLikeToggle(info)\n    .then(() => {\n      dispatch(toggleTweet(info));\n      })\n    .catch((e) => {\n      console.warn('Error in handleToggleTweet: ', e);\n      alert('There was an error liking the tweet. Try again.');\n  });\n};\n}\n\n```\n\nOur code only updates the UI once we receive confirmation that the backend update was successful. This can make the app seem laggy. \n\nA common approach to UI updates is Optimistic Updating; updating the UI _before_ the action gets recorded on the backend so it seems more performant. We’ll see that approach in the video below as we build out our Tweet Actions.",
              "instructor_notes": ""
            },
            {
              "id": 578745,
              "key": "c693331a-6949-4295-878f-0eb00fa60725",
              "title": "L713  Like Tweet  Actions V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2YTZZJTs4aw",
                "china_cdn_id": "2YTZZJTs4aw.mp4"
              }
            },
            {
              "id": 578626,
              "key": "2aeb132f-dd56-4d0b-9158-7a12821271e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Like Tweet Reducer\n\nRemember that the `tweets` reducer will determine how the `tweets` part of the state changes:",
              "instructor_notes": ""
            },
            {
              "id": 578722,
              "key": "8265a707-864d-4598-84c0-cd64388b134d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abd6e49_untitled-diagram-23/untitled-diagram-23.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8265a707-864d-4598-84c0-cd64388b134d",
              "caption": "Each reducer modifies its own slice of the state.",
              "alt": "",
              "width": 500,
              "height": 512,
              "instructor_notes": null
            },
            {
              "id": 578628,
              "key": "0a9e4c7a-a16f-4907-ad44-c63da7f62c00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When liking a tweet (or unliking a tweet), the state for that specific tweet needs to change - either the tweet's `like` property (which, if you remember, is an array and will contain the names of the users that have liked the tweet) will need to change to include the user that clicked it (if they're liking the tweet) or the user's name will need to be removed from the array (if they're unliking the tweet).\n\nSo we need to update the reducer to handle these changes.",
              "instructor_notes": ""
            },
            {
              "id": 578746,
              "key": "936c7907-28e9-4a34-b588-407ff16d40ec",
              "title": "L734  Like Tweet  Reducer V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bHklEREK6gw",
                "china_cdn_id": "bHklEREK6gw.mp4"
              }
            },
            {
              "id": 578747,
              "key": "23ea9347-0c25-4120-b766-75266cd5c0ef",
              "title": "L735  Like Tweet  Component V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hPvYle9FdBk",
                "china_cdn_id": "hPvYle9FdBk.mp4"
              }
            },
            {
              "id": 578631,
              "key": "acb2440b-3c52-463c-9279-29826c5eae8c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here are the code changes for the functionality of liking a tweet.](https://github.com/udacity/reactnd-chirper-app/commit/936be890e97aa1f241e792ccd3c542964dd71aa5)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578647,
          "key": "7630b536-371d-4c47-8ba8-bacf507fac0b",
          "title": "New Tweet Component",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7630b536-371d-4c47-8ba8-bacf507fac0b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578748,
              "key": "c8be06a0-dccd-47ca-920c-43c287055092",
              "title": "L712 New Tweet UI V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aEAUnJhyqCw",
                "china_cdn_id": "aEAUnJhyqCw.mp4"
              }
            },
            {
              "id": 578634,
              "key": "2e830898-bf41-4978-ad7d-e6f864faffe3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/c53a69a8b09a0dcab378761f683781c49ead072d)",
              "instructor_notes": ""
            },
            {
              "id": 578635,
              "key": "a3d9231d-f191-435d-8a0b-cd3236339af7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding a New Tweet\n\nLet’s now work on the logic of adding a new tweet. Once the user submits a new tweet, it should show up in the list of all of tweets and be added to our database. Since this tweet will be used by more than one component, we know that we want to make sure the store is modified to reflect the updated list of tweets. Recording tweets in a database is an asynchronous operation, so we can use [Redux Thunk](https://github.com/gaearon/redux-thunk) to issue the API request.",
              "instructor_notes": ""
            },
            {
              "id": 578750,
              "key": "99e27a2f-a787-4974-b5dc-77640b355f1a",
              "title": "L715 New Tweet Logic  Actions V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MyjJlyv2H0I",
                "china_cdn_id": "MyjJlyv2H0I.mp4"
              }
            },
            {
              "id": 578637,
              "key": "bf05bb85-6399-4679-b992-a17580b1a3b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s quickly cover a common JavaScript bug at this point.\n\nMake sure that whenever an arrow function has curly braces, you’re using a `return` statement, if you want to return something. ",
              "instructor_notes": ""
            },
            {
              "id": 578638,
              "key": "7d08c094-9a9c-4d6f-8af6-b494c5144b22",
              "title": "Common Bug - ES6",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7d08c094-9a9c-4d6f-8af6-b494c5144b22",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given this array, `const nums = [1,2,3];` Which statements produce the following output `[3,3,3]` ? Select all that apply.",
                "answers": [
                  {
                    "id": "a1522358133063",
                    "text": "`nums.map(num => nums.length);`",
                    "is_correct": true
                  },
                  {
                    "id": "a1522358146670",
                    "text": "`nums.map(num => { nums.length });`",
                    "is_correct": false
                  },
                  {
                    "id": "a1522358147179",
                    "text": "`nums.map(num => { return nums.length });`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 578639,
              "key": "ecf9cfc5-84c2-4530-8237-be45bcc2664a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We know that our store looks like this:\n\n```js\n{\n  tweets: {\n    tweetId: { tweetId, authorId, timestamp, text, likes, replies, replyingTo}, \n    tweetId: { tweetId, authorId, timestamp, text, likes, replies, replyingTo}\n  },\n  users: {\n    userId: {userId, userName, avatar, tweets array},\n    userId: {userId, userName, avatar, tweets array}\n  },\n  authedUser: userId\n}\n```\n\nLet’s start working on the New Tweet Reducer. How will we be modifying the state to reflect the new tweet?\n\nThis is going to be a two-part process:\n\n1. the new tweet needs to be added to the list of tweets\n* an already existing tweet needs to be modified if the new tweet is a response to another tweet\n\nIn this reducer, we'll 1) concatenate the new tweet to the list of the already-existing tweets. Remember that the [object spread operator](https://redux.js.org/recipes/using-object-spread-operator) offers us the most concise way of doing that; and 2) modify the `replies` property of the tweet the new tweet is replying to.",
              "instructor_notes": ""
            },
            {
              "id": 578751,
              "key": "89a30e1a-aad0-4437-9517-0618b269567e",
              "title": "L736  New Tweet Logic  Reducer V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YdmgH1-U5jM",
                "china_cdn_id": "YdmgH1-U5jM.mp4"
              }
            },
            {
              "id": 578752,
              "key": "176cb94e-a9a1-4f50-b552-0b8b94bafc0c",
              "title": "L737  New Tweet Logic  Component V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hWGIn12dGOM",
                "china_cdn_id": "hWGIn12dGOM.mp4"
              }
            },
            {
              "id": 578642,
              "key": "5b459a08-63de-4c22-a245-f1d5b3ee21e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here are the changes for adding the new tweet logic-handling code..](https://github.com/udacity/reactnd-chirper-app/commit/993f1b903e62bbd9ba78afdf4e8d698b7a0b8c66)",
              "instructor_notes": ""
            },
            {
              "id": 578643,
              "key": "a6984c16-6f62-46e8-8edc-0bdb987bcc10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " In Step 2 of the Planning Stage, we determined that the New Tweet Component will show up inside of the App Component when the user goes to the `/new` page and that it will be inside of the Tweet Page Component when the user is on the `/tweet/:id` page. \n\nWhen the user is at the `/new` route, the new tweet will not be attached to another tweet. When the user is at the `tweet/:id` route, the new tweet will be attached to the already-displayed tweet. Notice that the route already contains the parent tweet’s `id`. We can just pass the `id` from the route to the New Tweet Component whenever we’re creating a reply tweet. \n\nWhat happens when someone clicks “Submit” to add a new tweet? The New Tweet Component will need to communicate with our store. We communicate with the store by dispatching actions. `dispatch` is a method on the store. That means that the New Tweet Component needs to be `connect()`ed to Redux. Once a component is connected to the store, it will have `dispatch` on its `props`.",
              "instructor_notes": ""
            },
            {
              "id": 578644,
              "key": "86171044-57b5-49ad-9d96-c8d288294522",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "86171044-57b5-49ad-9d96-c8d288294522",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When will the `mapStateToProps` function be called? Select all that apply.",
                "answers": [
                  {
                    "id": "a1522358259974",
                    "text": "Anytime the store is updated",
                    "is_correct": true
                  },
                  {
                    "id": "a1522358261868",
                    "text": "Whenever the component receives new props.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522358262408",
                    "text": "Neither option correctly describes when the `mapStateToProps` function will be called.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 578753,
              "key": "b0237d32-b7a2-43f3-831a-eb8a3b109f67",
              "title": "L714 Tweet Page V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4g9l8T2MLt4",
                "china_cdn_id": "4g9l8T2MLt4.mp4"
              }
            },
            {
              "id": 578646,
              "key": "a02f8cd6-6e70-41e2-956e-c8c464c71bcb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/171ed69e495cadab991aff900b9ad5e2f4005c20)",
              "instructor_notes": ""
            },
            {
              "id": 730357,
              "key": "d618a51d-69af-49e7-a8f6-39067330264f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Lesson Challenge\n\nSuppose we replaced the `case ADD_TWEET:` portion of the code in the `reducers/tweets` file with the code below.\n\n* Would the state change in the same way? Why or why not?\n* Would the new tweet appear on the page? Why or why not?\n\nRun the code to check your answer.\n\n```js\n...\ncase ADD_TWEET :\n   const { tweet } = action\n\n   let replyingTo = {}\n   if (tweet.replyingTo !== null) {\n      const allReplies = state[tweet.replyingTo].replies.concat([tweet.id]);\n\n      return {\n      ...state,\n      [action.tweet.id]: action.tweet,\n      [action.tweet.replyingTo.replies]: allReplies\n      }\n   }\n\n   return {\n      ...state,\n      [action.tweet.id]: action.tweet,\n      ...replyingTo,\n   }\n...\n```",
              "instructor_notes": ""
            },
            {
              "id": 730356,
              "key": "b6a8e9de-9104-437a-8528-5d4437226514",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Further Learning\n\nCarefully go over the [Immutable Update Patterns](https://redux.js.org/recipes/structuringreducers/immutableupdatepatterns) and [Designing the State Shape](https://redux.js.org/basics/reducers#designing-the-state-shape) pages in the Redux documentation.",
              "instructor_notes": ""
            },
            {
              "id": 730365,
              "key": "92ea84ee-b0de-40b6-8ce6-0fd761a03b8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Remember, that [doing a shallow copy of the top level is not sufficient - [nestedState objects] should be copied as well.](https://redux.js.org/recipes/structuringreducers/immutableupdatepatterns)\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578652,
          "key": "598666bd-ab83-46f6-9532-eb0820b12cd8",
          "title": "Using React Router",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "598666bd-ab83-46f6-9532-eb0820b12cd8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578648,
              "key": "0e1eddca-9bae-4a78-9abf-4c6169443225",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We're pretty much finished with everything in our app! Our final step is to get the app to handling routing. We'll do this we React Router.\n\n```bash\nyarn add react-router-dom\n```",
              "instructor_notes": ""
            },
            {
              "id": 578649,
              "key": "699a9a6a-ba33-479c-a502-bb8128993537",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "699a9a6a-ba33-479c-a502-bb8128993537",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've installed the react-router-dom package.",
                "I've restarted the project in the Terminal."
              ],
              "positive_feedback": "Thanks!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 730370,
              "key": "da17f307-c9ef-449b-ad86-bf2aa525a0b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quick [React Router](https://reacttraining.com/react-router/web/guides/philosophy) Review\n\n### `BrowserRouter` Component\n\n`BrowserRouter` listens for changes in the URL and makes sure that the correct screen shows up when the URL changes.\n\nDoing this: \n\n``` js\n<BrowserRouter>\n   <App />\n</BrowserRouter>\n```\n\nwill allow us to \n\n* use the other components `browser-router-dom` comes with inside of our app\n* listen to the URL so that whenever the url changes, the routing components will be notified of the change\n\n### `Link` Component\n\n``` js\n<Link to=\"/about\">About</Link>\n```\n\nUsers navigate through React apps with the help of the `Link` Component. \n\nThe `Link` component talks to the `BrowserRouter` and tells it to update the URL. By passing a `to` property to the `Link` component, you tell your app which path to route to.\n\nWhat if you wanted to pass state to the new route? Instead of passing a string to `Link`s `to` prop, you can pass it an object like this:\n\n``` js\n<Link to={{\n pathname: '/courses',\n search: '?sort=name',\n hash: '#the-hash',\n state: { fromDashboard: true }\n}}>\n Courses\n</Link>\n```                ",
              "instructor_notes": ""
            },
            {
              "id": 578754,
              "key": "3730f049-8661-4fed-9b3d-dd5c95c5dd2f",
              "title": "L715 React Router V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_cB8CE_Q3Yk",
                "china_cdn_id": "_cB8CE_Q3Yk.mp4"
              }
            },
            {
              "id": 578651,
              "key": "e4097922-c4ff-4ce2-aef6-1d1353edeb60",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-chirper-app/commit/512ddca69dd99d67acf4b9795b1000c2e728e899)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578655,
          "key": "63e99514-6df9-42d7-8674-acd394948673",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63e99514-6df9-42d7-8674-acd394948673",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578663,
              "key": "3c22a9d7-db76-4377-b457-8662ebb11add",
              "title": "Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ADIuFrjxaUc",
                "china_cdn_id": "ADIuFrjxaUc.mp4"
              }
            },
            {
              "id": 578654,
              "key": "355be1cd-050a-4eae-bdc1-2b5b1a3d4611",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Lesson Challenge\n\nResearch suggests being exposed to examples of what we're trying to learn helps us gain a more in-depth understanding of those concepts and ideas. Therefore, we strongly recommend for you to go through [these React/Redux sample projects](https://github.com/reactjs/redux/tree/master/examples) to solidify your understanding of the material and learn different architectures for building React/Redux apps. Here's an approach to try:\n\n1. Go through each example and see how:\n * the components work together;\n * what information is stored in the store;\n * how the data in the store is modified;\n * how the project is structured.\n2. Determine the similarities and the differences between the architecture of the different examples.\n3. If you have time, download some of the examples and try changing them to practice your new skills.\n\nDoing this will help you to develop a systematic framework for tackling React/Redux projects. \n\nOnce you're done, share your observations and something that surprised you with your classmates.\n\n#### Further Research\n* [Compilation of React & Redux Links by Mark Erikson](https://github.com/markerikson/react-redux-links)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 578657,
          "key": "9508a076-31e1-4ba1-ad2b-c67d3eeaad28",
          "title": "Course Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9508a076-31e1-4ba1-ad2b-c67d3eeaad28",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578664,
              "key": "cf9795de-49d6-47c5-b27f-8bcfd9e10af6",
              "title": "Course Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NM3AH5HdRWo",
                "china_cdn_id": "NM3AH5HdRWo.mp4"
              }
            },
            {
              "id": 688772,
              "key": "709c2746-c705-4753-92fa-6920b842020b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's how what you've accomplished in the program thus far maps to your career:\n",
              "instructor_notes": ""
            },
            {
              "id": 688773,
              "key": "434c101b-a173-4991-97ef-0666191101c9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b60f781_screen-shot-2018-07-31-at-4.57.34-pm/screen-shot-2018-07-31-at-4.57.34-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/434c101b-a173-4991-97ef-0666191101c9",
              "caption": "",
              "alt": "",
              "width": 700,
              "height": 600,
              "instructor_notes": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}