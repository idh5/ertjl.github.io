{
  "data": {
    "lesson": {
      "id": 571811,
      "key": "b7be2209-479f-40ad-872d-0ec54cd2fa8a",
      "title": "Redux with React",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Youâ€™ll learn how to add React to a Redux application and have the state of that application be managed by Redux.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/b7be2209-479f-40ad-872d-0ec54cd2fa8a/571811/1544474141835/Redux+with+React+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/b7be2209-479f-40ad-872d-0ec54cd2fa8a/571811/1544474137817/Redux+with+React+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 571791,
          "key": "d8a524ae-fa67-4512-8d0a-916c8bb4b953",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8a524ae-fa67-4512-8d0a-916c8bb4b953",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572449,
              "key": "c4bf5cb9-b68a-4363-8360-9723d6116155",
              "title": "Redux with React Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nq3E2n-ZdvA",
                "china_cdn_id": "nq3E2n-ZdvA.mp4"
              }
            }
          ]
        },
        {
          "id": 571808,
          "key": "b05b0239-6976-40b2-8185-5a937bd53b93",
          "title": "React as our UI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b05b0239-6976-40b2-8185-5a937bd53b93",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 571792,
              "key": "ed840948-3751-49d4-a247-90ad1ad73295",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this lesson, we're going to move away from our application being plain HTML and convert it to being powered by React. To do that, we'll need to add a number of libraries:\n\n* [react](https://www.npmjs.com/package/react)\n* [react-dom](https://www.npmjs.com/package/react-dom)\n* [babel](https://www.npmjs.com/package/babel)\n\nHere are the packages that we'll be adding in the next video:\n\n```html\n<script src=\"https://unpkg.com/react@16.3.0-alpha.1/umd/react.development.js\"></script>\n<script src=\"https://unpkg.com/react-dom@16.3.0-alpha.1/umd/react-dom.development.js\"></script>\n<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n```",
              "instructor_notes": ""
            },
            {
              "id": 572629,
              "key": "988d534c-6ca3-4f3d-9188-1e23e003c122",
              "title": "Adding In React",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UGxbnapRJnQ",
                "china_cdn_id": "UGxbnapRJnQ.mp4"
              }
            },
            {
              "id": 571794,
              "key": "8e70e97c-5e50-4955-823e-9ef060d3e70b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/97fcd0ad442fe9787c00dad9c8b53fd8e07b98a2)",
              "instructor_notes": ""
            },
            {
              "id": 571795,
              "key": "cb5a8db9-f9a4-409d-b019-4e9934f58017",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cb5a8db9-f9a4-409d-b019-4e9934f58017",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have linked to the [react](https://www.npmjs.com/package/react) package in my `index.html` file.",
                "I have linked to the [react-dom](https://www.npmjs.com/package/react-dom) in my `index.html` file.",
                "I have linked to the [babel](https://www.npmjs.com/package/babel) in my `index.html` file."
              ],
              "positive_feedback": "Thanks!",
              "video_feedback": null,
              "description": "If you haven't been following along, now's a good time to start since things are getting a bit more complicated by adding React to our Redux application. Make sure to check off each of the following!"
            },
            {
              "id": 571796,
              "key": "75b3f3c5-1927-4cb0-afcd-7219217ec5a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The changes we've just implemented should look pretty familiar - they were just converting parts of our app from HTML to being powered by React Components. \n\n## Combining React and Redux\n\nAlrighty, so you've learned React. You've built Redux and used it in a regular HTML application. But now we've started converting that HTML to a React application. In the following video we're going to start connecting the React Components to the Redux store.\n\nI want you to pay attention to a few things in the next screencast:\n\n* where the `store.dispatch()` code goes in a React component\n* how a React component is passed the Redux store as a prop",
              "instructor_notes": ""
            },
            {
              "id": 572638,
              "key": "c83af07e-4cf2-447c-9ad7-d45e068316d7",
              "title": "Dispatching Todos With React",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vxwzO_U0UC4",
                "china_cdn_id": "vxwzO_U0UC4.mp4"
              }
            },
            {
              "id": 571798,
              "key": "5e9e624a-7bca-4297-b4b4-3e4aa03ed2fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/6b61c0a6e557603c12a8ef8d6062e9d688df11eb)",
              "instructor_notes": ""
            },
            {
              "id": 728744,
              "key": "2067abeb-524b-4fb1-93f7-8dfc0826b687",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In order to save time, we used an uncontrolled component for our input field.\n\n## `ref`\n\n> [Refs provide a way to access DOM nodes or React elements created in the render method.](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs)\n\n## When to Use Refs\n\nThe [docs](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) outline a few good use cases for `ref`s:\n\n> * Managing focus, text selection, or media playback.\n> * Triggering imperative animations.\n> * Integrating with third-party DOM libraries.",
              "instructor_notes": ""
            },
            {
              "id": 728745,
              "key": "2bd42974-fd49-4082-b1fa-bd2f119449c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's take a look at a similar example:\n\n```js\nclass Color extends React.Component {\n  alertTextInput = e => {\n    e.preventDefault();\n    alert(this.colorElement.value);\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Add Input\"\n          ref={(inputElement) => this.colorElement = inputElement}\n        />\n\n        <button onClick={this.alertTextInput}>Alert Input</button>\n      </div>\n    );\n  }\n}\n```\n\nIn the line `ref={(inputElement) => this.colorElement = inputElement}`, `inputElement` is a reference to the `input` DOM element. We are storing a reference to the `input` DOM element in the `colorElement` instance property of the `Color` class.\n\nPlease note:\n\n> [React will call the ref callback with the DOM element when the component mounts, and call it with `null` when it unmounts. Refs are guaranteed to be up-to-date before `componentDidMount` or `componentDidUpdate` fires.](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs)\n",
              "instructor_notes": ""
            },
            {
              "id": 572639,
              "key": "df88670a-3bfe-47f3-b18b-f46d3460d3a7",
              "title": "Dispatching Goals With React",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0Z6YGs9hbMQ",
                "china_cdn_id": "0Z6YGs9hbMQ.mp4"
              }
            },
            {
              "id": 571800,
              "key": "7fd04eaf-56c6-4e3e-b342-2e858a1767b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/494c9a91e01472ddc87935777e84d82e046010c9)",
              "instructor_notes": ""
            },
            {
              "id": 572641,
              "key": "9bb451f2-3e7b-4424-81b2-15b93d5ba618",
              "title": "Force Load App",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "G8pqzASO4ws",
                "china_cdn_id": "G8pqzASO4ws.mp4"
              }
            },
            {
              "id": 571802,
              "key": "7cb32aa8-b709-40e7-96c9-7471e69398c0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/14bb2cd7b0c247e9429c075cff411b1cbb08a478)",
              "instructor_notes": ""
            },
            {
              "id": 728747,
              "key": "85557b27-51d8-4d23-ad6c-1e774f366733",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### `componentDidMount()`\n\n> [`componentDidMount()` is invoked immediately after a component is mounted (inserted into the tree)...If you need to load data from a remote endpoint, this is a good place to instantiate the network request.](https://reactjs.org/docs/react-component.html#componentdidmount)\n\n#### `forceUpdate()`\n\n> [By default, when your componentâ€™s state or props change, your component will re-render. If your `render()` method depends on some other data, you can tell React that the component needs re-rendering by calling `forceUpdate()`.](https://reactjs.org/docs/react-component.html#forceupdate)\n\n>[Calling `forceUpdate()` will cause `render()` to be called on the component, skipping `shouldComponentUpdate()`. This will trigger the normal lifecycle methods for child components, including the `shouldComponentUpdate()` method of each child. React will still only update the DOM if the markup changes.](https://reactjs.org/docs/react-component.html#forceupdate)",
              "instructor_notes": ""
            },
            {
              "id": 572643,
              "key": "cb49e87a-560c-4e79-a8f2-ebf48366396f",
              "title": "Lists With React And Redux",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BtBRCH8PyRI",
                "china_cdn_id": "BtBRCH8PyRI.mp4"
              }
            },
            {
              "id": 571804,
              "key": "98e22e90-7a4d-4130-8e42-abbb76ae3c83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/c7d050135ca6bf5ce73a79da51b198e5a90a0cfc)",
              "instructor_notes": ""
            },
            {
              "id": 572645,
              "key": "30305ea3-ebaa-4d05-9de4-16e3c14e4957",
              "title": "Toggling UI With React",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XCWV20iFvBU",
                "china_cdn_id": "XCWV20iFvBU.mp4"
              }
            },
            {
              "id": 571806,
              "key": "a37193ac-7ee3-4b42-a4a8-6e222634a60d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/d3762be0264ef0395c332a75ba75558135967f1e)",
              "instructor_notes": ""
            },
            {
              "id": 571807,
              "key": "4c70ea23-6244-4176-9441-72de3261fdb2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we converted our plain HTML application to one using React Components. We didn't implement any new features. Instead, we just improved the code's organization by breaking out separate parts into reusable chunks.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571810,
          "key": "c37dd3ce-c6f0-4d8f-ae67-b6d6967e42b0",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c37dd3ce-c6f0-4d8f-ae67-b6d6967e42b0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572453,
              "key": "6907268b-4cc3-4151-b333-43c77420d2b2",
              "title": "Redux with React Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FIVxQhNSO6k",
                "china_cdn_id": "FIVxQhNSO6k.mp4"
              }
            },
            {
              "id": 637899,
              "key": "648516aa-4c87-4d9b-ad20-2a74ecd87caa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Lesson Challenge\n\nRead these articles: [Component State vs Redux Store](https://medium.com/netscape/component-state-vs-redux-store-1eb0c929277) and [React + Redux Architecture : Separation of Concerns](https://medium.com/prod-io/react-redux-architecture-part-1-separation-of-concerns-812da3b08b46). Answer the following questions and share your answers with your classmates:\n\n1) Explain how React interplays with Redux.\n\n2) Give an example that illustrates the Separation of Concerns Principle. ",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}