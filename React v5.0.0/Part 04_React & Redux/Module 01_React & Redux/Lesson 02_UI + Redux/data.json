{
  "data": {
    "lesson": {
      "id": 571766,
      "key": "9f490b7a-d61c-4b1e-b399-3451d6525ec1",
      "title": "UI + Redux",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "You‚Äôll learn to move away from having state live in the DOM by creating a vanilla JavaScript application whose state is managed entirely by Redux. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/9f490b7a-d61c-4b1e-b399-3451d6525ec1/571766/1614999145764/UI+%2B+Redux+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/9f490b7a-d61c-4b1e-b399-3451d6525ec1/571766/1614999142012/UI+%2B+Redux+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 571735,
          "key": "bd73ddf5-f571-42a2-9c8c-28c2386e5b8e",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd73ddf5-f571-42a2-9c8c-28c2386e5b8e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572360,
              "key": "2ca3475a-47f2-40ab-bd3b-aa4301fbcfe4",
              "title": "UI + Redux Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "i2pSr-MlCPU",
                "china_cdn_id": "i2pSr-MlCPU.mp4"
              }
            }
          ]
        },
        {
          "id": 571756,
          "key": "11c90108-847f-4763-8c0a-3bd2009246ae",
          "title": "UI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "11c90108-847f-4763-8c0a-3bd2009246ae",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572536,
              "key": "ec938f03-a3f7-4f73-a869-809f35d54e68",
              "title": "Indexhtml",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8IkNVrCqtvo",
                "china_cdn_id": "8IkNVrCqtvo.mp4"
              }
            },
            {
              "id": 571737,
              "key": "2ec50515-6f83-4c02-9ddb-7a4359132d0c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/3cb66af8ea36d4be3e80037ad76cef0ed58d24c8)",
              "instructor_notes": ""
            },
            {
              "id": 571738,
              "key": "6cc0b604-8793-4ddd-a865-e6b355fde2d3",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6cc0b604-8793-4ddd-a865-e6b355fde2d3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created an `index.html` file in the root of the project.",
                "I have created a `<script></script>` tag at the bottom of the `index.html` file.",
                "I have transferred all JavaScript code from `index.js` to the new script tags in `index.html`."
              ],
              "positive_feedback": "Thanks!",
              "video_feedback": null,
              "description": "Are you coding along with me? If so, check off each of the following!"
            },
            {
              "id": 571739,
              "key": "b45441e5-4ce6-41b8-be31-e0dd6d9fea1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What We're Going to Build\n\n\nNow that we have an `index.html` file and all of the JavaScript code has been transferred over to script tags, let's start adding in a User Interface. Since our project has two pieces of state, we'll need two areas:\n\n1. Todo list area\n2. Goals area ",
              "instructor_notes": ""
            },
            {
              "id": 578125,
              "key": "d7323129-59e7-4518-88e7-c7e6815e4119",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abbeeea_nd019-redux-l2-basic-ui/nd019-redux-l2-basic-ui.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d7323129-59e7-4518-88e7-c7e6815e4119",
              "caption": "This is what our UI should look like when we're finished: a Todo List area with an input to add a new Todo item, and a Goals area with an input to add a new Goal.",
              "alt": "Screenshot of the Todo List app.",
              "width": 1856,
              "height": 1128,
              "instructor_notes": null
            },
            {
              "id": 571741,
              "key": "11d9528e-0305-4532-bf23-70b82b1be6ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So this is what we're going for. It's not the best looking website ever created, but this isn't a course on CSS ;-). If you want to make it stunningly beautiful, feel free to add some CSS to your project üëçüèº\n\nWe already have the Redux portion of our application working, but so far, we've just been manually running snippets of code to interact with the Redux Store. Let's create the UI above so that we can interact with the store using the browser.",
              "instructor_notes": ""
            },
            {
              "id": 572543,
              "key": "2a0b64af-25e3-4330-990d-0c7a146152af",
              "title": "Basic UI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0M2gm4-IbGs",
                "china_cdn_id": "0M2gm4-IbGs.mp4"
              }
            },
            {
              "id": 571743,
              "key": "cee73f31-1579-4f75-be6b-662c167a23a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/c800637efb41fee3f4ea2a9392eb7a3025aac69f)",
              "instructor_notes": ""
            },
            {
              "id": 571744,
              "key": "caacafef-a0d6-4d9a-b956-3354d18d1824",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we added some minimal UI to our application. The actually state of our app hasn't changed at all, though.\n\nIn the next section, we'll hook up our shiny new UI to our state so that entering content via the UI will update the application's state.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 572515,
          "key": "02c03fcb-b31a-412f-89ea-940c03b5dbf5",
          "title": "UI + State",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "02c03fcb-b31a-412f-89ea-940c03b5dbf5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572541,
              "key": "f914e6e4-079f-480c-a7af-37fd8a51d77a",
              "title": "Dispatching New Items",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b9HpVHhDvL4",
                "china_cdn_id": "b9HpVHhDvL4.mp4"
              }
            },
            {
              "id": 572547,
              "key": "e6b911d6-887f-44d8-ad0e-67762302a99f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/707da3250f13adfef00fdbf032a563135cdf939a)",
              "instructor_notes": ""
            },
            {
              "id": 572548,
              "key": "23f58456-9e92-4df9-8616-0ad0ce9270eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The changes we just added made it so whenever the Todo input field is submitted, it will add a Todo item to the state...and whenever the Goal input field is submitted, it will add a new Goal item to the state.\n\nLet's break this down into the steps that happen. First, we need to listen for when the buttons are clicked; we did this with the plain DOM `.addEventListener()` method:\n\n```js\ndocument.getElementById('todoBtn').addEventListener('click', addTodo)\n\ndocument.getElementById('goalBtn').addEventListener('click', addGoal)\n```\n\nPressing the `#todoBtn` will call `addTodo` which will add the new item to the state:\n\n```js\nfunction addTodo () {\n  const input = document.getElementById('todo')\n  const name = input.value\n  input.value = ''\n\n  store.dispatch(addTodoAction({\n    name,\n    complete: false,\n    id: generateId()\n  }));\n}\n\n```\n\nThis method will extract the information from the input field, reset the input field, and then dispatch an `addTodoAction` Action Creator with the text that the user typed into the input field.\n\nSo we're using the UI to change the state of our store, but these changes are not reflecting the new state visually in the UI. Let's do that, now.",
              "instructor_notes": ""
            },
            {
              "id": 572549,
              "key": "598cdfdf-3269-4e84-9958-1e3eedd386ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## Need to Level Up Your DOM Skills?\n\n> Both the content in the previous video, as well as the content in the following video depend on DOM-manipulation skills.\n\n> * accessing elements with `document.getElementById()`\n> * adding listeners with `.addEventListener()`\n> * accessing the `.value` property on an element\n> * creating a new element with `.createElement()`\n> * adding new content with`.appendChild()`\n> * etc.\n\n> If you need to brush up on these skills, check out our course [JavaScript and the DOM](https://www.udacity.com/course/javascript-and-the-dom--ud117).",
              "instructor_notes": ""
            },
            {
              "id": 572571,
              "key": "93d7b763-d130-4276-9d21-787ef8b45f9d",
              "title": "Update UI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "p3PtYdpqSO0",
                "china_cdn_id": "p3PtYdpqSO0.mp4"
              }
            },
            {
              "id": 572557,
              "key": "778331ab-f753-4882-ae1b-53c004b575c5",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "778331ab-f753-4882-ae1b-53c004b575c5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've tried coding up the completion toggle feature."
              ],
              "positive_feedback": "Great job thinking that through!",
              "video_feedback": null,
              "description": "Before we proceed, there's one more feature to our UI that still needs displaying. When a todo is completed, we want a line to appear through it.\n\nTry thinking through the steps that would be needed. Each todo item will need to listen for a click and change the text to strikethrough. \n\nNow, try writing the code to actually make it work!"
            },
            {
              "id": 572559,
              "key": "89d65103-8268-4339-bce1-93679ce40cdc",
              "title": "Toggle Completion State Of Todo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pJ7wu1rU680",
                "china_cdn_id": "pJ7wu1rU680.mp4"
              }
            },
            {
              "id": 572560,
              "key": "4d03fbf2-eaab-46ca-bb5d-5f30efca14a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/4219bd4cc8649f9fa1db65b57eb332150ec10c3f)",
              "instructor_notes": ""
            },
            {
              "id": 572574,
              "key": "c75ac4ce-b8fe-4a5f-beef-5f46ea99b348",
              "title": "Remove Items",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aFYwjb2RSbE",
                "china_cdn_id": "aFYwjb2RSbE.mp4"
              }
            },
            {
              "id": 572576,
              "key": "7cd08d47-829d-48ea-860a-08ca53f373c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/8b9fcbfa43d2fa8927e59fd2d0e61d6d0bb5737d)",
              "instructor_notes": ""
            },
            {
              "id": 572578,
              "key": "623f7879-fcb8-4426-8e04-7568685c99f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we connected our functioning state application with a front-end UI. We added some form fields and buttons to our UI that can be used to add new Todo items and Goal items to the state. Updating the state will _also_ cause the entire application to re-render so that the visual representation of the application matches that of the info stored in the state object.\n\nNow, we wrote all of this code ourselves. In the next section, we'll convert from using our custom library to using Redux.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571763,
          "key": "c3cb64ad-cc32-4624-b27f-e55c2de22a87",
          "title": "This is Redux",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c3cb64ad-cc32-4624-b27f-e55c2de22a87",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572417,
              "key": "6debf45d-64ac-49bc-bb0f-9071a744482c",
              "title": "This Is Redux",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "06YeYJkrGaw",
                "china_cdn_id": "06YeYJkrGaw.mp4"
              }
            },
            {
              "id": 571758,
              "key": "1ba06769-6f76-492e-bed1-84c14843c2f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We're going to transition away from our custom code to using the actual Redux library. While we're working on this simple project, we'll be linkin to the hosted version of the Redux library. In the following video, we'll use this code to link to redux:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"></script>\n```",
              "instructor_notes": ""
            },
            {
              "id": 572583,
              "key": "34484503-1920-4866-876f-6c14f1f3c27f",
              "title": "Adding In Redux",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Sg482OZsFzM",
                "china_cdn_id": "Sg482OZsFzM.mp4"
              }
            },
            {
              "id": 571760,
              "key": "4ba123ef-7c5f-45a0-951f-d8ca5d715040",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/commit/d4975c2245e6d590f637e0873d30ae8d6454e372)",
              "instructor_notes": ""
            },
            {
              "id": 571761,
              "key": "45ca65c2-c633-4d66-b31d-a745ec0fbaea",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "45ca65c2-c633-4d66-b31d-a745ec0fbaea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have linked to the Redux library.",
                "I have deleted my custom `createStore()` function.",
                "I have swapped my `createStore(app)` call with `Redux.createStore(app)` call.",
                "I have replaced my `app()` function with `Redux.combineReducers()`.",
                "I have tested everything, and my application still works!"
              ],
              "positive_feedback": "Fantastic work!",
              "video_feedback": null,
              "description": "Still following along? If so, make sure to check off each of these:"
            },
            {
              "id": 669580,
              "key": "ba6ad2fd-879f-4d56-afc3-55a851d9ee68",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Reducer composition sounds intimidating, but it's simpler than you might think. The idea is that you can create a reducer to manage not only each section of your Redux store, but also any nested data as well.\nLet's say we were dealing with a state tree like had this structure\n```js\n{\n  users: {},\n  setting: {},\n  tweets: {\n    btyxlj: {\n      id: 'btyxlj',\n      text: 'What is a jQuery?',\n      author: {\n        name: 'Tyler McGinnis',\n        id: 'tylermcginnis',\n        avatar: 'twt.com/tm.png'\n      }   \n    }\n  }  \n}\n```\nWe have three main properties on our state tree: users, settings, and tweets. Naturally, we'd create an individual reducer for both of those and then create a single root reducer using Redux's `combineReducers` method.\n```js\nconst reducer = combineReducers({\n  users,\n  settings,\n  tweets\n})\n```\n`combineReducers`, under the hood, is our first look at reducer composition. `combineReducers` is responsible for invoking all the other reducers, passing them the portion of their state that they care about. We're making one root reducer, by composing a bunch of other reducers together. With that in mind, let's take a closer look at our tweets reducer and how we can leverage reducer composition again to make it more compartmentalized. Specifically, let's look how a user might change their avatar with the way our store is currently structured. Here's the skeleton with what we'll start out with -\n```js\nfunction tweets (state = {}, action) {\n  switch(action.type){\n      case ADD_TWEET :\n        ...\n      case REMOVE_TWEET :\n        ...\n      case UPDATE_AVATAR :\n        ???\n  }\n}\n```\nWhat we're interested in is that last one, `UPDATE_AVATAR`. This one is interesting because we have some nested data - and remember, reducers have to be pure and can't mutate any state. Here's one approach.\n```js\nfunction tweets (state = {}, action) {\n  switch(action.type){\n      case ADD_TWEET :\n        ...\n      case REMOVE_TWEET :\n        ...\n      case UPDATE_AVATAR :\n        return {\n          ...state,\n          [action.tweetId]: {\n            ...state[action.tweetId],\n            author: {\n              ...state[action.tweetId].author,\n              avatar: action.newAvatar \n            }\n          }\n        }\n  }\n}\n```\nThat's a lot of spread operators. The reason for that is because, for every layer, we're wanting to spread all the properties of that layer on the new objects we're creating (because, immutability). What if, just like we separated our tweets, users, and settings reducers by passing them the slice of the state tree they care about, what if we do the same thing for our tweets reducer and its nested data.\nDoing that, the code above would be transformed to look like this\n```js\nfunction author (state, action) {\n  switch (action.type) {\n      case : UPDATE_AVATAR\n        return {\n          ...state,\n          avatar: action.newAvatar\n        }\n      default :\n        state\n  }\n}\n \nfunction tweet (state, action) {\n  switch (action.type) {\n      case ADD_TWEET :\n        ...\n      case REMOVE_TWEET :\n        ...\n      case : UPDATE_AVATAR\n        return {\n          ...state,\n          author: author(state.author, action)\n        }\n      default :\n        state\n  }\n}\n \nfunction tweets (state = {}, action) {\n  switch(action.type){\n      case ADD_TWEET :\n        ...\n      case REMOVE_TWEET :\n        ...\n      case UPDATE_AVATAR :\n        return {\n          ...state,\n          [action.tweetId]: tweet(state[action.tweetId], action)\n        }\n      default :\n        state\n  }\n}\n```\nAll we've done is separated out each layer of our nested tweets data into their own reducers. Then, just like we did with our root reducer, we're passing those reducers the slice of the state they care about.",
              "instructor_notes": ""
            },
            {
              "id": 669585,
              "key": "ab38ba91-a846-41ed-8598-9058dd0469ca",
              "title": "What's Wrong with this Root Reducer?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ab38ba91-a846-41ed-8598-9058dd0469ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is wrong with the following root reducer?\n\n\n```js\nimport { combineReducers } from 'redux';\nimport booksReducer from './books_reducer';\nimport userReducer from './user_reducer';\n\nconst rootReducer = combineReducers(booksReducer, userReducer);\n\nexport default rootReducer;\n```",
                "answers": [
                  {
                    "id": "a1530635249102",
                    "text": "`combineReducers()` should be imported from `react-redux`",
                    "is_correct": false
                  },
                  {
                    "id": "a1530635267291",
                    "text": "`combineReducers()` should be a curried function",
                    "is_correct": false
                  },
                  {
                    "id": "a1530635272450",
                    "text": "The wrong value is being exported",
                    "is_correct": false
                  },
                  {
                    "id": "a1530635277920",
                    "text": "An object that maps state keys to reducers should be passed into `combineReducers()`",
                    "is_correct": true
                  },
                  {
                    "id": "a1530635283602",
                    "text": "`combineReducers()` should have the store passed into it instead",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571762,
              "key": "5bab5739-c5cf-4a7b-9efc-58c279d67965",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we replaced the code we wrote in the previous lesson with the actual Redux library code. We saw that swapping out our code with Redux's code didn't change anything with how our application functions or how our app-specific code works. Redux is _just_ a predictable state container.\n\nWhat's key to understand is that you've already learned 90% of Redux! Everything else from here on out will be handling specific use cases (combining Redux with a React application, how to work with asynchronous data modification, etc.). So we'll be adding more concepts on top of what you know now, so if you feel comfortable with your understanding of Redux, then keep going. If you're a bit hazy on how a specific part works, I definitely recommend you get they hazy bits nailed down now before proceeding on to more complicated content. Feel free to return to the first lesson to review specific Redux functionalities to iron out any confusing parts before moving on.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571765,
          "key": "fd82dd85-633f-40d4-ab4e-be5e5cb2bb5a",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fd82dd85-633f-40d4-ab4e-be5e5cb2bb5a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572420,
              "key": "53c7d050-5e61-450d-a72a-67ff28c81bdb",
              "title": "UI + Redux Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "45ileyqFeGw",
                "china_cdn_id": "45ileyqFeGw.mp4"
              }
            },
            {
              "id": 637842,
              "key": "000208b7-8e4e-407c-8946-07c147991972",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Lesson Challenge #1\n\nRead these articles: [The what and why of Redux](https://blog.pusher.com/the-what-and-why-of-redux/) and [Leveling Up with React: Redux](https://css-tricks.com/learning-react-redux/). Answer the following questions (in your own words) and share your answers with your classmates:\n\n1) What are the advantages of using Redux?\n\n2) Describe the 3 principles Redux follows.",
              "instructor_notes": ""
            },
            {
              "id": 728510,
              "key": "f9c57e94-4f8e-483b-bd63-bc64b3703ee9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Lesson Challenge #2\n\nTake a look at the Workspace below and fix the 8 bugs in the `index.html` file.",
              "instructor_notes": ""
            },
            {
              "id": 728511,
              "key": "4446d652-bc5d-458f-b8f1-42031e5961da",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewgekijxgk5o8",
              "pool_id": "webterminal",
              "view_id": "html-live-aon5ukpqyf6",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/index.html"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    }
  ]
}