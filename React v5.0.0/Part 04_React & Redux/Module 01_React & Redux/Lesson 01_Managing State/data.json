{
  "data": {
    "lesson": {
      "id": 571733,
      "key": "5b8c33c7-29d0-4fa4-9a03-ba49d1a2cb35",
      "title": "Managing State",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "You’ll learn techniques to make your state more predictable by moving your state to a central location and establishing strict rules for getting, listening, and updating that state.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/5b8c33c7-29d0-4fa4-9a03-ba49d1a2cb35/571733/1544474072141/Managing+State+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/5b8c33c7-29d0-4fa4-9a03-ba49d1a2cb35/571733/1544474065148/Managing+State+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 715121,
          "key": "2755c887-15b2-423e-9306-70e27f7426dc",
          "title": "Rating Your Career Confidence",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2755c887-15b2-423e-9306-70e27f7426dc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 715122,
              "key": "829466bb-aad2-4bbc-b337-de64b2418d87",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Rating Your Career Confidence",
              "instructor_notes": ""
            },
            {
              "id": 715123,
              "key": "a690e1ec-07a2-4c59-9c3b-26decf2ddab1",
              "title": "Job Confidence",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a690e1ec-07a2-4c59-9c3b-26decf2ddab1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How well do you feel this Nanodegree program has prepared you to begin a job search or seek a promotion in this field?",
                "answers": [
                  {
                    "id": "a1537227986885",
                    "text": "I am not confident in the skills I have learned",
                    "is_correct": false
                  },
                  {
                    "id": "a1537227992649",
                    "text": "I am somewhat confident in the skills I have learned",
                    "is_correct": false
                  },
                  {
                    "id": "a1537227997647",
                    "text": "I am confident in my skills, but unsure how it applies to the industry",
                    "is_correct": false
                  },
                  {
                    "id": "a1537228001919",
                    "text": "I am confident in my skills, and understand how they relate to the industry and industry trends",
                    "is_correct": false
                  },
                  {
                    "id": "a1537228006709",
                    "text": "I am confident in my skills, understand how they relate to the industry and industry trends, and know how to begin the job search/seek a promotion",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 571644,
          "key": "c6bc2ee8-243c-4b7d-9307-c9df739a0743",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c6bc2ee8-243c-4b7d-9307-c9df739a0743",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572351,
              "key": "aec6dbff-0fe2-4e17-8cb1-9ae5234ce939",
              "title": "Welcome to React & Redux",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zSHjvdQ7nZ8",
                "china_cdn_id": "zSHjvdQ7nZ8.mp4"
              }
            },
            {
              "id": 571641,
              "key": "07776e5d-1975-4d3a-b50a-fd021538cbb9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Welcome to the course on Redux! There's no doubt that Redux and the Redux ecosystem is a powerful skill to have in your arsenal. However, it is not a topic for beginners and can be a daunting area to break into. We've broken down your path to learning Redux into the following lessons:\n\n* Lesson 1 - Managing State\n* Lesson 2 - UI + Redux\n* Lesson 3 - Redux Middleware\n* Lesson 4 - Redux with React\n* Lesson 5 - Asynchronous Redux\n* Lesson 6 - react-redux\n* Lesson 7 - Real World Redux\n\n### Lesson 1 - Managing State\n\nYou’ll learn techniques to make your state more predictable by moving your state to a central location and establishing strict rules for getting, listening, and updating that state.\n\n### Lesson 2 - UI + Redux\n\nYou’ll learn to move away from having state live in the DOM by creating a vanilla JavaScript application whose state is managed entirely by Redux.\n\n### Lesson 3 - Redux Middleware\n\nYou’ll learn to create custom middleware and add it to your Redux store. This middleware will allow you to enhance your store by hooking into and intercepting actions before they reach any reducers.\n\n### Lesson 4 - Redux with React\n\nYou’ll learn how to add React to a Redux application and have the state of that application be managed by Redux.\n\n### Lesson 5 - Asynchronous Redux\n\nYou’ll learn to better abstract asynchronous events by creating your own custom Thunk middleware and adding it to your store.\n\n### Lesson 6 - react-redux\n\nYou’ll learn to leverage the react-redux bindings in order to leverage the benefits of a UI library like React and a state management library like Redux.\n\n### Lesson 7 - Real World Redux\n\nYou’ll take your knowledge of Redux and utilize it by building a real world Redux application. You’ll also learn advanced Redux topics like reducer composition and normalization.",
              "instructor_notes": ""
            },
            {
              "id": 571642,
              "key": "1dce500c-42df-4506-b3e9-b0b476829235",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Follow Your Instructors\n\nThe Redux ecosystem is changing often! If you want to hear breaking news about Redux, potential changes to its API, conferences and meetups to attend, or just check out some projects, follow your instructors:\n\n* [@tylermcginnis](https://twitter.com/tylermcginnis)\n* [@richardkalehoff](https://twitter.com/richardkalehoff)\n* [hbkwong](https://www.github.com/hbkwong)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571659,
          "key": "48125931-551a-462f-8828-fd910e0cb0e9",
          "title": "The Store",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48125931-551a-462f-8828-fd910e0cb0e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572352,
              "key": "2f09a675-7430-4d86-adf8-21db8457b467",
              "title": "App UI State",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "A1ZW3cRS65g",
                "china_cdn_id": "A1ZW3cRS65g.mp4"
              }
            },
            {
              "id": 571646,
              "key": "1301f0c6-c7fd-4e4b-82f7-a792c2a53dc9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A traditional app might look something like this:",
              "instructor_notes": ""
            },
            {
              "id": 578088,
              "key": "b6ae619d-3964-46e4-a508-f694ebcfafc7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abbd1cd_nd019-redux-l1-01-state-is-everywhere/nd019-redux-l1-01-state-is-everywhere.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b6ae619d-3964-46e4-a508-f694ebcfafc7",
              "caption": "The application's data is sprinkled throughout the app.",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 571648,
              "key": "9df54bf5-52a6-443e-a3b2-765a2cf49328",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice in the image above, that this simple application has a lot of state:\n\n* There are the images in the sidebar on the left.\n* There are rows of tracks in the main area.\n* Each Track will have its own information that it's maintaining.\n* There's the search field at the top that introduces new state to the app (the searched for artist/track information).\n\nAnd this is just one, simple page of this application. In most sites you use, there is information littered throughout every single page of the entire app.",
              "instructor_notes": ""
            },
            {
              "id": 571649,
              "key": "7396cb3e-feec-4def-94e1-a76766b4b404",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7396cb3e-feec-4def-94e1-a76766b4b404",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've taken a screenshot of an app I use often.",
                "I've drawn boxes around each piece of data.",
                "I've explained what the app is and why I use it."
              ],
              "positive_feedback": "Thanks for doing that! The more you're engaged with the material, the easier it will be for you to learn it.",
              "video_feedback": null,
              "description": "What's a website that you use often? Why don't you take a screenshot of the site, draw boxes around each piece of data in the screenshot, and then share it in Student Hub. Once you've shared your image, leave a comment about it explaining what the app is and how you use it."
            },
            {
              "id": 571650,
              "key": "eecc1bd0-8438-4c02-a0f6-4f9bbbb40f33",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Remember that the main goal of Redux is to make the state management of an application more predictable. Let's see what that might look like: ",
              "instructor_notes": ""
            },
            {
              "id": 578089,
              "key": "3a02288d-b26d-4e15-b93d-f681028e3e07",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abbd217_nd019-redux-l1-02-isolated-state/nd019-redux-l1-02-isolated-state.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3a02288d-b26d-4e15-b93d-f681028e3e07",
              "caption": "Application data is stored outside of the app and is just referenced by the app.",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 571652,
              "key": "442058d8-184e-4b9c-b580-9cc8bd5454cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this example, the app appears exactly the same to the end user, however, it's functioning quite differently under the hood. All of the data is stored _outside of the UI code_ and is just _referenced_ from the UI code. \n\nWith a change like this, if the data needs to be modified at all, then all of the data is located in one place and needs to be only changed once. Then the areas of the app that are referencing pieces of data, will be updated since the source they're pulling from has changed.",
              "instructor_notes": ""
            },
            {
              "id": 572353,
              "key": "145b9431-eb08-4646-bac7-09aed7f43371",
              "title": "React & Redux L1 State Tree",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IDdb6baBQyo",
                "china_cdn_id": "IDdb6baBQyo.mp4"
              }
            },
            {
              "id": 571654,
              "key": "d0c2cc1c-c310-40cb-9ed6-e5e4f20f078a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## State Tree\n\nOne of the key points of Redux is that all of the data is stored in a single object called the *state tree*. But what does a state tree actually look like? Good question! Here's an example:\n\n```js\n{\n  recipes: [\n    { … },\n    { … },\n    { … }\n  ],\n  ingredients: [\n    { … },\n    { … },\n    { … },\n    { … },\n    { … },\n    { … }\n  ],\n  products: [\n    { … },\n    { … },\n    { … },\n    { … }\n  ]\n}\n```\n\nSee how all of the data for this imaginary cooking site is stored in a single object? So all of the state (or \"application data\") for this site is stored in one, single location. This is what we mean when we say \"state tree\"...it's just all of the data stored in a single object.\n\nThroughout this course, whenever we refer to an application's \"state tree\", we'll use a triangle to convey this concept.",
              "instructor_notes": ""
            },
            {
              "id": 578090,
              "key": "d1a93164-1be0-4076-9db7-0eab1a30d6f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abbd23c_nd019-redux-l1-03-state-tree/nd019-redux-l1-03-state-tree.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d1a93164-1be0-4076-9db7-0eab1a30d6f4",
              "caption": "This is how we'll represent the \"state tree\".",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 572354,
              "key": "27a8b46f-2f81-4082-bc21-047779a62d0c",
              "title": "React & Redux L1 The Store",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "o8cEkLqR7VU",
                "china_cdn_id": "o8cEkLqR7VU.mp4"
              }
            },
            {
              "id": 571657,
              "key": "e6ecd803-0c12-4c84-b45a-c8d7ff56719a",
              "title": "Interacting with the State Tree",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e6ecd803-0c12-4c84-b45a-c8d7ff56719a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are the ways we can interact with the state tree?",
                "answers": [
                  {
                    "id": "a1521906462567",
                    "text": "Getting changes from the state",
                    "is_correct": true
                  },
                  {
                    "id": "a1521906474817",
                    "text": "Listening for changes from the state",
                    "is_correct": true
                  },
                  {
                    "id": "a1521906475419",
                    "text": "Updating the state",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 571658,
              "key": "1b045a9e-b083-4301-b598-c1cfccdd263e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this lesson, we looked at the data in an application. We saw that in traditional apps, the data is mixed in with the UI and markup. This can lead to hard-to-find bugs where updating the state in one location doesn't update it in every location. \n\nWe learned that the main goal that Redux is trying to offer is predictable state management. The way that Redux tries to accomplish this is through having a _single_ *state tree*. This state tree is an object that stores the entire state for an application. Now that all state is stored in one location, we discovered three ways to interact with it:\n\n1. getting the state\n* listening for changes to the state\n* updating the state\n\nThen we combine the three items above and the state tree object itself into one unit which we called *the store*. We'll look at creating this store in the next lesson.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571680,
          "key": "d137f3e4-6ddc-4c1f-b6e8-84fecaa19748",
          "title": "Create Store: Getting and Listening",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d137f3e4-6ddc-4c1f-b6e8-84fecaa19748",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 571660,
              "key": "5078c2f9-38be-42df-b127-781442fdf660",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this section, we'll be building the store. If you remember from the previous section, the store has the following information:\n\n* the state tree\n* a way to get the state tree\n* a way to listen and respond to the state changing\n* a way to update the state",
              "instructor_notes": ""
            },
            {
              "id": 578091,
              "key": "5ad27159-cf44-4844-a753-541ad593fedf",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abbd27d_nd019-redux-l1-04-the-store/nd019-redux-l1-04-the-store.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5ad27159-cf44-4844-a753-541ad593fedf",
              "caption": "The Store contains the state tree and provides ways to interact with the state tree.",
              "alt": "",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 571662,
              "key": "c861fca7-1a36-492a-a271-291a8abf22bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So this is what we're going to do in this lesson - we're going to actually _create_ the store code ourselves, from scratch.\n\nIn the following video, we'll start with a blank `index.js` file and create a factory function that creates *store* objects. Then we'll have the store keep track of the state, and we'll write the method to get the state from the store.\n\nPop open your code editor, and let's get started!",
              "instructor_notes": ""
            },
            {
              "id": 572516,
              "key": "291ed81f-9e12-457f-9b48-f77f9d4e13cb",
              "title": "Getting The State",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YqmnAPNCxkQ",
                "china_cdn_id": "YqmnAPNCxkQ.mp4"
              }
            },
            {
              "id": 571664,
              "key": "b8c7ea13-df54-4d8e-9cad-491b4d327468",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/getting-the-state/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 571665,
              "key": "828d24db-680a-448b-85d5-32bdb85ef7f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this screencast, we started building out the `createStore` function. Currently, this factory function:\n\n* takes in no arguments\n* sets up a local (private) variable to hold the state\n* sets up a `getState()` function\n* returns an object that publicly exposes the `getState()` function\n\nLet's take a look at the `getState()` function",
              "instructor_notes": ""
            },
            {
              "id": 571666,
              "key": "bc3ff891-6cec-4237-8089-fc9c30c5eb24",
              "title": "Quiz: getState()",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bc3ff891-6cec-4237-8089-fc9c30c5eb24",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Thinking about the code we just wrote, what does the `getState()` function do?",
                "answers": [
                  {
                    "id": "a1522090650605",
                    "text": "It modifies the existing state variable.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522090651794",
                    "text": "It logs who access the state variable.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522090652282",
                    "text": "It returns the existing state variable.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522090652841",
                    "text": "It formats the state object for easy parsing.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571667,
              "key": "841dc930-0a66-42fc-a192-2dacae1643dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Our list of things we need to build for the store is shrinking:\n\n* ~~the state tree~~\n* ~~a way to get the state tree~~\n* a way to listen and respond to the state changing\n* a way to update the state\n\nOur next task on the list is to make a way to listen for changes to the state. ",
              "instructor_notes": ""
            },
            {
              "id": 572517,
              "key": "5d3ffe1e-85ef-43be-9657-1f784e6e47f3",
              "title": "Listening To Changes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AWOuF_qoEh8",
                "china_cdn_id": "AWOuF_qoEh8.mp4"
              }
            },
            {
              "id": 572518,
              "key": "25b252c8-51d2-4618-ac10-1496f54273f9",
              "title": "Unsubscribing The Listener",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5jVn0L7nlBA",
                "china_cdn_id": "5jVn0L7nlBA.mp4"
              }
            },
            {
              "id": 571670,
              "key": "52434f2e-a09b-4570-b69d-9054da7764ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/listening-to-changes/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 781721,
              "key": "674d1556-1d01-4748-9f78-524b1568ff77",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Keep in mind that \n\n```js\nconst subscribe = (listener) => {\n    listeners.push(listener)\n    return () => {\n      listeners = listeners.filter((l) => l !== listener)\n    }\n  }\n```\n\nis equivalent to the following ES5: \n\n```js\nvar subscribe = function subscribe(listener) {\n  listeners.push(listener);\n  return function () {\n    listeners = listeners.filter(function (l) {\n      return l !== listener;\n    });\n  };\n};\n```",
              "instructor_notes": ""
            },
            {
              "id": 571671,
              "key": "d9d9db0b-3d60-47cb-87a3-2efaf1b4bc8d",
              "title": "subscribe()",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d9d9db0b-3d60-47cb-87a3-2efaf1b4bc8d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are true about `store.subscribe()`?",
                "answers": [
                  {
                    "id": "a1522094568825",
                    "text": "It is a function.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522094630415",
                    "text": "When called, it is passed a single function.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522094630956",
                    "text": "When called, it is passed multiple functions.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522094631469",
                    "text": "It modifies the internal state tree variable.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522094632035",
                    "text": "It invokes the function that was passed to it.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522094655856",
                    "text": "It returns an Array of listener functions.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522094656381",
                    "text": "It returns a function.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 572405,
              "key": "9c6a8b54-fb48-4f5e-ae20-d93a2871f189",
              "title": "Updating The State",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-MtD_RCqKK4",
                "china_cdn_id": "-MtD_RCqKK4.mp4"
              }
            },
            {
              "id": 571673,
              "key": "153f7498-632a-48a3-94ed-cc4d8f6b7fb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We've got our first rule!\n\n> Only an event can change the state of the store.\n\nOk...well, without knowing what an \"event\" is, this rule is less than helpful :-\\ Fear not, because we're going to look at what events are in this video:",
              "instructor_notes": ""
            },
            {
              "id": 572407,
              "key": "8c55b306-df76-4f60-aaae-a515e7603b24",
              "title": "Intro To Actions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4SSkRoVunbI",
                "china_cdn_id": "4SSkRoVunbI.mp4"
              }
            },
            {
              "id": 571675,
              "key": "4af8cb53-7d57-41ef-ac9e-cb3e32ecabac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When an event takes place in a Redux application, we use a plain JavaScript object to keep track of what the specific event was. This object is called an **Action**. \n\nLet's take another look at an Action:\n\n```js\n{\n  type: \"ADD_PRODUCT_TO_CART\"\n}\n```\n\nAs you can see, an Action is clearly just a **plain JavaScript object**. What makes this plain JavaScript object special in Redux, is that _every Action must have a `type` property_. The purpose of the `type` property is to let our app (Redux) know _exactly_ what event just took place. This Action tells us that a product was added to the cart. That's incredibly descriptive and quite helpful, isn't it?\n\nNow, since an Action is just a regular object, we can include extra data about the event that took place:\n\n```js\n{\n  type: \"ADD_PRODUCT_TO_CART\",\n  productId: 17\n}\n```\n\nIn this Action, we're including the `productId` field. Now we know exactly which product was added to the store! \n\nOne more note to keep in mind as you build your Action objects: it's better practice to pass as little data as possible in each action. That is, prefer passing the index or ID of a product rather than the _entire product object_ itself.\n\n**Action Creators** are functions that create/return action objects. For example: \n\n```js\nconst addItem = item => ({\n  type: ADD_ITEM,\n  item\n});\n```\nor in ES5:\n\n```js\nvar addItem = function addItem(item) {\n  return {\n    type: ADD_ITEM,\n    item: item\n  };\n};\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 571676,
              "key": "9ee1bf90-6967-40bb-805f-5f8bf669e158",
              "title": "Type is Required",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9ee1bf90-6967-40bb-805f-5f8bf669e158",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is it true that _every_ Action must have a `type` property?",
                "answers": [
                  {
                    "id": "a1522094843674",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1522094848248",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571677,
              "key": "427fbc0a-4781-4076-8a4c-4222771f66da",
              "title": "Additional Fields",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "427fbc0a-4781-4076-8a4c-4222771f66da",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Can an Action have three or more fields?",
                "answers": [
                  {
                    "id": "a1522094860569",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1522094862347",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 572499,
              "key": "7609d312-c678-4858-8770-21989cf1650d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Valid Action?\n\nConsider the following five options for the next quiz:\n\n```js\n// A\n\nconst receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\n```\n\n```js\n// B\n\nconst receivePost = post => ({\n  type: RECEIVE_POST,\n  post: post\n}); \n```\n\n```js\n// C\n\nconst clearErrors = {\n  type: CLEAR_ERRORS\n};\n```\n\n```js\n// D\n\nconst addSeven = {\n  type: 'ADD_NUMBER',\n  number: 7\n};\n```\n\n```js\n// E\n\nconst removeComments = {\n  comments: null\n};\n```",
              "instructor_notes": ""
            },
            {
              "id": 571678,
              "key": "7847c315-acb7-4dde-8491-7cdd37b4ed74",
              "title": "Quiz: Valid Action?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7847c315-acb7-4dde-8491-7cdd37b4ed74",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the above options are valid actions?",
                "answers": [
                  {
                    "id": "a1522094874191",
                    "text": "A",
                    "is_correct": false
                  },
                  {
                    "id": "a1522098091156",
                    "text": "B",
                    "is_correct": false
                  },
                  {
                    "id": "a1522098091733",
                    "text": "C",
                    "is_correct": true
                  },
                  {
                    "id": "a1522098092293",
                    "text": "D",
                    "is_correct": true
                  },
                  {
                    "id": "a1522098097325",
                    "text": "E",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571679,
              "key": "b67b7db4-322e-4a86-b3e8-902b908fea52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we started creating our store by building out a `createStore()` function. So far, this function keeps track of the state, and provides a method to get the state and one to keep track of listener functions that will be run whenever the state changes.\n\nIn the next section, we'll add a method to handle updating the state.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571697,
          "key": "c86a1d43-9c82-49de-8e5d-b2104a756b47",
          "title": "Updating State",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c86a1d43-9c82-49de-8e5d-b2104a756b47",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 571681,
              "key": "d3c63e83-46f8-4ca0-8711-9b9ec898bf38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's step back one more time and think about _what_ Redux is all about. The whole goal of Redux is to increase predictability:\n\n> Redux is a predictable state container for JavaScript apps.\n\nWith this in mind, let's see dig into how we can use actions and our state tree to predictably manage an application's state.",
              "instructor_notes": ""
            },
            {
              "id": 572409,
              "key": "1debcd81-ff3c-4dc4-b5c6-27e0e6b549e5",
              "title": "Predictable Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "15sTwJsyWbU",
                "china_cdn_id": "15sTwJsyWbU.mp4"
              }
            },
            {
              "id": 571683,
              "key": "0df9f8bc-1fa3-4198-ad4a-3b90e6e461bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And we've got our second rule!\n\n> The function that returns the new state needs to be a pure function.\n\nSo far, our rules are:\n\n1. Only an event can change the state of the store.\n* The function that returns the new state needs to be a pure function.\n\nA [pure function](https://en.wikipedia.org/wiki/Pure_function) can be a bit theoretical, so we'll take it step by step and explain why a pure function is so powerful and how it helps improve predictability.",
              "instructor_notes": ""
            },
            {
              "id": 572412,
              "key": "85177987-1f06-47dd-a350-d646173da75b",
              "title": "Pure Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "o9cWPrOMuyU",
                "china_cdn_id": "o9cWPrOMuyU.mp4"
              }
            },
            {
              "id": 571685,
              "key": "d89f40c4-b202-4a79-90fd-d3ca438911ff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What are Pure Functions?\n\n**Pure functions** are integral to how state in Redux applications is updated. By definition, pure functions:\n\n1. Return the same result if the same arguments are passed in\n* Depend solely on the arguments passed into them\n* Do not produce side effects, such as API requests and I/O operations\n\nLet’s check out an example of a pure function, `square()`:\n\n```js\n// `square()` is a pure function\n\nconst square = x => x * x;\n```\n\n`square()` is a pure function because it outputs the same value every single time, given that the same argument is passed into it. There is no dependence on any other values to produce that result, and we can safely expect _just_ that result to be returned -- no side effects (more on this in a bit!).\n\nOn the other hand, let’s check out an example of an _impure_ function, `calculateTip()`:\n\n```js\n// `calculateTip()` is an impure function\n\nconst tipPercentage = 0.15;\n\nconst calculateTip = cost => cost * tipPercentage;\n```\n\n`calculateTip()` calculates and returns a number value. However, it relies on a variable (`tipPercentage`) that lives _outside_ the function to produce that value. Since it fails one of the requirements of pure functions, `calculateTip()` is an impure function. However, we could convert this function to a pure function by passing in the outside variable, `tipPercentage`, as a second argument to this function!\n\n```js\nconst calculateTip = (cost, tipPercentage = 0.15) => cost * tipPercentage;\n```\n\n### Why Pure Functions Are Great\n\nFor our purposes, the most important feature of a pure function is that it's predictable. If we have a function that takes in our state and an action that occurred, the function should (if it's pure!) return the exact same result _every single time_. \n\nYou're going to be sick of this by the end ;-) but this course (and Redux!) are all about predictability!",
              "instructor_notes": ""
            },
            {
              "id": 571686,
              "key": "3676d935-7045-4ad6-b1bb-704f4cf5291e",
              "title": "Quiz: Pure Functions facts",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3676d935-7045-4ad6-b1bb-704f4cf5291e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about pure functions? Check all that apply.",
                "answers": [
                  {
                    "id": "a1522095078112",
                    "text": "Pure functions do not rely on information other than the arguments passed in to them to generate an output.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522095080070",
                    "text": "Pure functions can produce different outputs even with the same arguments passed in each time.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522095080871",
                    "text": "Pure functions do not depend on external state.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522095081616",
                    "text": "Pure functions are expected to modify shared state.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522095103310",
                    "text": "Pure functions should modify the original arguments passed in to them.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571687,
              "key": "217ce2e0-8053-4c43-9082-3c781454f0fb",
              "title": "Quiz: Is this Pure?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "217ce2e0-8053-4c43-9082-3c781454f0fb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are pure functions? Please check all that apply:",
                "answers": [
                  {
                    "id": "a1522095125054",
                    "text": "Math.random();",
                    "is_correct": false
                  },
                  {
                    "id": "a1522095130653",
                    "text": "const add = (a, b) => (<br>&nbsp;&nbsp;&nbsp;&nbsp;a + b  <br>);",
                    "is_correct": true
                  },
                  {
                    "id": "a1522095131245",
                    "text": "Date.now();",
                    "is_correct": false
                  },
                  {
                    "id": "a1522095131797",
                    "text": "const addAndPrint = (a, b) => {<br>&nbsp;&nbsp;&nbsp;&nbsp;const sum = a + b;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\`The sum is: ${sum}\\`);<br>&nbsp;&nbsp;&nbsp;&nbsp;return sum;<br>};",
                    "is_correct": false
                  },
                  {
                    "id": "a1522095152603",
                    "text": "const double = array => {<br>&nbsp;&nbsp;&nbsp;&nbsp;let doubledArray = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;array.forEach(n => doubledArray.push(n * 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;return doubledArray;<br>};",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 572476,
              "key": "50d5d843-202b-49f0-a5d9-897e0e011469",
              "title": "The Reducer Function",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QU_WvPaC6cM",
                "china_cdn_id": "QU_WvPaC6cM.mp4"
              }
            },
            {
              "id": 571689,
              "key": "f850bc6b-0f9d-44d9-823c-b99e73e5a627",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/the-reducer-function/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 689237,
              "key": "288b979d-6269-414f-b5aa-a8e9ce947cb3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ⚠️ Please, *do not use* default parameters in the following programming quiz. It will throw an error when evaluating the response and you'll not be able to get the correct answer.",
              "instructor_notes": ""
            },
            {
              "id": 578116,
              "key": "0d49acff-1cf3-4679-b6a3-6e75593e99ae",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0d49acff-1cf3-4679-b6a3-6e75593e99ae",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5961788651339776",
                "initial_code_files": [
                  {
                    "text": "/* Create A Reducer\n *\n * You need to create a reducer called \"appReducer\" that accepts two arguments:\n * - First, an array containing information about ice cream \n * - Second, an object with a 'DELETE_FLAVOR' `type` key\n * (i.e., the object contains information to delete the flavor from the state)\n *\n * The action your reducer will receive will look like this:\n * { type: 'DELETE_FLAVOR', flavor: 'Vanilla' }\n *\n * And the initial state will look something like this (as such, refrain \n * from passing in default values for any parameters!):\n * [{ flavor: 'Chocolate', count: 36 }, { flavor: 'Vanilla', count: 210 }];\n*/\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 572423,
              "key": "da9a2dd9-eb5a-47a2-881a-02997dd2d652",
              "title": "Dispatch",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "z5yJhTOxmMU",
                "china_cdn_id": "z5yJhTOxmMU.mp4"
              }
            },
            {
              "id": 572524,
              "key": "4d54701d-a227-4dd3-a3b3-ae4c36dbec2f",
              "title": "Create Store Dispatch",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wIyRfRSpvDo",
                "china_cdn_id": "wIyRfRSpvDo.mp4"
              }
            },
            {
              "id": 572427,
              "key": "9a900a36-2bf8-4676-9a74-ecc4c421d4a9",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9a900a36-2bf8-4676-9a74-ecc4c421d4a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the following store methods with their role:"
                },
                "concepts_label": "Functionality",
                "answers_label": "Store Method",
                "concepts": [
                  {
                    "text": "gets the current state",
                    "correct_answer": {
                      "id": "a1522095233344",
                      "text": ".getState()"
                    }
                  },
                  {
                    "text": "takes in functions that will be called when the state changes",
                    "correct_answer": {
                      "id": "a1522095265087",
                      "text": ".subscribe()"
                    }
                  },
                  {
                    "text": "the application's state",
                    "correct_answer": {
                      "id": "a1522095265722",
                      "text": "the state tree"
                    }
                  },
                  {
                    "text": "modifies the state",
                    "correct_answer": {
                      "id": "a1522095266368",
                      "text": ".dispatch()"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1522095265722",
                    "text": "the state tree"
                  },
                  {
                    "id": "a1522095266368",
                    "text": ".dispatch()"
                  },
                  {
                    "id": "a1522095233344",
                    "text": ".getState()"
                  },
                  {
                    "id": "a1522095265087",
                    "text": ".subscribe()"
                  }
                ]
              }
            },
            {
              "id": 572525,
              "key": "60920617-c02d-431f-9482-3546214da63b",
              "title": "Identifying The Library Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "P09BK4IXzmk",
                "china_cdn_id": "P09BK4IXzmk.mp4"
              }
            },
            {
              "id": 571694,
              "key": "dffc805a-4118-431e-80c7-4821e8a29dfc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/create-store-dispatch/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 571695,
              "key": "9bbcfcc5-0f47-4a3c-8a26-96e7c621ceb8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The new `dispatch()` method is pretty small, but is vital to our functioning store code. To briefly recap how the method functions:\n\n* `dispatch()` is called with an Action\n* the reducer that was passed to `createStore()` is called with the current state tree and the action...this updates the state tree\n* because the state has (potentially) changed, all listener functions that have been registered with the `subscribe()` method are called",
              "instructor_notes": ""
            },
            {
              "id": 571696,
              "key": "b9fa591e-c869-444c-9397-16e3a2f5eb61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we learned about a number of important points about Redux. We learned about pure functions, a Reducer function (which, itself, needs to be a pure function), dispatching changes in our store, and identifying which parts of our code are generic library code and which are specific to our app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571704,
          "key": "933bd456-6ed9-436e-bcc2-961bd79a6059",
          "title": "Putting it all together",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "933bd456-6ed9-436e-bcc2-961bd79a6059",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572528,
              "key": "4a177329-091b-4bec-9155-90015d57eb10",
              "title": "Putting It All Together",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HEQR3KYjG24",
                "china_cdn_id": "HEQR3KYjG24.mp4"
              }
            },
            {
              "id": 571699,
              "key": "98cf6a5d-2ae0-4899-b412-f1cd9e7feb30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/putting-it-all-together/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 578092,
              "key": "2d13c460-b3e2-4023-8c8f-3752b7388351",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5abbd27d_nd019-redux-l1-04-the-store/nd019-redux-l1-04-the-store.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2d13c460-b3e2-4023-8c8f-3752b7388351",
              "caption": "The Store contains the state tree and provides ways to interact with the state tree.",
              "alt": "The Store contains the state tree and provides ways to interact with the state tree.",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 571701,
              "key": "f852f188-f3ba-4133-aa48-6968307c3e4a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We've finally finished creating the `createStore` function! Using the image above as a guide, let's break down what we've accomplished: \n\n* we created a function called `createStore()` that returns a *store* object\n* `createStore()` must be passed a \"reducer\" function when invoked\n* the store object has three methods on it:\n - `.getState()` - used to get the current state from the store\n - `.subscribe()` - used to provide a listener function the store will call when the state changes\n - `.dispatch()` - used to make changes to the store's state\n* the store object's methods have access to the state of the store via closure",
              "instructor_notes": ""
            },
            {
              "id": 571702,
              "key": "1613fc76-8a9c-40fa-93e2-9fd3bd5d7221",
              "title": "Quiz: Store Facts",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1613fc76-8a9c-40fa-93e2-9fd3bd5d7221",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are true statements about the store? Please select all that apply.",
                "answers": [
                  {
                    "id": "a1522095588804",
                    "text": "Updates to the store can only be triggered by dispatching actions.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522095591035",
                    "text": "The `createStore()` function is imported from React.",
                    "is_correct": false
                  },
                  {
                    "id": "a1522095591691",
                    "text": "The store's subscribe() function helps connect React components to the store.",
                    "is_correct": true
                  },
                  {
                    "id": "a1522095592179",
                    "text": "Updates to the store can only be triggered by overwriting the store object directly (i.e., without dispatching an action)",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571703,
              "key": "c009e669-01ad-462f-a689-bf04dbcd69c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nUp until this point, we've been building out the `createStore()` function, piece by piece. In this section, we put all of those pieces together to create a fully functioning project. Then we took that code and demoed it working in the console. We showed that subscribing to the store returned a function we could use to unsubscribe later. We also dispatched an action and saw how the state was updated as a result.\n\nIn the next section, we'll keep building up our app-specific parts of the code to handle different actions and to be more error-proof.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571722,
          "key": "d7253fcc-12ea-4b20-9cf2-7386f5d364ff",
          "title": "Managing more State",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d7253fcc-12ea-4b20-9cf2-7386f5d364ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 571705,
              "key": "21aa5171-7c1d-4b88-959d-5621603475af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As of right now, our code is handling the `ADD_TODO` action. There are still a couple more actions that our app is supposed to be able to handle:\n\n* the `REMOVE_TODO` action\n* the `TOGGLE_TODO` action",
              "instructor_notes": ""
            },
            {
              "id": 572440,
              "key": "afb924ac-4392-4780-9bbb-e721c8635b30",
              "title": "Handling More Actions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "a3giVoHKkHE",
                "china_cdn_id": "a3giVoHKkHE.mp4"
              }
            },
            {
              "id": 572530,
              "key": "a09043fc-c94b-4d9a-b416-1e3e07258fec",
              "title": "More Actions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Yqeks3OSY6M",
                "china_cdn_id": "Yqeks3OSY6M.mp4"
              }
            },
            {
              "id": 571708,
              "key": "5671d639-e4cc-4fc8-b36c-31036f4b762f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/more-actions/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 571709,
              "key": "65dd2c22-c02d-4fad-87e5-356c5f553807",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap of New Actions\n\nOur app can not only handle _adding_ todo items -- it can now handle _removing_ a todo item, as well as _toggling_ a todo item (as complete or incomplete)! To make this all possible, we updated our `todos` reducer to be able to respond to actions of the `type` `REMOVE_TODO` and `TOGGLE_TODO`. \n\nBefore moving on, let's make sure we're on the same page on how this was all implemented. Our `todos` reducer originally looked like the following:\n\n```js\nfunction todos (state = [], action) {\n  if (action.type === 'ADD_TODO') {\n    return state.concat([action.todo]);\n  }\n\n  return state;\n}\n```\n\nTo resolve additional action types, we added a few more conditions to our reducer logic:\n\n```js\nfunction todos (state = [], action) {\n  if (action.type === 'ADD_TODO') {\n    return state.concat([action.todo]);\n  } else if (action.type === 'REMOVE_TODO') {\n    // ...\n  } else if (action.type === 'TOGGLE_TODO') {\n    // ...\n  } else {\n    return state;\n  }\n}\n```\n\nNote that just like the original `todos` reducer, we simply return the original state if the reducer receives an action type that it's not concerned with.\n\nTo remove a todo item, we called `filter()` on the state. This returns a new state (an array) with only todo items whose `id`'s _do not_ match the `id` of the todo we want to remove:\n\n```js\nfunction todos (state = [], action) {\n  if (action.type === 'ADD_TODO') {\n    return state.concat([action.todo]);\n  } else if (action.type === 'REMOVE_TODO') {\n    return state.filter((todo) => todo.id !== action.id);\n  } else if (action.type === 'TOGGLE_TODO') {\n    // ...\n  } else {\n    return state;\n  }\n}\n```\n\nTo handle toggling a todo item, we want to change the value of the `complete` property on whatever `id` is passed along on the action. We mapped over the entire state, and if `todo.id` matched `action.id`, we used `Object.assign()` to return a new object with merged properties:\n\n```js\nfunction todos (state = [], action) {\n  if (action.type === 'ADD_TODO') {\n    return state.concat([action.todo]);\n  } else if (action.type === 'REMOVE_TODO') {\n    return state.filter((todo) => todo.id !== action.id);\n  } else if (action.type === 'TOGGLE_TODO') {\n    return state.map((todo) => todo.id !== action.id ? todo :\n    Object.assign({}, todo, { complete: !todo.complete }));\n  } else {\n    return state;\n  }\n}\n```\n\nWe then refactored our entire `todos` reducer to use a `switch` statement rather than multiple `if`/`else` statements:\n\n```js\nfunction todos (state = [], action) {\n  switch(action.type) {\n    case 'ADD_TODO' :\n      return state.concat([action.todo]);\n    case 'REMOVE_TODO' :\n      return state.filter((todo) => todo.id !== action.id);\n    case 'TOGGLE_TODO' :\n      return state.map((todo) => todo.id !== action.id ? todo :\n      Object.assign({}, todo, { complete: !todo.complete }));\n    default :\n      return state;\n  }\n}\n```\n\nIn the above snippet, we matched `cases` against an expression (i.e., `action.type`), and executed statements associated with that particular `case`. \n\nLet's now extend our app with some additional functionality!",
              "instructor_notes": ""
            },
            {
              "id": 571710,
              "key": "e378e3a1-fd7b-4ccd-b3e9-c0c61dffbc0f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding Goals to our App\n\nCurrently, the app keeps track of a single piece of state - a list of todo items.\n\nLet's make the app a bit more complicated and add in a second piece of state for our app to track - goals.",
              "instructor_notes": ""
            },
            {
              "id": 572531,
              "key": "8a5e543e-0226-4f19-8550-15741e5d69cc",
              "title": "Goals Reducer",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kPYmzsY2RAo",
                "china_cdn_id": "kPYmzsY2RAo.mp4"
              }
            },
            {
              "id": 571712,
              "key": "3a848596-bc35-4baa-98e1-623e53dd75ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/goals-reducer/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 571713,
              "key": "c0ecd00f-29d8-4831-be9d-637b08ba4ee5",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c0ecd00f-29d8-4831-be9d-637b08ba4ee5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've created a `goals` reducer.",
                "My `goals` reducer handles the `ADD_GOAL` action type",
                "My `goals` reducer handles the `REMOVE_GOAL` action type.",
                "My `goals` reducer handles the default case."
              ],
              "positive_feedback": "Thanks for following along! You'll definitely learn the most if you're directly working with the code.",
              "video_feedback": null,
              "description": "It's best if you're working with the code directly and following along, so make sure to check off each of the following:"
            },
            {
              "id": 571714,
              "key": "315eabf6-8e27-4c27-9ad5-43850294303d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I kind of pointed it out at the end of the previous screencast, but we now have _two_ reducer functions:\n\n* `todos`\n* `goals`\n\nHowever, the `createStore()` function we built can only handle a _single_ reducer function:\n\n```js\n// createStore takes one reducer function as an argument\nconst store = createStore(todos);\n```\n\nWe can't call `createStore()` passing it two reducer functions:\n\n```js\n// this will not work\nconst store = createStore(todos, goals);\n```\n\nSo we've got a problem...",
              "instructor_notes": ""
            },
            {
              "id": 572461,
              "key": "92037b44-aac8-433a-b4cd-3e521f4523be",
              "title": "Multiple Reducers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QTNV7BP7dWs",
                "china_cdn_id": "QTNV7BP7dWs.mp4"
              }
            },
            {
              "id": 651068,
              "key": "b2f48656-68f0-43ce-9ad3-ef5c1fc05b92",
              "title": "Combining Reducers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qL0HB_kmiQ0",
                "china_cdn_id": "qL0HB_kmiQ0.mp4"
              }
            },
            {
              "id": 571717,
              "key": "5503c5eb-ce79-4c07-abcf-a294c6a45717",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/combine-reducers/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 669588,
              "key": "ec9cc41d-7b19-4d35-8d61-838ef7011ed9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Whenever `dispatch` is called, we invoke our `app` function. The `app` function will then invoke the `todos` reducer as well as the `goals` reducer. Those will return their specific portions of the state. And then, the `app` function will return a state object with a `todos` property (the value of which is what the `todos` reducer returned) and a `goals` property (the value of which is what the `goals` reducer returned).\n\n``` js\nfunction todos (state = [], action) {\n  switch(action.type) {\n    case 'ADD_TODO' :\n      return state.concat([action.todo])\n    case 'REMOVE_TODO' :\n      return state.filter((todo) => todo.id !== action.id)\n    case 'TOGGLE_TODO' :\n      return state.map((todo) => todo.id !== action.id ? todo :\n        Object.assign({}, todo, { complete: !todo.complete }))\n    default :\n      return state\n  }\n}\n\nfunction goals (state = [], action) {\n  switch(action.type) {\n    case 'ADD_GOAL' :\n      return state.concat([action.goal])\n    case 'REMOVE_GOAL' :\n      return state.filter((goal) => goal.id !== action.id)\n    default :\n      return state\n  }\n}\n\nfunction app (state = {}, action) {\n  return {\n    todos: todos(state.todos, action),\n    goals: goals(state.goals, action),\n  }\n}\n\n/*\nPassing the root reducer to our store since our createStore function can only take one reducer.\n*/\n\nconst store = createStore(app);\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 571719,
              "key": "c4d9ea0a-4326-4d53-992a-4da08fdbb191",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c4d9ea0a-4326-4d53-992a-4da08fdbb191",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select all statements that are true.",
                "answers": [
                  {
                    "id": "a1522096372353",
                    "text": "Reducers must be pure",
                    "is_correct": true
                  },
                  {
                    "id": "a1522096374768",
                    "text": "Though each reducer handles a different slice of state, we must combine reducers into a single reducer to pass to the store",
                    "is_correct": true
                  },
                  {
                    "id": "a1522096375559",
                    "text": "`createStore()` takes only one `reducer` argument",
                    "is_correct": true
                  },
                  {
                    "id": "a1522096378249",
                    "text": "Reducers are typically named after the slices of state they manage",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 571721,
              "key": "6aa55700-24fc-44f7-9c0e-266b7f01422c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we bolstered our application to handle a number of different actions as well as an entirely new piece of state! In addition to our app handling the `ADD_TODO` action, it now handles:\n* the `REMOVE_TODO` action\n* the `TOGGLE_TODO` action\n\nWe also created the `goals` reducer which handles:\n\n* an `ADD_GOAL` action\n* a `REMOVE_GOAL` action\n\nSo our application can now manage the state of our todos and goals, and it can do all of this, predictably!\n\nIn the next and final section of this lesson, we'll look at how we can convert some of our existing functionality to follow best practices.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571730,
          "key": "bf62aa7d-5f5b-4dc7-b6b4-b28903d2bfd6",
          "title": "Better Practices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bf62aa7d-5f5b-4dc7-b6b4-b28903d2bfd6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572532,
              "key": "ec9951db-a47f-464f-877f-f984abe06120",
              "title": "Constants",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BnX0BPQPuY4",
                "china_cdn_id": "BnX0BPQPuY4.mp4"
              }
            },
            {
              "id": 571724,
              "key": "d172d7ca-0675-43bf-85d4-0439efc07925",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/constants/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 571725,
              "key": "3fa24a12-1caf-44ac-9332-edfde6e88ddb",
              "title": "Constants vs Strings",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3fa24a12-1caf-44ac-9332-edfde6e88ddb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why prefer constants over strings in action types?",
                "answers": [
                  {
                    "id": "a1522096566697",
                    "text": "Constants are more serializable",
                    "is_correct": false
                  },
                  {
                    "id": "a1522096572976",
                    "text": "We can ensure an error will be thrown for misspelled action types",
                    "is_correct": true
                  },
                  {
                    "id": "a1522096573632",
                    "text": "There is no difference between using constants versus strings",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 572534,
              "key": "01546113-3178-4f0a-8d2e-632303887c99",
              "title": "Action Creators",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oPC21DNJwyo",
                "china_cdn_id": "oPC21DNJwyo.mp4"
              }
            },
            {
              "id": 571727,
              "key": "e66e0e7a-a7fb-4e69-89ab-c6a56fc223c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-redux-todos-goals/blob/action-creators/index.js)",
              "instructor_notes": ""
            },
            {
              "id": 578115,
              "key": "16255e2b-8f96-445a-8dda-b1aef2aa549b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "16255e2b-8f96-445a-8dda-b1aef2aa549b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4654106132742144",
                "initial_code_files": [
                  {
                    "text": "/* Create An Action Creator\n *\n * You need to create an action creator called 'mealCreator' that should:\n *   - Accept an id\n *   - Return a Redux action with a 'type' property that has a value of 'CREATE_MEAL'\n *   - Include the id passed to the action creator\n*/\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 571729,
              "key": "2ae3e60c-2167-43b4-af62-25ea70c52302",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nIn this section, we converted our actions to use JavaScript constants instead of strings. We also refactored our `.dispatch()` calls from passing in unique objects directly to them, to calling special functions that create the action objects - these special functions that create action objects are called **Action Creators**.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571732,
          "key": "cd15a3dd-5807-41d8-a4c4-396d61275d65",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cd15a3dd-5807-41d8-a4c4-396d61275d65",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572474,
              "key": "d3d8fb89-de4e-4641-b8e3-936259f603b9",
              "title": "Lesson Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "a4hs3EgcyeI",
                "china_cdn_id": "a4hs3EgcyeI.mp4"
              }
            },
            {
              "id": 637765,
              "key": "7ad44868-9fe3-4c6e-9483-85f09419993a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Lesson Challenge\n\nAnswer the following questions and share your answers with your classmates.\n\n1) How is state updated in Redux applications?\n\n2) What is the `store`?",
              "instructor_notes": ""
            },
            {
              "id": 688769,
              "key": "055496f4-af31-4b63-8b5b-76f55d3507d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's how what you've accomplished in the program thus far maps to your career:",
              "instructor_notes": ""
            },
            {
              "id": 688770,
              "key": "35ef199f-991f-434c-ad59-d1dc8c4ac97f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b60f6a8_screen-shot-2018-07-31-at-4.53.16-pm/screen-shot-2018-07-31-at-4.53.16-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/35ef199f-991f-434c-ad59-d1dc8c4ac97f",
              "caption": "",
              "alt": "",
              "width": 700,
              "height": 600,
              "instructor_notes": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}