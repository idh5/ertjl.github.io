WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.607
那么 什么是迭代?

00:00:02.607 --> 00:00:06.785
可能描述的最好方法 是查看一个普通的 for 循环

00:00:06.785 --> 00:00:08.108
当你编写 for 循环时

00:00:08.108 --> 00:00:10.285
需要为其提供一个变量

00:00:10.285 --> 00:00:13.290
此变量通常为字母 i 因为 i 一直

00:00:13.290 --> 00:00:17.220
被用作迭代器 来跟踪循环中的位置

00:00:17.220 --> 00:00:19.815
当你进行遍历 比如遍历一个数组时

00:00:19.815 --> 00:00:22.144
此迭代器会像索引一样

00:00:22.144 --> 00:00:26.005
让你一个接一个访问数组中的每一项

00:00:26.005 --> 00:00:27.930
这种逐个获取项的过程就叫迭代

00:00:27.930 --> 00:00:29.585
这种逐个获取项的过程就叫迭代

00:00:29.585 --> 00:00:31.565
我们已经使用迭代很长时间了

00:00:31.565 --> 00:00:33.115
那么为什么要在这里提起呢?

00:00:33.115 --> 00:00:35.928
听起来迭代一直都是 JavaScript 的一部分

00:00:35.928 --> 00:00:37.920
ES6 中有什么新的变化吗?

00:00:37.920 --> 00:00:39.960
的确有一些

00:00:39.960 --> 00:00:42.240
首先 添加了一个新的可迭代接口

00:00:42.240 --> 00:00:45.190
允许我们自定义对象的迭代方式

00:00:45.190 --> 00:00:47.200
也就是循环遍历的方式

00:00:47.200 --> 00:00:49.580
第三课讲符号时 我们会更详细地说明

00:00:49.580 --> 00:00:51.935
第三课讲符号时 我们会更详细地说明

00:00:51.935 --> 00:00:54.260
第二 添加了一种新循环

00:00:54.260 --> 00:00:56.175
叫做 for...of 循环

00:00:56.175 --> 00:01:00.180
专门遍历可迭代对象

00:01:00.180 --> 00:01:01.845
我说的可迭代对象

00:01:01.845 --> 00:01:05.940
是指实现了这个新的可迭代接口的对象

00:01:05.940 --> 00:01:09.000
看到这里的 for 和 of 了吧

00:01:09.000 --> 00:01:10.770
现在你可能听得有点糊涂

00:01:10.770 --> 00:01:13.050
那么我们退一步 看一些传统的 for 循环代码示例

00:01:13.050 --> 00:01:15.570
那么我们退一步 看一些传统的 for 循环代码示例

00:01:15.570 --> 00:01:20.070
然后看看新的 for...of 如何脱颖而出 成为你的最佳的循环选择

