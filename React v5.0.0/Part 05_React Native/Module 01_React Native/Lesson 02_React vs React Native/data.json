{
  "data": {
    "lesson": {
      "id": 394098,
      "key": "4df595e8-bd65-435e-ad88-0db5d27c44a2",
      "title": "React vs React Native",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "You’ll discover the ideological differences between building for the web and building for native as well as the main differences between the React and the React Native API.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/4df595e8-bd65-435e-ad88-0db5d27c44a2/394098/1518463552030/React%20vs%20React%20Native%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/4df595e8-bd65-435e-ad88-0db5d27c44a2/394098/1518463485367/React%20vs%20React%20Native%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 394138,
          "key": "b258bcff-75da-4964-9590-a413a10e2bf0",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b258bcff-75da-4964-9590-a413a10e2bf0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394188,
              "key": "cace7d83-347e-4017-a731-2bf66b0cc861",
              "title": "React vs React Native Lesson Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CZTt62RrNdA",
                "china_cdn_id": "CZTt62RrNdA.mp4"
              }
            }
          ]
        },
        {
          "id": 394139,
          "key": "ce1bfe1d-dd63-4711-bc3f-aab263075d98",
          "title": "Web vs Native",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce1bfe1d-dd63-4711-bc3f-aab263075d98",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394669,
              "key": "d983d1d8-7052-424f-88a4-2b5d76f03144",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Web vs. Native",
              "instructor_notes": ""
            },
            {
              "id": 394189,
              "key": "b483e17c-b739-4568-a543-62c681057137",
              "title": "Web vs Native",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "R0Qf5a0Vxho",
                "china_cdn_id": "R0Qf5a0Vxho.mp4"
              }
            },
            {
              "id": 394190,
              "key": "c6f6323c-a0ce-49a1-8c0d-fd264fc13323",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Native applications look and \"feel\" different because they are _fundamentally_ different. Even though we're using the same React principles that you've learned throughout this program, keep in mind that this is no longer the web! While some of these distinctions are more apparent (e.g., the development process, access to native features, how users get updates, etc.), there are some key differences that we'll be taking a deep dive into during this course.\n\nFor one, native apps often leverage **animations** to help create a great user experience. Animations such as button effects, screen transitions, and other visual feedback may be subtle, but they support continuity and guidance in the apps you build. They all function to dynamically _tell a story_ about how your application works. Without animations, an application can feel like just a collection of static screens. For now, stay tuned; we'll be checking out animations in-depth during Lesson 5.\n\nAnother key difference between native and web applications is in **navigation**. Recall that React Router's `Route` component allows us to map a URL to a specific UI component. In React Native, routers function as a _stack_; that is, individual screens are \"pushed\" and \"popped\" as needed. We'll look at routing more closely later in Lesson 4.\n",
              "instructor_notes": ""
            },
            {
              "id": 394191,
              "key": "431ce20f-39d5-4c68-8bbb-6e14728f7d87",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Android vs. iOS\n\nNot only are there fundamental differences between _native_ apps and _web_ apps, you'll also find differences between how native platforms (iOS and Android) _look and feel_ as well. Perhaps the most apparent are the distinct design philosophies on each platform: Android apps utilize Google's [Material Design](https://material.io/guidelines/material-design/introduction.html), while iOS apps take advantage of Apple's [Human Interface Design](https://developer.apple.com/ios/human-interface-guidelines/overview/themes/). When designing mobile applications, it's important to your users that an iOS app _feels_ like an iOS app, and an Android app _feels_ like an Android app.\n\nNavigation _between_ screens feels distinct between Android and iOS as well. Android devices have access to a **navigation bar** at the bottom of the screen, which allows users to go back to the previous screen (among other features). On iOS, the approach is different: there is no such universal navigation bar! When building the UI for an iOS application, it is important to include a back button (perhaps on a custom [navigation bar](https://developer.apple.com/ios/human-interface-guidelines/bars/navigation-bars/)) to help guide users through your app.\n\nOne more key difference between Android and iOS involves tab navigation. iOS apps include [tab bars](https://developer.apple.com/ios/human-interface-guidelines/bars/tab-bars/) at the bottom of the app's screen, allowing for convenient access to different portions of the app. Likewise, Android apps include them as well; however tabs are distinctly located [at the top of the screen](https://material.io/guidelines/components/tabs.html). Both allow access to high-level content, and we'll explore React Native's **TabNavigator** in closer detail in Lesson 4.",
              "instructor_notes": ""
            },
            {
              "id": 394641,
              "key": "8fc2b1bc-1d2f-4aaa-affd-8b3eb5a4337f",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8fc2b1bc-1d2f-4aaa-affd-8b3eb5a4337f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about web applications or native applications? Select all that apply:",
                "answers": [
                  {
                    "id": "a1505168727664",
                    "text": "Web applications tend to be characterized by more animations than in native applications",
                    "is_correct": false
                  },
                  {
                    "id": "a1505168729845",
                    "text": "Tabs in native iOS applications are generally expected to be found at the bottom of the device screen",
                    "is_correct": true
                  },
                  {
                    "id": "a1505168730294",
                    "text": "Each screen in a native application is actually just a URL mapped to a UI component",
                    "is_correct": false
                  },
                  {
                    "id": "a1505168730726",
                    "text": "Native iOS applications can leverage a universal \"back\" button ",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 394193,
              "key": "e43d7713-4a78-4242-8f3d-5c30735f004b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nWhen developing your React Native projects, keep in mind that you're designing for a different experience than that of web applications. Mobile applications look and _feel_ different due to fundamental differences, such as subtle animations that build a sense of continuity for your users. Differences exist between Android and iOS as well, especially in their design philosophies and navigation. We'll look at some fundamental components that make up React Natives apps in the next section!\n\n### Further Research\n\n* [iOS Interface Essentials](https://developer.apple.com/ios/human-interface-guidelines/overview/interface-essentials/)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394140,
          "key": "d589fc03-638e-4f72-b6cb-1cbf22c9bf3f",
          "title": "Common React Native Components",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d589fc03-638e-4f72-b6cb-1cbf22c9bf3f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394671,
              "key": "59c6eef9-5d4a-43ee-88f7-98847ff10efd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Common React Native Components",
              "instructor_notes": ""
            },
            {
              "id": 394194,
              "key": "7ff71caa-7fb6-4a55-a0d4-86e0cbc4ac96",
              "title": "React Native Components",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9Nt1tXV3y0c",
                "china_cdn_id": "9Nt1tXV3y0c.mp4"
              }
            },
            {
              "id": 394195,
              "key": "a8f43f46-7ac0-4a3c-9a0e-70cc12c8d165",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When writing HTML, we're used to using `<div>` and `<span>` tags to define sections or to contain other elements on the page. In React Native, a similar principle applies, but this time we're using React Native's `<View>` component to build the application UI. Just like HTML's `<div>`, `<View>` components can accommodate several props (e.g. `style`), and can even be nested inside other `<View>` components!\n\n`<Text>` works just how you'd expect, as well. Its main objective is to, by no surprise, render text in the application. Just like `<View>`, styling and nesting capabilities apply to `<Text>` components, as well.\n\nLet's see how they work!\n",
              "instructor_notes": ""
            },
            {
              "id": 394196,
              "key": "8c36463e-c8ed-4a91-a238-6aa3f0448d89",
              "title": "View and Text",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_Qv4NGKNuug",
                "china_cdn_id": "_Qv4NGKNuug.mp4"
              }
            },
            {
              "id": 395821,
              "key": "ff7f5b2e-3c75-4fed-bad5-6b80bbbe8b54",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## In-Class Project Overview",
              "instructor_notes": ""
            },
            {
              "id": 394197,
              "key": "b1f9a2c7-1a4b-41d4-9f25-5ca46bddcca3",
              "title": "App Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HZSi_XB3drA",
                "china_cdn_id": "HZSi_XB3drA.mp4"
              }
            },
            {
              "id": 394198,
              "key": "d59e3f76-add9-4668-a034-e1e038ccb429",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Icons",
              "instructor_notes": ""
            },
            {
              "id": 394199,
              "key": "2e1953a5-564e-48fe-908f-8fa8784bce30",
              "title": "Rendering Icons",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tYb0-l81x4U",
                "china_cdn_id": "tYb0-l81x4U.mp4"
              }
            },
            {
              "id": 394200,
              "key": "df9408b1-d29e-48ae-96de-1dbd797709cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Right out of the box, **Create React Native App** offers support for thousands of vector icons to use in your applications. Feel free to bookmark and check out Expo's [vector icon directory](https://expo.github.io/vector-icons) for a complete list. Whichever icon set you choose, just be sure that it fits the overall look and feel of your application (e.g., using platform-specific icons).",
              "instructor_notes": ""
            },
            {
              "id": 394201,
              "key": "81e2b328-ddb1-44a4-ad4a-ea43830c16d2",
              "title": "AddEntry-GetMetricMetaInfo Part 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sH4D8b7MotQ",
                "china_cdn_id": "sH4D8b7MotQ.mp4"
              }
            },
            {
              "id": 394203,
              "key": "9e774afb-ab4b-4515-9b75-09e33a1b6ae3",
              "title": "AddEntry-GetMetricMetaInfo Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WtAiZNpKpkM",
                "china_cdn_id": "WtAiZNpKpkM.mp4"
              }
            },
            {
              "id": 394202,
              "key": "43607974-912f-426a-a3c6-7cec58febfb0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in the previous two videos.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/c3b244a93a6fdd484cfd9306fc05e0c2095bdbe4)\n\n> ## ⚠️  Icons not Rendering? ⚠️\n>\n> In the commit above, the `color` property of the `MaterialIcons` component is set to `white`. This will make it seem as if no icons are appearing, since the background color is also white. Feel free to switch this value to `black` (as the above video demonstrates).",
              "instructor_notes": ""
            },
            {
              "id": 395825,
              "key": "64c729e6-8a67-48be-8584-f533163c8558",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "64c729e6-8a67-48be-8584-f533163c8558",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created the `getMetricMetaInfo()` helper function",
                "I have created a new `components` folder",
                "I have created the `AddEntry` component"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "Time for a check-in! Let's make sure we're on the same page before proceeding."
            },
            {
              "id": 394204,
              "key": "ccc022cb-a60e-42df-be82-0bdae618a7d5",
              "title": "AddEntry-Methods",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DrUMM2IzL9Q",
                "china_cdn_id": "DrUMM2IzL9Q.mp4"
              }
            },
            {
              "id": 394694,
              "key": "3f2a4a02-5896-4b7d-93f6-f4f7202229d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/f710aa25881665feacf82b100643146b8d011446)",
              "instructor_notes": ""
            },
            {
              "id": 394206,
              "key": "dd342a8f-b0e0-4230-b769-4f8888d1d097",
              "title": "AddEntry-Render",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xLh5C-hCuSE",
                "china_cdn_id": "xLh5C-hCuSE.mp4"
              }
            },
            {
              "id": 394695,
              "key": "4314145d-f07a-46b7-843f-30d45a03694a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/3aa3f69d21b8a96b4b9d99f67b655772a479095f)",
              "instructor_notes": ""
            },
            {
              "id": 394207,
              "key": "5ddc3bbf-1881-499e-8f9a-96736fe2b23e",
              "title": "AddEntry-DateHeader",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s0X1NrNNVQM",
                "china_cdn_id": "s0X1NrNNVQM.mp4"
              }
            },
            {
              "id": 394696,
              "key": "de3fe321-1747-48db-b93d-bf97ed504c23",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/a7ab15bf3f46d1202d86a2c2fe06e458bd7faffd)",
              "instructor_notes": ""
            },
            {
              "id": 395827,
              "key": "a347de01-4b16-46bd-a454-905b24a385a6",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a347de01-4b16-46bd-a454-905b24a385a6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have added local component state to `AddEntry`",
                "I have created the `increment()`, `decrement`, and `slide()` methods in `AddEntry`",
                "I have created the `UdaciSlider` component",
                "I have created the `UdaciSteppers` component",
                "I have created the `DateHeader` component",
                "I have updated the `render()` method in `AddEntry`"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "How are things looking so far?"
            },
            {
              "id": 394208,
              "key": "276fef35-41ab-4059-b6c6-14c13625eb17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Touchables\n\nUsers mainly interact with web apps with _clicks_. In the world of mobile apps, however, several different _touch_ gestures are used to navigate through the app: tapping a button, swiping to scroll through a list, and so on. \n\nReact Native offers a number of components to handle \"tapping gestures,\" or what is called **Touchables**. Let's take a look at them in detail in the following video:\n\n* `Button`\n* `TouchableHighlight`\n* `TouchableOpacity`\n* `TouchableNativeFeedback`\n* `TouchableWithoutFeedback`\n",
              "instructor_notes": ""
            },
            {
              "id": 394209,
              "key": "84b34d3f-6970-4cff-ae9f-851ee1b37056",
              "title": "Handling Touches",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "u2-Efn5K6eM",
                "china_cdn_id": "u2-Efn5K6eM.mp4"
              }
            },
            {
              "id": 394210,
              "key": "c3db7194-5276-44a0-b2f8-440b72633b8c",
              "title": "AddEntry-SubmitBtn",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7OzFooD9EoM",
                "china_cdn_id": "7OzFooD9EoM.mp4"
              }
            },
            {
              "id": 394698,
              "key": "652adaa2-be4a-4877-aa98-f00eea22ad30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/fea2dbb62ef103ed0a44307dd7922bdfcab83ef2)",
              "instructor_notes": ""
            },
            {
              "id": 394644,
              "key": "fcd2e55b-7d25-4b78-ad96-75fb04a6387b",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fcd2e55b-7d25-4b78-ad96-75fb04a6387b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about handling touches in React Native apps? Select all that apply:",
                "answers": [
                  {
                    "id": "a1505169141864",
                    "text": "Unlike Buttons, Touchables already include some basic default styling",
                    "is_correct": false
                  },
                  {
                    "id": "a1505169209396",
                    "text": "Buttons look the same on iOS as they do on Android",
                    "is_correct": false
                  },
                  {
                    "id": "a1505169209972",
                    "text": "Both Buttons and Touchables have access to an `onPress` prop",
                    "is_correct": true
                  },
                  {
                    "id": "a1505169224540",
                    "text": "Touchables can be nested within Views, and Views can be nested within Touchables",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 394212,
              "key": "c7cace19-a771-4dd7-b9a5-3655fbd406e3",
              "title": "Slider",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eLrjkwYIB0g",
                "china_cdn_id": "eLrjkwYIB0g.mp4"
              }
            },
            {
              "id": 394213,
              "key": "2c388439-701b-413b-82c0-0caa041a7358",
              "title": "AddEntry-UdaciSlider",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Mg8vSOPiQ7M",
                "china_cdn_id": "Mg8vSOPiQ7M.mp4"
              }
            },
            {
              "id": 394699,
              "key": "7d0ceb69-c75b-472c-8b2b-614d320ed0f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/528c326cc0dfafcd74199c7be9cb00d971cc8a23)",
              "instructor_notes": ""
            },
            {
              "id": 394214,
              "key": "3963e5e8-642a-46a4-906a-f70a4d6a06ac",
              "title": "AddEntry-UdaciSteppers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cb3vt0Gpbjc",
                "china_cdn_id": "cb3vt0Gpbjc.mp4"
              }
            },
            {
              "id": 394700,
              "key": "10b80cf1-f800-4db4-827a-27067a6319d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/f9b86f4b8fd5c2c2c89cfa32552b67f76a48fcf3)",
              "instructor_notes": ""
            },
            {
              "id": 394215,
              "key": "d0f3e48c-a8b8-4551-afdd-4826b98b4600",
              "title": "AddEntry-TextButton",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b-AXsdbqZyU",
                "china_cdn_id": "b-AXsdbqZyU.mp4"
              }
            },
            {
              "id": 394701,
              "key": "030a91db-ae64-4165-a527-9dc6c2faf823",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/a45a7c370228aaa333840544c508c7d8d9f7da31)",
              "instructor_notes": ""
            },
            {
              "id": 395831,
              "key": "23bd3148-8ccf-4e6d-854d-4cf6a2ad76db",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "23bd3148-8ccf-4e6d-854d-4cf6a2ad76db",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created the `submit()` method in `AddEntry`",
                "I have created the `SubmitBtn()` component and rendered it in `AddEntry`",
                "I have updated the `UdaciSlider` component",
                "I have updated the `UdaciStepper` component",
                "I have created the `TextButton` component",
                "I have created the `reset()` method in `AddEntry`",
                "I have updated the `render()` method in `AddEntry`"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "We've just added lots of functionality to UdaciFitness. Let's check in!"
            },
            {
              "id": 394216,
              "key": "328dfd8b-2b11-4780-8e92-f9a3f93122df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 Pause Udacifitness💡\n\n> At this point, let's put the UdaciFitness project on hold for a bit and talk about some other common React Native components. \nFor example, how would you handle lists in a mobile app? What about forms, or images? \n\n>Though these are not necessarily used in the in-class project, these components are still great to know as you develop React Native applications.\n",
              "instructor_notes": ""
            },
            {
              "id": 394217,
              "key": "b0014ccf-197d-4d74-93ed-cba997794e9a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lists\n\nReact Native comes with a few ways to render lists. You'll probably run into `ScrollView` and `FlatList` components most commonly, so let's take a look at both of these in detail!\n",
              "instructor_notes": ""
            },
            {
              "id": 394218,
              "key": "ce666eda-4be7-4d32-b14f-51d593531030",
              "title": "ScrollView and FlatList",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6JgdIxDn8H4",
                "china_cdn_id": "6JgdIxDn8H4.mp4"
              }
            },
            {
              "id": 410793,
              "key": "575492b7-9b3c-4971-945c-4470027cc979",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 Seeing Errors with `ScrollView`? 💡\n\n> If you're running into errors mentioning that _`ScrollView` has no propType..._, we recommend reinstalling Create React Native App globally, as well as updating the Expo mobile application. If you still find issues, feel free to check out this [GitHub issue](https://github.com/facebook/react-native/issues/16090) on the official React Native repo.",
              "instructor_notes": ""
            },
            {
              "id": 416124,
              "key": "f632054f-f9d1-4fdc-bb2a-de929c385e00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 `SectionList` 💡\n\n> What if you wanted to add section headers to a list? `FlatList` doesn’t quite support these, but React Native offers another list component that renders these headers nicely. Feel free to check out [SectionList](https://facebook.github.io/react-native/docs/sectionlist.html) in the React Native documentation for a closer look",
              "instructor_notes": ""
            },
            {
              "id": 394647,
              "key": "dca0c28d-a5cc-4d49-a1c0-ae179c2b86f1",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dca0c28d-a5cc-4d49-a1c0-ae179c2b86f1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each list type with their role:"
                },
                "concepts_label": "List Type",
                "answers_label": "Role",
                "concepts": [
                  {
                    "text": "ScrollView",
                    "correct_answer": {
                      "id": "a1505169386771",
                      "text": "renders all child components at once"
                    }
                  },
                  {
                    "text": "FlatList",
                    "correct_answer": {
                      "id": "a1505169394616",
                      "text": "renders only items visible on screen"
                    }
                  },
                  {
                    "text": "SectionList",
                    "correct_answer": {
                      "id": "a1505169395342",
                      "text": "renders on-screen items, but with headers"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1505169395342",
                    "text": "renders on-screen items, but with headers"
                  },
                  {
                    "id": "a1505169394616",
                    "text": "renders only items visible on screen"
                  },
                  {
                    "id": "a1505169386771",
                    "text": "renders all child components at once"
                  }
                ]
              }
            },
            {
              "id": 394220,
              "key": "6d09e001-e7ad-4989-92c4-bb3f3403444b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Forms\n\nForms in React Native are just like the forms in React that you already know: the state of input form elements is controlled by the React component that renders that form. That is, form values are held in local component state, making state the \"source of truth\" for that form.\n\nReact Native provides a few basic components to use in your application's forms. We'll take a look at each of these more closely in the following video:\n\n* `TextInput`\n* `KeyboardAvoidingView`\n* `Slider`\n* `Switch`\n",
              "instructor_notes": ""
            },
            {
              "id": 394221,
              "key": "4c01e932-a35c-4f0d-b860-a99e7ad43fb2",
              "title": "Form Components",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WxdnpxrWZkI",
                "china_cdn_id": "WxdnpxrWZkI.mp4"
              }
            },
            {
              "id": 415841,
              "key": "85d9c140-6691-43d4-bfec-0131809ff9fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️ Oops! (`onChange` vs. `onChangeText`) ⚠️\n\n> In the above video, `App` renders a `TextInput` component with an `onChange` prop. With the way that the event handler, `handleTextChange()`, is implemented, the prop should be `onChangeText`. \n\n> While both methods are invoked on value change, `onChangeText` passes the actual value (text) as the argument. On the other hand, `onChange` passes the entire event object as an argument. Both are perfectly valid props, but the logic of your event handler will need to be tailored to the prop chosen. For more info, check out [this post](https://stackoverflow.com/questions/44416541/react-native-difference-between-onchange-vs-onchangetext-of-textinput) on Stack Overflow.",
              "instructor_notes": ""
            },
            {
              "id": 394650,
              "key": "359119f1-d982-466f-8b48-6e1971e6503e",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "359119f1-d982-466f-8b48-6e1971e6503e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about `KeyboardAvoidingView`? Select all that apply:",
                "answers": [
                  {
                    "id": "a1505169696901",
                    "text": "Without `KeyboardAvoidingView`, the keyboard will \"pop up,\" hiding text inputs",
                    "is_correct": true
                  },
                  {
                    "id": "a1505169702991",
                    "text": "`KeyboardAvoidingView` can wrap around `TextInput` components",
                    "is_correct": true
                  },
                  {
                    "id": "a1505169703463",
                    "text": "`KeyboardAvoidingView` should always be contained within a `View` component",
                    "is_correct": false
                  },
                  {
                    "id": "a1505169703854",
                    "text": "Padding can be adjusted via a prop on `KeyboardAvoidingView`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 394224,
              "key": "503c9fcd-7474-47e1-b793-5fc0c31ec333",
              "title": "Image",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uxbqKJchzKQ",
                "china_cdn_id": "uxbqKJchzKQ.mp4"
              }
            },
            {
              "id": 394225,
              "key": "b8ee7752-095a-4f10-b887-ad62a8841098",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Other Components\n\nWe've just seen some of the most important components built into React Native. These components will get you started with the essential functionalities in the apps that you build -- but the list of available components goes on! Feel free to review the React Native documentation for a [complete list](https://facebook.github.io/react-native/docs/components-and-apis.html#components-and-apis). For starters, we recommend checking out:\n\n* [ActivityIndicator](https://facebook.github.io/react-native/docs/activityindicator.html)\n* [Picker](https://facebook.github.io/react-native/docs/picker.html)\n* [WebView](https://facebook.github.io/react-native/docs/webview.html)\n* [Modal](https://facebook.github.io/react-native/docs/modal.html)\n\nNote that certain components are also platform-specific! Though you want to build cross-platform components with _composition_, reusing as much code as possible, it may make sense for certain elements to be different depending on your audience (i.e., iOS vs. Android).\n",
              "instructor_notes": ""
            },
            {
              "id": 394226,
              "key": "8ad16573-43c7-46df-9548-079d3f609b3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nReact Native provides a variety of built-in components for developing mobile applications. While some support basic functionality in an application (e.g., text, images, lists), others offer more specialized functionality (e.g., pulling to refresh, displaying a loading indicator). Feel free to check out [Components and APIs](https://facebook.github.io/react-native/docs/components-and-apis.html) in the React Native documentation for an exhaustive list.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394141,
          "key": "860caf55-6839-4775-b0cb-f3bc201e4a2f",
          "title": "AsyncStorage",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "860caf55-6839-4775-b0cb-f3bc201e4a2f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394227,
              "key": "41e53ba0-fc06-430e-9e13-10d52a7aed69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Local Storage\n\nIn order to persist data in a web application, we'd normally store the data in some sort of database. This prevents app data from being lost between page refreshes. Using `localStorage`, we can achieve a similar effect for the user by storing this data _directly in their browser_. Best of all -- data stored in `localStorage` has no expiration date. This means that even if a session ends (e.g. the browser tab is closed), data will not be lost!\n\nFeel free to check out [Window.localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) on MDN for an overview.\n",
              "instructor_notes": ""
            },
            {
              "id": 394228,
              "key": "f8563f1f-3efe-4c3b-a8fc-0b1a040ccbce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Example: Saving to `localStorage`\n\nLet's say we're building a simple React and Redux application that lets users create and manage a list of tasks. Basic functionality allows users to add items to their task list, remove items, and mark items as completed. \n\nAssuming much of this data is kept in the application's store, how would we go about persisting this data? One way would be to save to `localStorage` each time that state is updated. That is, the store's state will be saved with each _dispatch_:\n\n```js\n// store.js\n\nimport { createStore } from 'redux';\nimport Reducer from '../reducers/reducer';\n\nconst configureStore = () => {\n  const store = createStore(Reducer);\n\n  store.subscribe(() => {\n    localStorage.state = JSON.stringify(store.getState());\n  });\n\n  return store;\n};\n\nexport default configureStore;\n```\n\nAfter the store is created, we call `store.subscribe()` and pass in a callback function. The callback effectively saves a JSON string of the store's state into `localStorage`. As a result, by subscribing to the store right after it is created, we can save data related to all of the user's tasks right into their browser!\n",
              "instructor_notes": ""
            },
            {
              "id": 394230,
              "key": "712e77e1-2c0c-4cc1-a2a5-854465ae18aa",
              "title": "Local Storage with React Native",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uO2dR3LPOs0",
                "china_cdn_id": "uO2dR3LPOs0.mp4"
              }
            },
            {
              "id": 394231,
              "key": "c040ddf0-5679-4d9d-93bf-48014543e595",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The React Native documentation on [AsyncStorage](https://facebook.github.io/react-native/docs/asyncstorage.html) mentions: \n\n> AsyncStorage is a simple, unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.\n\nIn the next video, we'll see just how we can implement it into our app!\n",
              "instructor_notes": ""
            },
            {
              "id": 394232,
              "key": "6ec14186-638d-4560-996a-ef5bca394ed2",
              "title": "API",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "243xzJEz7xo",
                "china_cdn_id": "243xzJEz7xo.mp4"
              }
            },
            {
              "id": 394702,
              "key": "5d7c600b-f590-4153-938c-bfe6aa98392d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/78a78135ab80b78e8585f428052e76573fc8996e)",
              "instructor_notes": ""
            },
            {
              "id": 395836,
              "key": "12f5664a-1879-409f-b6fa-4fe620ada5e0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "12f5664a-1879-409f-b6fa-4fe620ada5e0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created the `api.js` util file",
                "I have updated the `submit()` and `reset()` methods in `AddEntry`"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "How are things looking?"
            },
            {
              "id": 394233,
              "key": "1758d0ee-1ffd-4635-80d4-9b80b92a9492",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nReact Native's version of `localStorage` is `AsyncStorage`. Conveniently, since `AsyncStorage` is just an abstraction over iOS and Android equivalents, there's no need to consider the different environments.\n\nWe took a close look at these 3 methods available on `AsyncStorage`:\n* `setItem`\n* `mergeItem`\n* `getItem`\n\nFeel free to visit the [documentation](https://facebook.github.io/react-native/docs/asyncstorage.html#methods) for a complete list.\n\nIn the next section, we'll incorporate Redux to help manage application state!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394142,
          "key": "b14a1a3e-1b12-4e09-9e2a-4f1df831202e",
          "title": "Redux and React Native",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b14a1a3e-1b12-4e09-9e2a-4f1df831202e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394681,
              "key": "acedfd07-ac56-4ecb-952c-28635b6862d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Redux and React Native",
              "instructor_notes": ""
            },
            {
              "id": 394234,
              "key": "32be4a07-f4a6-4a7d-a92c-2cb7b80b1768",
              "title": "Redux in React Native",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "byZUqYfW4e8",
                "china_cdn_id": "byZUqYfW4e8.mp4"
              }
            },
            {
              "id": 394235,
              "key": "6e1f00d3-fbd1-4d62-a180-459404dfb561",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding Redux\n\nRecall that Redux is a _predictable state container_ for JavaScript applications. It is agnostic to any particular view library or framework, so not only can we use it with React, but we can integrate it into React Native applications, as well! \n\nWith its lean size and minimal dependencies, Redux is a great tool for React Native projects. And best of all: since React Native is still fundamentally _just JavaScript_, Redux can be added into projects the same way that we're used to. Let's check it out -- first, with building out **actions**!\n",
              "instructor_notes": ""
            },
            {
              "id": 394236,
              "key": "9f92f0f1-8bd0-4f8a-969b-febb8b2be7bd",
              "title": "Actions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6g5KPHce0pQ",
                "china_cdn_id": "6g5KPHce0pQ.mp4"
              }
            },
            {
              "id": 394237,
              "key": "9ccfb438-9b39-41b8-8abd-dd3f44729825",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/3aa5927c69939de2a7e36784548d703058cde5eb)",
              "instructor_notes": ""
            },
            {
              "id": 394238,
              "key": "dcbac42e-d9d6-4b7a-929e-b94748f62bf7",
              "title": "Reducers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AexQfrHWGd8",
                "china_cdn_id": "AexQfrHWGd8.mp4"
              }
            },
            {
              "id": 394239,
              "key": "4cf27d54-57e3-458d-9e2d-7c3d7b5ba1c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/1bcb8b1094f41b648d41acbfcfc1cbe0aff99e15)",
              "instructor_notes": ""
            },
            {
              "id": 394240,
              "key": "66dc4ff8-393a-4c76-9292-574dbf49f62f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 Forgot Redux?💡\n>\n> If you need a refresher on the principles of Redux, feel free to check out the previous course again, [React & Redux](https://classroom.udacity.com/nanodegrees/nd019/parts/7b1b9b53-cd0c-49c9-ae6d-7d03d020d672)! Since Redux is agnostic to any particular view library or framework, the same principles of Redux will apply to applications built with React Native as well.\n",
              "instructor_notes": ""
            },
            {
              "id": 394241,
              "key": "1eba4016-ec23-4f01-aa24-175e331574f3",
              "title": "CreateStore",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "caJ0yapbikQ",
                "china_cdn_id": "caJ0yapbikQ.mp4"
              }
            },
            {
              "id": 394242,
              "key": "5ccc4e67-b8cf-41cf-b384-b8bd08371f65",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/170f06a5b58a7539ae10d483c1407c4697361d34)",
              "instructor_notes": ""
            },
            {
              "id": 394243,
              "key": "9adf8862-7ffc-42a9-9a5c-a5e8094c9a38",
              "title": "Connect-AddEntry",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xLqJJJuyAE4",
                "china_cdn_id": "xLqJJJuyAE4.mp4"
              }
            },
            {
              "id": 394244,
              "key": "b5a2f2fd-34a2-4eac-869d-aede4eb820a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/a3e78fe08ac785e6ce372ed37bfb5bcfa19851e3)",
              "instructor_notes": ""
            },
            {
              "id": 395840,
              "key": "294e1b15-cc2c-4dd5-ab89-e1364e57e34c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "294e1b15-cc2c-4dd5-ab89-e1364e57e34c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created the necessary actions",
                "I have created reducers",
                "I have created the store",
                "I have wrapped my app with the `Provider`",
                "I have created the `getDailyReminderValue()` helper function",
                "I have updated the `reset()` method in `AddEntry`",
                "I have connected `AddEntry` to the store context with `connect()`"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "We've just incorporated redux to help manage our global state. Let's make sure we're on the same page!"
            },
            {
              "id": 394246,
              "key": "eb57a6e8-7f0f-4196-a412-4ec533788a9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nRemember that React Native is fundamentally still _just JavaScript_. As such, adding Redux to help manage application state will involve the very same principles and processes as adding Redux to a web application.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394143,
          "key": "8ce4c6cd-fdc8-4f0c-ac25-5a80c962f661",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8ce4c6cd-fdc8-4f0c-ac25-5a80c962f661",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394797,
              "key": "aec6ce87-68de-4091-9c5f-966163243440",
              "title": "React vs React Native Lesson Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8xr7HPxNCao",
                "china_cdn_id": "8xr7HPxNCao.mp4"
              }
            },
            {
              "id": 644338,
              "key": "0e74db39-efb8-43b2-843a-feb81eda1174",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Lesson Challenge\n\nAnswer the following questions and share your answers with your classmates:\n\n1) Explain how `AsyncStorage` works.\n\n2) Implement what you've learned about `AsyncStorage` to store/access items of your choosing. Implement the functionality of retrieving all of the items, retrieving a particular item by id, saving a new item.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}