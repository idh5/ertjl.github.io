{
  "data": {
    "lesson": {
      "id": 394099,
      "key": "0d761c28-fb21-432e-a822-f9495ec1b64b",
      "title": "Styling & Layout",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "You’ll take a close look at React Native’s Stylesheet API as well as its implementation of flexbox in order to be able to effectively style and layout your application.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/0d761c28-fb21-432e-a822-f9495ec1b64b/394099/1518463539744/Styling%20%26%20Layout%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/0d761c28-fb21-432e-a822-f9495ec1b64b/394099/1518463494445/Styling%20%26%20Layout%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 394144,
          "key": "3a052ceb-0182-46ad-84f8-f9b9f8e40752",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a052ceb-0182-46ad-84f8-f9b9f8e40752",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394247,
              "key": "bf05631e-0934-4515-b63a-05f355161017",
              "title": "Styling and Layout Lesson Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fbiJHE72iI4",
                "china_cdn_id": "fbiJHE72iI4.mp4"
              }
            }
          ]
        },
        {
          "id": 394145,
          "key": "902ff149-3220-492a-8dde-e858801d26df",
          "title": "CSS in JS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "902ff149-3220-492a-8dde-e858801d26df",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394248,
              "key": "b7c04a38-98e8-408d-a9d1-51f502d32df6",
              "title": "CSS In JS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xZ_vg2sP4bA",
                "china_cdn_id": "xZ_vg2sP4bA.mp4"
              }
            },
            {
              "id": 394249,
              "key": "7c2186a4-713e-4d9f-a173-3b0ce872efe5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## CSS in JS\n\nBefore we jump into how CSS in JavaScript works, let's check out an example of some \"normal\" HTML and CSS:\n\n```html\n<!-- index.css -->\n.avatar {\n  border-radius: 5px;\n  margin: 10px;\n  width: 48px;\n  height: 48px;\n}\n\n<!-- // index.html -->\n<div>\n  <img class='avatar' src='https://tylermcginnis.com/tylermcginnis_glasses-300.png' />\n</div>\n```\nNothing too surprising! But since we're not using HTML or CSS files to build mobile apps -- how would this look in React Native? \n\nFirst, it's important to know that all of the core components in React Native can accept a prop named `style`. One way we can leverage this prop is to provide styling to components with inline JavaScript objects:\n\n```js\nfunction Avatar ({ src }) {\n  return (\n    <View>\n      <Image\n        style={{borderRadius: 5, margin: 10, width: 48, height: 48}}\n        source={{uri: 'https://tylermcginnis.com/tylermcginnis_glasses-300.png'}}\n      />\n    </View>\n  );\n}\n```\n\nIn the example above, the `<Image>` component receives two props: `style` and `source`. The value of `style` is just a plain old JavaScript object with `borderRadius`, `margin`, `width`, and `height` properties. Keep in mind that unlike CSS on the web, properties are written in camelCase (i.e., `borderRadius` in CSS in JS, but `border-radius` on the web).\n\nThis works, but things can get muddy quickly. Imagine if the inline object contained a dozen properties, or if we wanted the same style to apply to more than just one component! One way to keep your code DRY and reusable is to store the object in a variable:\n\n```js\nconst styles = {\n  image: {\n    borderRadius: 5,\n    margin: 10,\n    width: 48,\n    height: 48\n  }\n};\n\nfunction Avatar ({ src }) {\n  return (\n    <View>\n      <Image\n        style={styles.image}\n        source={{uri: 'https://tylermcginnis.com/tylermcginnis_glasses-300.png'}}\n      />\n    </View>\n  );\n}\n```\n\nIt's a great way to clean things up a bit, but React Native goes a step further with its `StyleSheet` API. Check out the following example:\n\n```js\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class TextExample extends React.Component {\n  render() {\n    return (\n      <View>\n        <Text style={styles.greenLarge}>This is large green text!</Text>\n        <Text style={styles.red}>This is smaller red text!</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  greenLarge: {\n    color: 'green',\n    fontWeight: 'bold',\n    fontSize: 40\n  },\n  red: {\n    color: 'red',\n    padding: 30\n  },\n});\n```\n\nHere, an object containing styles is passed into `StyleSheet`'s `create` method. It looks similar to styling with a JavaScript object variable! However, using `StyleSheet` gives us a few benefits in terms of code quality and performance. We’ll take a closer look later in this Lesson as well, but this is how the React Native docs describe it:\n\n>Code quality\n>  * By moving styles away from the render function, you're making the code easier to understand.\n>  * Naming the styles is a good way to add meaning to the low-level components in the render function.\n>\n>Performance\n>  * Making a stylesheet from a style object makes it possible to refer to it by ID instead of creating a new style object every time.\n>  * It also allows to send the style only once through the bridge. All subsequent uses are going to refer to an id (not implemented yet).\n>\nAnother benefit is that `StyleSheet` validates the content within the style object as well. This means that should there be any errors in any properties or values in your style objects, the console will throw an error during compilation instead of at runtime.\n>\n> ## 💡 Additional Styling💡\n>\n> If you wanted to implement more than one style to a component, the `style` prop can accept styles as an array:\n>\n> ```js\n> <Text style={[styles.red, styles.greenLarge]}>This will be red, then greenLarge</Text>\n> ```\n>\n> The above `<Text>` component will render large green text, as the last style in the array will take precedence. This is a great way to inherit styles!\n",
              "instructor_notes": ""
            },
            {
              "id": 394250,
              "key": "c6a8aff8-e098-4886-9f82-63f11960cd28",
              "title": "Style Progression",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VpZC-LrZwW4",
                "china_cdn_id": "VpZC-LrZwW4.mp4"
              }
            },
            {
              "id": 394251,
              "key": "9b18c5a4-cb7c-42ca-bf9a-c782967578bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 Libraries for CSS in JS💡\n>\n> Styling in React is going through a renaissance period right now just as Flux did a few years ago (which eventually gave us Redux). There are many different styling libraries popping up and each has different tradeoffs. Two of the most popular are [Glamorous](https://github.com/robinpowered/glamorous-native) and [Styled Components](https://github.com/styled-components/styled-components). The whole idea behind both of these libraries is that styling is a primary concern of the component, and therefore styling should be coupled with the component itself. We'll take a look at using Styled Component with React Native a little bit later.",
              "instructor_notes": ""
            },
            {
              "id": 394628,
              "key": "2a88e2a1-af99-42c3-ad1d-a01942f9b6f6",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2a88e2a1-af99-42c3-ad1d-a01942f9b6f6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about styling in React Native?",
                "answers": [
                  {
                    "id": "a1505165516809",
                    "text": "All of the core components accept a `style` property.",
                    "is_correct": true
                  },
                  {
                    "id": "a1505165519261",
                    "text": "Styling React Native apps requires a special syntax to define styles that is unlike anything in traditional JavaScript",
                    "is_correct": false
                  },
                  {
                    "id": "a1505165519867",
                    "text": "Style names and values always match how they are used on the web (e.g., we need to use `background-color` in React Native)",
                    "is_correct": false
                  },
                  {
                    "id": "a1505165521196",
                    "text": "The `StyleSheet` API allows us to define multiple styles in a single place",
                    "is_correct": true
                  },
                  {
                    "id": "a1528315640344",
                    "text": "With React Native, applications are styled using JavaScript.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 394253,
              "key": "01faa736-3ebd-4976-a2ca-2900d30e3f50",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nCSS in JS is a distinct approach to styling. The main idea is that styling is handled by JavaScript objects rather than traditional CSS. Styles can be written inline or accessed via object variables, but React Native offers a `StyleSheet` API that provides a performant and compositional way to style components. \n\nNow that we've seen React Native handle _styling_, how do we manage the _layout_ of a mobile application? We'll take a look at CSS's **flexbox** in the next section to do just that!\n\n### Further Learning\n\n* [How can I use CSS-in-JS securely?](https://reactarmory.com/answers/how-can-i-use-css-in-js-securely)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394146,
          "key": "90f2cd35-dd1a-48a4-a764-cc6e9fec0122",
          "title": "Flexbox Guide",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "90f2cd35-dd1a-48a4-a764-cc6e9fec0122",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394254,
              "key": "eea5a536-5c4f-455f-a59c-3edcd963875f",
              "title": "Flexbox",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "TO20-Xp6R3c",
                "china_cdn_id": "TO20-Xp6R3c.mp4"
              }
            },
            {
              "id": 394945,
              "key": "10c2b88d-e9af-46ed-877a-bdffe8d282b1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Getting Started with Flexbox\n\nIf you aren't familiar with flexbox you're in good company, because I'm not either. That's a joke.\n\nWhenever I learn a new technology, I like to answer the question, “Why does this specific technology exist?” With flexbox, the answer to this question may just be that creating an all-purpose layout with CSS can be quite cumbersome. The whole goal of flexbox is to create a more efficient way to \"lay out, align, and distribute space among items in a container, even when their size is unknown and/or dynamic\". In a nutshell, flexbox is all about creating dynamic layouts.\n\nThe main idea of flexbox is that you give the parent element the ability to control the layout of all of their (_immediate_!) child elements rather than having each child element control its own layout. When you do this, the parent becomes a **flex container** while the child elements become **flex items**. An example of this is instead of having to float to the left all children of an element and add margin to each one, instead, you can just have the parent element specify to have all of its children be laid out in a row with even space between them. So, layout responsibilities move from the children to the parent. This allows for more fine tuned control over the layout of your app.\n",
              "instructor_notes": ""
            },
            {
              "id": 395081,
              "key": "658c91f0-0e28-42fb-95ef-94f50eaebac2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There's a lot of content in this section broken down into the following sections:\n\n* <a href=\"#flexbox-axes\">Flexbox Axes</a>\n* <a href=\"#flex-direction\">Flex Direction</a>\n* <a href=\"#justify-content\">Justify Content</a>\n  - <a href=\"#justify-content-flex-start\">Flex-Start</a>\n  - <a href=\"#justify-content-center\">Center</a>\n  - <a href=\"#justify-content-flex-end\">Flex-End</a>\n  - <a href=\"#justify-content-space-between\">Space-Between</a>\n  - <a href=\"#justify-content-space-around\">Space-Around</a>\n* <a href=\"#align-items-the-cross-axis-\">Align Items</a>\n  - <a href=\"#align-items-flex-start\">Flex-Start</a>\n  - <a href=\"#align-items-center\">Center</a>\n  - <a href=\"#align-items-flex-end\">Flex-End</a>\n  - <a href=\"#align-items-stretch\">Stretch</a>\n* <a href=\"#centering-content\">Centering Content</a>\n* <a href=\"#the-flex-property\">The Flex Property</a>\n* <a href=\"#aligning-individual-flex-items\">Aligning Individual Items</a>",
              "instructor_notes": ""
            },
            {
              "id": 395026,
              "key": "66fbfff8-db78-41c5-a456-39e6ca6f9c30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Flexbox Axes\n\nBy far, the most important concept to understand when it comes to flexbox is that flexbox is all about different [axes](https://www.quora.com/What-is-the-plural-of-axis). You'll have a **Main Axis** and a **Cross Axis**.",
              "instructor_notes": ""
            },
            {
              "id": 395027,
              "key": "b961d98f-222d-4236-a6bd-4863af4a5466",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b84519_nd019-c1-l3-flexbox-1/nd019-c1-l3-flexbox-1.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b961d98f-222d-4236-a6bd-4863af4a5466",
              "caption": "_Flexbox Axes: Main Axis and Cross Axis_",
              "alt": "Diagram of a phone in portrait mode, with the long axis labeled \"Main Axis\" and the short axis \"Cross Axis\".",
              "width": 600,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 395028,
              "key": "99ccfc11-b525-4fc6-b479-89d4870fe812",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In React Native, by default, the **Main Axis** is vertical while the **Cross Axis** is horizontal. Everything from here on out is built upon this concept of a **Main Axis** and **Cross Axis**. \n\nWhen I say \"…which will align all the child elements along the Main Axis\" that means that, by default, all the children of the parent element will be laid out vertically from top to bottom. If I say \"…which will align the child elements along the Cross Axis\" that means that, by default, all the children elements will be laid out horizontally from left to right. \n\nThe rest of flexbox is just deciding how you want to align, position, stretch, spread, shrink, center, wrap child elements along the Main and Cross axis.",
              "instructor_notes": ""
            },
            {
              "id": 395029,
              "key": "339cf3aa-6a7c-4b01-8845-7fe5d573a27a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Flex Direction\n\nYou'll notice that I was very deliberate in mentioning the \"default behavior\" when it comes to the **Main Axis** and **Cross Axis**. That's because you can actually change which Axis is Main and which is Cross. That brings us to our first flexbox property, `flex-direction` (or `flexDirection` in React Native).\n\n`flex-direction` has two values:\n\n* `row`\n* `column`\n\nBy default, every element in React Native has the `flexDirection: column` declaration. When an element has a `flex-direction` of `column`, its _Main_ Axis is vertical and its _Cross_ Axis is horizontal, just as we saw in the image above. However, if you give an element a `flexDirection: row` declaration, the axes switch. The Main axis becomes horizontal, while the Cross axis becomes vertical. Again, this is crucial because your entire layout is dependent on these two axes.\n",
              "instructor_notes": ""
            },
            {
              "id": 395030,
              "key": "59d972ae-e10a-4933-bb29-1299f8879c05",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b8454e_nd019-c1-l3-flexbox-2/nd019-c1-l3-flexbox-2.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/59d972ae-e10a-4933-bb29-1299f8879c05",
              "caption": "_`flex-direction` changes which axis is the **Main** Axis._",
              "alt": "Under \"flex-direction: row\", the main axis is now the horizontal axis, and the cross axis is the vertical axis.",
              "width": 451,
              "height": 500,
              "instructor_notes": null
            },
            {
              "id": 395031,
              "key": "4b8a13e6-2feb-4c13-bd74-126c8e686a72",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Justify Content\n\nNow is when things start getting fun. Let's dive into the different properties and values we can use to align child elements along these axes.\nLet's focus entirely on the _Main_ Axis, first. \n\nIn order to specify how children align themselves along the Main Axis, you'll use the `justifyContent` property. `justifyContent` has five different values you can use in order to change how the children align themselves along the Main Axis.\n\n* `flex-start`\n* `center`\n* `flex-end`\n* `space-around`\n* `space-between`\n\nWoah. I just dropped lots of unfamiliar terms. I'll walk through each and every one of them though, so we're good 💃🏽.\n\nIf you want to follow along (which I _highly_ recommend you do), create a new React Native project called \"FlexboxExamples\" and swap out your `App.js` code with the following:\n\n```js\nimport React, { Component } from 'react'\nimport { StyleSheet, Text, View, AppRegistry } from 'react-native'\n\nclass FlexboxExamples extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.box}/>\n        <View style={styles.box}/>\n        <View style={styles.box}/>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  box: {\n    height: 50,\n    width: 50,\n    backgroundColor: '#e76e63',\n    margin: 10,\n  }\n})\n\nexport default FlexboxExamples;\n```\n\nNote that with the code above, the only thing we'll be changing is the styling in the `container` object in the `styles` StyleSheet object. Ignore `flex: 1` for now.",
              "instructor_notes": ""
            },
            {
              "id": 395032,
              "key": "abbf1d63-15ea-4cf8-801a-ba607f875060",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Justify Content:  Flex-Start",
              "instructor_notes": ""
            },
            {
              "id": 395034,
              "key": "902df478-aef6-4d0d-a9a2-2db1ae9eac6b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b84595_nd019-c1-l3-flexbox-3/nd019-c1-l3-flexbox-3.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/902df478-aef6-4d0d-a9a2-2db1ae9eac6b",
              "caption": "_`justifyContent: flex-start` makes flex items appear at the beginning of the **Main Axis**._",
              "alt": "Under \"justifyContent: flex-start\", flex items appear at the beginning of the main axis.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395035,
              "key": "e333048f-a45e-42d2-a93b-1592ac4a164b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`justifyContent: 'flex-start'` will align every child element towards the start of the the Main Axis.\n\n```js\ncontainer: {\n  flex: 1,\n  justifyContent: 'flex-start',\n}\n```\n\nIf you were still struggling with the importance of Main Axis and Cross Axis hopefully it just clicked. Because `flexDirection` defaults to `column`, and we're using `justifyContent` which targets the Main Axis, our child elements are going to align themselves towards the _start_ of the Main Axis which is the top left and work their way down.",
              "instructor_notes": ""
            },
            {
              "id": 395036,
              "key": "f616eaed-73cb-466e-9877-c64ae3e28553",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Justify Content: Center",
              "instructor_notes": ""
            },
            {
              "id": 395037,
              "key": "0002cc98-f510-4ea0-8507-5f92160f9e76",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b845cb_nd019-c1-l3-flexbox-4/nd019-c1-l3-flexbox-4.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0002cc98-f510-4ea0-8507-5f92160f9e76",
              "caption": "_`justifyContent: center` makes flex items appear in the center of the **Main Axis**._",
              "alt": "Under \"justifyContent: center\", flex items appear in the center of the main axis.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395039,
              "key": "0b36523c-c099-4f17-85df-573deb40d8fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`justifyContent: 'center'` will align every child element towards the center of the the Main Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  justifyContent: 'center',\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 395040,
              "key": "9969ecbd-c671-4bb9-a219-95dc803bb03d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Justify Content: Flex-End",
              "instructor_notes": ""
            },
            {
              "id": 395041,
              "key": "b6bb4b3b-e7e1-453a-8fcc-8bc4d1325d07",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b845f0_nd019-c1-l3-flexbox-5/nd019-c1-l3-flexbox-5.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b6bb4b3b-e7e1-453a-8fcc-8bc4d1325d07",
              "caption": "_`justifyContent: flex-end` makes flex items appear at the end of the **Main Axis**._",
              "alt": "Under \"justifyContent: flex-end\", flex items appear at the end of the main axis.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395043,
              "key": "56407916-feb6-4ed8-9b64-774e5b8d818a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`justifyContent: 'flex-end'` will align every child element towards the end of the the Main Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  justifyContent: 'flex-end',\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 395044,
              "key": "43ac74d9-d919-45eb-8aca-d15f1594374d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Justify Content: Space-Between",
              "instructor_notes": ""
            },
            {
              "id": 395045,
              "key": "fd74797b-620f-4716-9506-7db097fe1fbf",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b84617_nd019-c1-l3-flexbox-6/nd019-c1-l3-flexbox-6.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fd74797b-620f-4716-9506-7db097fe1fbf",
              "caption": "_`justifyContent: space-between` flex items appear at both ends of the **Main Axis** with space between the items._",
              "alt": "Under \"justifyContent: space-between\", flex items appear at both ends of the main axis, with space between the items.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395046,
              "key": "6d1d8838-aa7c-473c-a4f9-562822128408",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`justifyContent: 'space-between'` will align every child so that the space between each child is even along the Main Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  justifyContent: 'space-between',\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 395048,
              "key": "0567f6ae-fb1e-4245-9ca4-63dff1e6c6eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Justify Content: Space-Around",
              "instructor_notes": ""
            },
            {
              "id": 395049,
              "key": "2b847499-2177-4e8a-a7c0-816b9bf9512c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b8463e_nd019-c1-l3-flexbox-7/nd019-c1-l3-flexbox-7.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2b847499-2177-4e8a-a7c0-816b9bf9512c",
              "caption": "_`justifyContent: space-around` flex items are spaced equidistant along the **Main Axis**._",
              "alt": "Under \"justifyContent: space-around\", flex items are spaced equidistantly along the main axis.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395050,
              "key": "7e428024-71fd-4c93-8889-368cd056656b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`justifyContent: 'space-around'` will align every child element so that there is even space around each element along the Main Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  justifyContent: 'space-around',\n}\n```\n\nNow I want you to think about what would happen if we changed the `flexDirection` of our container to `row` instead of the default value `column`? Instead of our Main Axis being vertical, it's going to be horizontal. That means any child elements are going to align themselves _horizontally_ rather than _vertically_.\n\n```js\ncontainer: {\n  flex: 1,\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 395051,
              "key": "42b3fca2-a9d9-4736-909b-9d47e0e099b1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b8466a_nd019-c1-l3-flexbox-8/nd019-c1-l3-flexbox-8.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/42b3fca2-a9d9-4736-909b-9d47e0e099b1",
              "caption": "_`justifyContent: space-around` with `flex-direction: row` changes the **Main Axis** to be horizontally with space around the flex items._",
              "alt": "`justifyContent: space-around` with `flex-direction: row` changes the **Main Axis** to be horizontally with space around the flex items.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395052,
              "key": "fbd184c7-ffc2-4c6a-a661-8afac2e78bae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice that all we changed was the value for `flexDirection`, and it drastically altered our layout. Now you're starting to see the real power of flexbox.",
              "instructor_notes": ""
            },
            {
              "id": 395053,
              "key": "bfc50eec-4466-4aea-be14-e325f565cc23",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Align Items (The Cross Axis)\n\nNow let's turn our focus entirely to the Cross Axis. In order to specify how children align themselves along the Cross Axis, you'd use the `align-items` property.\n\nYou would think that `alignItems` has the exact same values as `justifyContent`. It's a reasonable guess, but you'd be wrong. This property has four different values you can use in order to change how the children align themselves among the Cross Axis.\n\n* `flex-start`\n* `center`\n* `flex-end`\n* `stretch`\n\n#### Align Items - Flex-Start\n",
              "instructor_notes": ""
            },
            {
              "id": 395054,
              "key": "7492bbb8-449f-4628-bbbb-c2b2b25a1ad4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b84696_nd019-c1-l3-flexbox-9/nd019-c1-l3-flexbox-9.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7492bbb8-449f-4628-bbbb-c2b2b25a1ad4",
              "caption": "_`alignItems: flex-start` causes flex items to appear at the beginning of the **Cross Axis**._",
              "alt": "_`alignItems: flex-start` causes flex items to appear at the beginning of the **Cross Axis**._",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395055,
              "key": "752deb5a-8305-44ea-930f-1c5d15696b1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`alignItems: 'flex-start'` will align every child element towards the start of the the Cross Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  alignItems: 'flex-start',\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 395056,
              "key": "d8cbdf01-a0ad-4b69-bb30-f89fa28311b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Align Items: Center",
              "instructor_notes": ""
            },
            {
              "id": 395058,
              "key": "2cf149b9-07ee-4822-b144-6e7c6c9782d5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b846c3_nd019-c1-l3-flexbox-10/nd019-c1-l3-flexbox-10.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2cf149b9-07ee-4822-b144-6e7c6c9782d5",
              "caption": "_`alignItems: center` causes flex items to appear in the middle of the **Cross Axis**._",
              "alt": "_`alignItems: center` causes flex items to appear in the middle of the **Cross Axis**._",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395059,
              "key": "5f082790-db22-44ac-bc97-1243fe2fb6c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`alignItems: 'center'` will align every child element towards the center of the Cross Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  alignItems: 'center',\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 395060,
              "key": "84a13c1c-a3c0-44e6-a684-6ba7feef3579",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Align Items: Flex-End",
              "instructor_notes": ""
            },
            {
              "id": 395061,
              "key": "4016d242-1d64-4c66-a09e-d4c0abd93e66",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b846fe_nd019-c1-l3-flexbox-11/nd019-c1-l3-flexbox-11.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4016d242-1d64-4c66-a09e-d4c0abd93e66",
              "caption": "_`alignItems: flex-end` causes flex items to appear at the end of the **Cross Axis**._",
              "alt": "_`alignItems: flex-end` causes flex items to appear at the end of the **Cross Axis**._",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395062,
              "key": "3ca74895-9180-44d5-837f-d7b5f690fde0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`alignItems: 'flex-end'` will align every child element towards the end of the the Cross Axis.\n​\n```js\ncontainer: {\n  flex: 1,\n  alignItems: 'flex-end',\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 395063,
              "key": "b65af3a5-3379-4a4a-862c-9d1045d03c60",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Align Items: Stretch",
              "instructor_notes": ""
            },
            {
              "id": 395065,
              "key": "52445026-884d-46c2-a70d-6035b351e4c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b8473d_nd019-c1-l3-flexbox-12/nd019-c1-l3-flexbox-12.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/52445026-884d-46c2-a70d-6035b351e4c2",
              "caption": "_`alignItems: stretch` causes flex items to take up the full width of the **Cross Axis**._",
              "alt": "_`alignItems: stretch` causes flex items to take up the full width of the **Cross Axis**._",
              "width": 451,
              "height": 423,
              "instructor_notes": null
            },
            {
              "id": 395066,
              "key": "b961084d-8a3a-4501-b559-ee9f4568a3e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`alignItems: 'stretch'` will stretch every child element along the Cross Axis as long as the child element does not have a specified height (`flexDirection: row`) or width (`flexDirection: column`).\n​\n```js\ncontainer: {\n  flex: 1,\n  alignItems: 'stretch',\n},\nbox: {\n  height: 50,\n  backgroundColor: '#e76e63',\n  margin: 10,\n}\n```\n\nJust when you thought you were getting the hang of it, flexbox throws a wrench in your brain. Whenever you set `alignItems` to `stretch`, each child element is going to stretch the full width or height of the parent container **as long as that child element doesn't have a width or a height**. Notice in the box styling, I removed the `width: 50` because `flexDirection` is set to `column` by default meaning that flex items will be stretching horizontally (since we're using `alignItems`).\n\nTo cement this home, what will our UI look like if I change our styling to this?\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'stretch',\n    flexDirection: 'row',\n  },\n  box: {\n    width: 50,\n    backgroundColor: '#e76e63',\n    margin: 10,\n  }\n})\n```\n\nNotice I've changed the `flexDirection` to `row`, and I've added back in `width: 50` and removed the `height: 50`.\n",
              "instructor_notes": ""
            },
            {
              "id": 395068,
              "key": "b544fe36-e793-4cc4-ad29-ddd29a56a2bb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b84763_nd019-c1-l3-flexbox-13/nd019-c1-l3-flexbox-13.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b544fe36-e793-4cc4-ad29-ddd29a56a2bb",
              "caption": "_`flex-direction: row` and `alignItems: stretch` causes flex items to stretch vertically along the **Cross Axis**._",
              "alt": "_`flex-direction: row` and `alignItems: stretch` causes flex items to stretch vertically along the **Cross Axis**._",
              "width": 400,
              "height": 717,
              "instructor_notes": null
            },
            {
              "id": 395069,
              "key": "a82c9815-2e35-4a22-8207-16107ae51615",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's break this down. First, the Main Axis is now running horizontally since we added `flexDirection: row`. This means that `alignItems` will be aligning the items along the _vertical_ axis. Because we've removed the height of the child elements and added `alignItems: stretch`, those elements are going to stretch along the vertical axis for the entire length of their parent component, which in this case is the whole view.\n\nUp until this point, we've only had one flex container or parent element. Don't get it twisted though; if you create more nested flex containers, the exact same logic above is going to be true for those child elements (flex items) but instead of being relative to the whole view (as in our example), they'll position themselves according to the their parent component. Your entire UI will be built upon nesting flex containers.\n\nAt this point, you're essentially a red belt in React Native styling TaeKwonDo. There are a few other flexbox features we need to look at, though.\n\nYou'll very quickly come to a realization that there are no percent-based styling in React Native. Though I agree it makes things a bit more difficult, everything you can do with percent-based styling you can do with flexbox. Remember the `flex: 1` declaration we used in all the examples above? That's the property that's going to allow us to do it. Interestingly enough there's no exact comparison for this feature in flexbox on the web, but it is similar to `flex-grow` if you know what that does.\n\nAs we've seen over and over, flexbox is concerned with giving control to the parent element to handle the layout of its children elements. The `flex` property is a bit different as it allows child elements to specify their height or width in comparison to their sibling elements. The best way to explain flex is to look at some examples.\n",
              "instructor_notes": ""
            },
            {
              "id": 395070,
              "key": "8dae7813-3cdf-4163-95f3-0a8238a409b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Centering Content\n\nLet's start off with a view like this:\n",
              "instructor_notes": ""
            },
            {
              "id": 395071,
              "key": "c533d902-b8ca-4927-a97f-120020245cf3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b847b5_nd019-c1-l3-flexbox-14/nd019-c1-l3-flexbox-14.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c533d902-b8ca-4927-a97f-120020245cf3",
              "caption": "_Centering content along both the **Main Axis** and the **Cross Axis**._",
              "alt": "Centering content along both the **Main Axis** and the **Cross Axis**.",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395072,
              "key": "dbfa43e8-3964-477f-a71c-0eae00846a0d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "How would you implement that? Notice that our Main Axis is horizontal; this gives us a clue that we're using `flexDirection: row`. The boxes are in the center of both axes which means we're using `justifyContent: 'center'` and `alignItems: 'center'`.\n\n```js\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  box: {\n    width: 50,\n    height: 50,\n    backgroundColor: '#e76e63',\n    margin: 10,\n  }\n})\n```",
              "instructor_notes": ""
            },
            {
              "id": 395073,
              "key": "4c17bed1-6e5d-43a6-807b-ea9196ce61a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### The Flex Property\n\nBut now, what if we wanted to change our UI to look like this:\n",
              "instructor_notes": ""
            },
            {
              "id": 395074,
              "key": "9a1cfb5d-fbd0-4280-bb8f-8a7204b452e1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b847ee_nd019-c1-l3-flexbox-15/nd019-c1-l3-flexbox-15.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9a1cfb5d-fbd0-4280-bb8f-8a7204b452e1",
              "caption": "_Using the `flex` property to change the rate at which a flex items increases its size comparable to other flex items._",
              "alt": "_Using the `flex` property to change the rate at which a flex items increases its size comparable to other flex items._",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395075,
              "key": "765f8159-0827-4c18-aba6-ef54af2542cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the above image, it's exactly the same layout -- but now the middle section is twice as wide as its siblings! This is what the `flex` property allows us to do. Here’s the code:\n\n```js\nclass FlexboxExamples extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={[styles.box, {flex: 1}]}/>\n        <View style={[styles.box, {flex: 2}]}/>\n        <View style={[styles.box, {flex: 1}]}/>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  box: {\n    width: 50,\n    height: 50,\n    backgroundColor: '#e76e63',\n    margin: 10,\n  }\n})\n\nexport default FlexboxExamples;\n```\n\nNotice I didn't add any styles; I just made the middle sibling have `flex: 2` while the other siblings have `flex: 1`. This basically says \"make sure that the middle sibling is twice as large along the Main Axis as the first and third children\". This is the reason why `flex` can replace percentages because usually a percent-based layout is just one where specific elements are relative to other elements, exactly like we're doing above. It's also important to note that if you place `flex: 1` on an element, that element is going to take up as much space as its parent takes up. That's why in most of our examples above because we want our \"layout area\" to be the size of the parent, which in our examples was the whole viewport.\n\nLet's go even deeper!",
              "instructor_notes": ""
            },
            {
              "id": 395076,
              "key": "aebaa873-49d9-4b44-9027-ee6961cfa811",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Aligning Individual Flex Items\n\nWhat if we wanted a layout like this?",
              "instructor_notes": ""
            },
            {
              "id": 395078,
              "key": "02b79d35-882f-485a-9d7e-24dfec814c0f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b8481d_nd019-c1-l3-flexbox-16/nd019-c1-l3-flexbox-16.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/02b79d35-882f-485a-9d7e-24dfec814c0f",
              "caption": "_`alignSelf: flex-end` changes the flex item it targets to appear at the end of the **Cross Axis**._",
              "alt": "_`alignSelf: flex-end` changes the flex item it targets to appear at the end of the **Cross Axis**._",
              "width": 451,
              "height": 451,
              "instructor_notes": null
            },
            {
              "id": 395079,
              "key": "bd3c82e1-99c3-4233-8a1a-c6629685e939",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It's as if the first and third element are centered both vertically and horizontally, but that second element has a mind of its own and is using `flex-end` along the Cross Axis. To implement this, we'll need a way to have the child element override a specific positioning it received from its parent. Good news: that's exactly what `alignSelf` allows us to do! Notice it begins with _align_, so just like `alignItems`, it's going to position itself along the Cross Axis. It also has the exact same options as `alignItems` (`flex-start`, `flex-end`, `center`, `stretch`).\n\nThe code to implement the image above is:\n\n```js\nclass FlexboxExamples extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.box}/>\n        <View style={[styles.box, {alignSelf: 'flex-end'}]}/>\n        <View style={styles.box}/>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  box: {\n    width: 50,\n    height: 50,\n    backgroundColor: '#e76e63',\n    margin: 10,\n  }\n})\n\nexport default FlexboxExamples;\n```\n\nNote that all we've done is add `alignSelf: flex-end` to the second child element and that overrode what it was instructed to do by the parent (`alignItems: 'center'`).\n\nIf you've made it all the way through this, great work! I realize that was a lot to cover but I hope it's helped you get up and running with styling (and specifically flexbox) on React Native.\n",
              "instructor_notes": ""
            },
            {
              "id": 394638,
              "key": "a2873af0-cec1-4475-bfc2-9a89e24edd6f",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a2873af0-cec1-4475-bfc2-9a89e24edd6f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Consider the following CSS:\n\n```css\n.container {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: flex-start;\n  /* etc. */\n}\n```\n\nHow should we expect items nested in this parent container to render? Please check all that apply.",
                "answers": [
                  {
                    "id": "a1505167931765",
                    "text": "Items are not actually in a flex container",
                    "is_correct": false
                  },
                  {
                    "id": "a1505167945771",
                    "text": "Items are placed left-to-right",
                    "is_correct": true
                  },
                  {
                    "id": "a1505167946375",
                    "text": "Items are packed on the right side of the container",
                    "is_correct": true
                  },
                  {
                    "id": "a1505167946881",
                    "text": "Items are placed top-to-bottom",
                    "is_correct": false
                  },
                  {
                    "id": "a1505167948049",
                    "text": "Items are packed at the top of the container",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 394257,
              "key": "26a21574-2c1b-4b28-8a9d-1638c44365db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nReact Native leverages a version of **flexbox** to build component layout. This is primarily due to flexbox's ability to provide consistent layouts across different screen sizes. \n\nFlexbox containers comprise of two axes: a **main axis**, as well as a **cross axis**. Some of the more critical properties to consider when building layouts with flexbox include `flex-direction`, `justify-content`, and `align-items`. React Native's implementation of flexbox _is_ a bit different, however. We'll see just how in the very next section!\n\n**Further Research**\n\n* [A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n* [Flexbox Froggy](http://flexboxfroggy.com/)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394147,
          "key": "7e4227ed-4b7b-45bb-8cb3-bb8fe44a65ed",
          "title": "Layout In React Native",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e4227ed-4b7b-45bb-8cb3-bb8fe44a65ed",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394258,
              "key": "b0a602f4-145c-4a3f-a742-37002bad1b9f",
              "title": "Flexbox Implementation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Yl69abRLGbY",
                "china_cdn_id": "Yl69abRLGbY.mp4"
              }
            },
            {
              "id": 394259,
              "key": "a6e55d9e-e397-481a-a98a-733941915f63",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## React Native's Flexbox Implementation\n\nReact Native implements flexbox for build layouts, but there are some key differences to keep in mind as you develop your applications. First, all containers in React Native are _flex containers_ by default. Recall that in traditional CSS flexbox, you would normally define a flex container like so:\n\n```css\n/*example.css*/\n\n.container {\n  display: flex;\n}\n```\n\nHowever, this is completely _unnecessary_ in React Native! By default, everything is `display: flex;`. You can just use the defaults as they are, without adding different properties or writing extra code.\n\nAnother important distinction is how React Native handles `flex-direction`, a property that establishes the main axis (i.e., defining the direction in which flex items are placed). In web applications, items default to `row`. But since we're working on mobile devices, React Native sets the default to `column`, which lays out items _vertically_.\n\nOne more major difference you'll encounter is how the `flex` property is used. On the web, `flex` specifies how a flex item grows or shrinks to manage the space around it (along the main axis). In React Native, `flex` is generally used with flex items that are on the same level, but hold different `flex` values. For example:\n\n```js\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst FlexDemo = props => (\n  <View style={{flex: 1}}>\n    <View style={{flex: 1, backgroundColor: 'red'}} />\n    <View style={{flex: 2, backgroundColor: 'green'}} />\n    <View style={{flex: 3, backgroundColor: 'blue'}} />\n  </View>\n);\n\nexport default FlexDemo;\n```\n\nHere, `FlexDemo` is a stateless functional component which renders `<View>` components with different `flex` values. Its outermost container is set to `flex: 1`, which will expand the full available width along the main axis (i.e., the entire screen in this example). Its children `<View>` components will fill the space accordingly, rendering a `blue` background color that takes up three times as much space as `red` takes, and `green` that takes up exactly twice as much space as `red` takes.",
              "instructor_notes": ""
            },
            {
              "id": 394260,
              "key": "c0761d28-f453-4736-bdb3-4ecae08d4643",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Other Differences\n\nIn addition to the above, here is a list of defaults in other common CSS properties that React Native applies to components:\n\n```css\nbox-sizing: border-box;\nposition: relative;\nalign-items: stretch;\nflex-shrink: 0;\nalign-content: flex-start;\nborder: 0 solid black;\nmargin: 0;\npadding: 0;\nmin-width: 0;\n```",
              "instructor_notes": ""
            },
            {
              "id": 394640,
              "key": "405706da-c084-4372-a1ff-8f6bf2b937f1",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "405706da-c084-4372-a1ff-8f6bf2b937f1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How does React Native's implementation of CSS flexbox differ from that on the web? Select all that apply:",
                "answers": [
                  {
                    "id": "a1505168220412",
                    "text": "Containers are flex containers by default in React Native (i.e., setting `display: flex` is not necessary).",
                    "is_correct": true
                  },
                  {
                    "id": "a1505168227644",
                    "text": "In React Native, CSS properties are written in camelCase.",
                    "is_correct": true
                  },
                  {
                    "id": "a1505168228208",
                    "text": "The defaults for `flex-direction` are the same in both React Native and on the web.",
                    "is_correct": false
                  },
                  {
                    "id": "a1505168228905",
                    "text": "Dimensions in React Native are unitless.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 394262,
              "key": "6c06e4c1-0d82-44b2-8383-6914f56e1c94",
              "title": "Style-Metainfo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6ZgAFY6Lakg",
                "china_cdn_id": "6ZgAFY6Lakg.mp4"
              }
            },
            {
              "id": 394741,
              "key": "56ae6c3c-7843-48d9-bb57-cdcf4bc3d741",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/4b145ff1126a60b026aaffc72970f46c5e8692d2)",
              "instructor_notes": ""
            },
            {
              "id": 394263,
              "key": "3369721d-9b63-4703-ace7-168b412b78fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Platform API\n\nRecall that React's approach to app development is \"learn once, write anywhere.\" The goal is to use the same principles, technologies, and in the case of React Native -- the same _code_ -- to develop applications. However, there may be cases that make sense to use _distinct_ code for each mobile platform. For example, what if we wanted unique styling between iOS and Android visual components? \n\nReact Native gives us a convenient way to organize and separate code through the `Platform` API. Let's check out an example!",
              "instructor_notes": ""
            },
            {
              "id": 394264,
              "key": "fad675e5-fd9f-4b2e-81cc-d74f25c9b715",
              "title": "Platform-Specific Styling",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KtATaKs7qjQ",
                "china_cdn_id": "KtATaKs7qjQ.mp4"
              }
            },
            {
              "id": 394265,
              "key": "255ea610-fdc7-4fa2-938f-79f24f799d8b",
              "title": "Style-AddEntry",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vBIDOsEkUK8",
                "china_cdn_id": "vBIDOsEkUK8.mp4"
              }
            },
            {
              "id": 394744,
              "key": "6b5e40fd-5317-4e50-b714-53098f7f53bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/c5c645478a1f631f7851463b80e216289b17b4d4)",
              "instructor_notes": ""
            },
            {
              "id": 394266,
              "key": "82107285-f0d3-4017-85e5-2560d62ece72",
              "title": "Style-UdaciSteppers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pW-iEnKf7Og",
                "china_cdn_id": "pW-iEnKf7Og.mp4"
              }
            },
            {
              "id": 394746,
              "key": "3134d234-ebb2-4f6c-962e-64bd870fd676",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/2c0d0b9ef0b36f53d793ae1452d2d20857bd9d96)",
              "instructor_notes": ""
            },
            {
              "id": 394267,
              "key": "408612dd-17bd-4048-b6a7-eea2dcf40aac",
              "title": "Style-Rest",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nm8mq8__U8Q",
                "china_cdn_id": "nm8mq8__U8Q.mp4"
              }
            },
            {
              "id": 394757,
              "key": "56e128e1-0c0e-4e26-ad86-b27a95315fba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/93add38d61a4891ae40f8c295fda079f7c1cc5d6)",
              "instructor_notes": ""
            },
            {
              "id": 395864,
              "key": "d131d84d-8fa1-462a-bef4-5f8f2a65fe23",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d131d84d-8fa1-462a-bef4-5f8f2a65fe23",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have added the `style` prop to the parent `View` in `app.js`",
                "I have created `styles` in `helper.js`",
                "I have updated `View` components in `helper.js` with proper container styling",
                "I have styled `AddEntry` (including platform-specific styling)",
                "I have styled `UdaciSteppers` (including platform-specific styling)",
                "I have styled `Dateheader`",
                "I have styled `UdaciSlider`",
                "I have styled `TextButton`"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "That was a lot of styling! Let's recap what we've done up to this point."
            },
            {
              "id": 394268,
              "key": "6f380b40-7366-413b-b863-31e04d55ab23",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 `Dimensions` API💡\n>\n> React Native also comes with [Dimensions](https://facebook.github.io/react-native/docs/dimensions.html), which allows you to select window's width and height in the user's device!\n>\n> First, make sure you pull the API from React Native:\n>\n> ```js\n> import { Dimensions } from 'react-native';\n> ```\n>\n> Then, you can simply grab the window sizes with the Dimensions API's `get` method:\n>\n> ```js\n> const { width, height } = Dimensions.get('window');\n> ```\n>\n> Feel free to use these measurements to, for example, plan how your `<View>`s will look.",
              "instructor_notes": ""
            },
            {
              "id": 394270,
              "key": "adef94e2-0143-4798-b394-d9d6e5bef37d",
              "title": "History",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4edBztoh2rk",
                "china_cdn_id": "4edBztoh2rk.mp4"
              }
            },
            {
              "id": 394758,
              "key": "dca14244-3212-4178-b1fc-6e49d286f7dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/f2f0342661d87060376bf54c425793b4c3b239c9)",
              "instructor_notes": ""
            },
            {
              "id": 394271,
              "key": "4352ea1f-30bd-4d80-a7c1-13c73f032821",
              "title": "History-Calendar",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6qWrHcBJF3c",
                "china_cdn_id": "6qWrHcBJF3c.mp4"
              }
            },
            {
              "id": 633774,
              "key": "1cc51a9b-db3a-471a-891f-07866a28f45f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "💡 UdaciFitness Calendar Update💡\n\nTo install the UdaciFitness Calendar, follow the steps below.\n\n1. Run `npm uninstall udacifitness-calendar` to uninstall the calendar package from the video above\n\n2. Run `npm install ftrevo/react-native-calendars#master --save`\n\nPLEASE NOTE: you must uninstall the udacifitness-calendar package in order for the react-native-calendars package to work.\n",
              "instructor_notes": ""
            },
            {
              "id": 394760,
              "key": "92c4e90d-040e-4aad-afd1-545a7fa8056f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/57d249307036bc97c8b539fc3b5fcc38455a3419)",
              "instructor_notes": ""
            },
            {
              "id": 394272,
              "key": "ab9589d6-8bc3-408a-96f9-8372f70fc10d",
              "title": "History-Methods",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "t53XoUg4Dr4",
                "china_cdn_id": "t53XoUg4Dr4.mp4"
              }
            },
            {
              "id": 394764,
              "key": "57c9d028-09cf-448a-bd86-864b1aa02c17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/556a167f9f773c128c6d982c27130fe7b0b27d82)",
              "instructor_notes": ""
            },
            {
              "id": 394273,
              "key": "cb58b877-b99d-41c0-84a8-1374ad728a33",
              "title": "History-MetricCard",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "z8IKGR5pmGM",
                "china_cdn_id": "z8IKGR5pmGM.mp4"
              }
            },
            {
              "id": 394766,
              "key": "54a74bfc-a2d6-4584-9879-a3402d20e429",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/cdcef7571fecac412cdb1995538114b0f36a91c7)",
              "instructor_notes": ""
            },
            {
              "id": 394274,
              "key": "da5afc86-babe-4681-a1e6-433d9f3190e2",
              "title": "History-AppLoading",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0MY2yNuMiBg",
                "china_cdn_id": "0MY2yNuMiBg.mp4"
              }
            },
            {
              "id": 394767,
              "key": "9b3b8522-1d9b-4e2b-a811-50f44c32af37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the commit with the changes made in this video.](https://github.com/udacity/reactnd-UdaciFitness-complete/commit/1cc6fd9ce59e9acf6012aa5800b872ac98b5e209)",
              "instructor_notes": ""
            },
            {
              "id": 395872,
              "key": "687db2f3-fcef-48e3-bd75-2ba3344113a2",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "687db2f3-fcef-48e3-bd75-2ba3344113a2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created the `fetchCalendarResults()` function in `api.js`",
                "I have created the `History` component",
                "I have styled `History`",
                "I have connected `History` to the store context with `connect()`",
                "I am rendering the `UdaciFitnessCalendar` in `History`",
                "I am rendering `History` in `app.js`",
                "I have created the `MetricCard` component",
                "I have styled `MetricCard`",
                "I am rendering `MetricCard` in `History`",
                "I am showing a loading screen in `History` by leveraging `AppLoading`"
              ],
              "positive_feedback": "Fantastic!",
              "video_feedback": null,
              "description": "The layout is nearly complete! One more check-in before the next section."
            },
            {
              "id": 394275,
              "key": "470cfde3-39ea-413e-abe2-da25c03e4994",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nReact Native uses **flexbox** to manage layout in mobile applications. However, there are some minor distinctions between the official flexbox specification (i.e., CSS _on the web_) and React Native's own implementation. Most of these distinctions are just differences in default settings.\n\nSince differences also exist in how Android and iOS applications should look and feel, React Native also offers a `Platform` API, which we can leverage to style each platform independently. \n\nIn the next section, we'll take a look at some common \"gotchas\" and best practices when styling components. \n\n### Further Research\n\n* [Understanding React Native flexbox layout](https://medium.com/the-react-native-log/understanding-react-native-flexbox-layout-7a528200afd4)\n* [Platform Specific Code](https://facebook.github.io/react-native/docs/platform-specific-code.html) from the React Native docs",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394148,
          "key": "d50098af-cc56-4b2f-bd6c-3963d82b078e",
          "title": "How Professionals Handle Styling",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d50098af-cc56-4b2f-bd6c-3963d82b078e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394276,
              "key": "e7ad1347-d920-4fc1-bea9-2e8ebdd524a0",
              "title": "Professional CSS Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "I3T17kupyv0",
                "china_cdn_id": "I3T17kupyv0.mp4"
              }
            },
            {
              "id": 394277,
              "key": "3c82f473-70ac-45e1-971d-83edb7edd9a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Styling: `Stylesheet` vs. Inline\n\nEarlier you were introduced to React Native’s `StyleSheet` API for creating “stylesheets” out of JavaScript objects. At first this approach may seem a little strange, but there are some reasons behind it. Primarily those reasons are code quality and performance. Let’s take a look at some comparisons in regards to code quality.\n\n```\n<View style={{\n  borderRadius: 4,\n  borderWidth: 0.5,\n  borderColor: '#d6d7da',\n}}>\n  <Text style={[\n    {fontSize: 19, fontWeight: 'bold'}, \n    props.isActive && { color: 'red' }\n  ]}>\n    Welcome\n  </Text>\n</View>\n\n```\n\nAbove we have some JSX for a pretty simple UI. Notice, that even though this UI is rather simple, the styling of it makes it rather messy. This is perhaps the biggest benefit to the StyleSheet API: by moving styles away from the render function, the code becomes easier to read and understand. Not only that, but _naming_ the styles is a good way to make components a little more declarative. With the `StyleSheet` API, we can change the code above to now look like this:\n\n```\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 4,\n    borderWidth: 0.5,\n    borderColor: '#d6d7da',\n  },\n  title: {\n    fontSize: 19,\n    fontWeight: 'bold',\n  },\n  activeTitle: {\n    color: 'red',\n  },\n});\n\n<View style={styles.container}>\n  <Text style={[styles.title, props.isActive && styles.activeTitle]} />\n</View>\n\n```\n\n\nOn top of quality benefits, there are also performance benefits as well. Making a stylesheet from a style object makes it possible to refer to it by ID instead of creating a new style object every render.",
              "instructor_notes": ""
            },
            {
              "id": 394278,
              "key": "7c423736-a1c5-472c-acbd-30750be03e75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Media Queries\n\nOne thing you may have noticed is that React Native (and specifically the `StyleSheet` API) doesn’t support [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries). The reason for this is because, for the most part, you can design responsive grids with flexbox which will bypass the need to use media queries. In the rare case where flexbox just won’t work for your specific needs, you can use the [Dimensions](https://facebook.github.io/react-native/docs/dimensions.html) API which we covered earlier to get similar results.",
              "instructor_notes": ""
            },
            {
              "id": 394279,
              "key": "b037d940-b491-4e57-8f38-967a4faa3537",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## CSS in JS Libraries\n\nStyling in React is going through a renaissance period right now just as Flux did a few years ago (which eventually gave us Redux). There are many different styling libraries popping up and each has different tradeoffs. \n\nTwo of the most popular are [Glamorous](https://github.com/robinpowered/glamorous-native) and [Styled Components](https://github.com/styled-components/styled-components). The whole idea of both of these libraries is that styling is a primary concern of the component and because of that, should be coupled with the component itself. \n\nLet’s take a look at not only the Styled Components library, but also how you’d use it with React Native.",
              "instructor_notes": ""
            },
            {
              "id": 394280,
              "key": "d3640349-b357-452c-b567-b007632edee7",
              "title": "Styled Components Preview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XF_4MPpvRqs",
                "china_cdn_id": "XF_4MPpvRqs.mp4"
              }
            },
            {
              "id": 394281,
              "key": "2ef4b39c-5234-466e-baf7-54b102fbab48",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nIn this section we took a deeper look into the benefits of the StyleSheet API as well as the Styled Components API and how it works on React Native. \n\n### Further Research\n\nFor further research on Styled Components, you can visit the [official documentation](https://www.styled-components.com/).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394149,
          "key": "2e81df6f-8f79-4f5d-a7c5-2a20af993ad5",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2e81df6f-8f79-4f5d-a7c5-2a20af993ad5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394282,
              "key": "85ed39aa-9af5-4dcd-bf3f-0952fc6e712a",
              "title": "Style & Layout Lesson Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_G2F4Rsq9Hs",
                "china_cdn_id": "_G2F4Rsq9Hs.mp4"
              }
            },
            {
              "id": 688776,
              "key": "62ea2d79-b650-48ca-a7ef-47d60320f77e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's how what you've accomplished in the program thus far maps to your career:",
              "instructor_notes": ""
            },
            {
              "id": 688777,
              "key": "a96634be-7f14-4cbc-ad24-8aa04a25c44c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b60f957_screen-shot-2018-07-31-at-5.05.07-pm/screen-shot-2018-07-31-at-5.05.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a96634be-7f14-4cbc-ad24-8aa04a25c44c",
              "caption": "",
              "alt": "",
              "width": 700,
              "height": 600,
              "instructor_notes": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}