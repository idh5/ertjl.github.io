{
  "data": {
    "lesson": {
      "id": 650352,
      "key": "49853866-e353-4a5f-86c2-21beeac1dfe8",
      "title": "Mobile Flashcards",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Build a mobile flashcard app using React Native.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/49853866-e353-4a5f-86c2-21beeac1dfe8/650352/1544026796967/Mobile+Flashcards+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/49853866-e353-4a5f-86c2-21beeac1dfe8/650352/1544026794171/Mobile+Flashcards+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "81c52641-a264-4903-a16f-adf7a7348497",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 40320,
        "semantic_type": "Project",
        "title": "Mobile Flashcards",
        "description": "* Install `create-react-native-app` if you [haven't already](https://github.com/react-community/create-react-native-app).\n* Create a new React Native project: `create-react-native-app mobile-flashcards`\n* Build your native app.\n* Refer _regularly_ to the project [rubric](https://review.udacity.com/#!/rubrics/1021/view). This is your source of truth for the project specification.\n* Verify your project adheres to our [HTML](http://udacity.github.io/frontend-nanodegree-styleguide/index.html), [CSS](http://udacity.github.io/frontend-nanodegree-styleguide/css.html), [JavaScript](http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html), and [Git](https://udacity.github.io/git-styleguide/) style guidelines.",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2018",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 335994,
          "key": "4a0c5448-4b5d-4f30-8db3-e7aaf0295701",
          "title": "Project Details",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4a0c5448-4b5d-4f30-8db3-e7aaf0295701",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 578166,
              "key": "b48e27b3-36a4-4486-b3ff-142155e417cb",
              "title": "Project: Mobile Flashcards",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fa1yhSA90-w",
                "china_cdn_id": "fa1yhSA90-w.mp4"
              }
            },
            {
              "id": 403129,
              "key": "1210a687-ca32-4760-ac45-1d473a4a93d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Overview\nFor the **UdaciCards** project, you will build a mobile application (Android or iOS - or both) that allows users to study collections of flashcards. The app will allow users to create different categories of flashcards called \"decks\", add flashcards to those decks, then take quizzes on those decks.\n\n## Why this project?\nThis project encompasses the fundamental aspects of building a native application including handling infinite lists, routing, and user input. By building this project, you will gain an understanding of how to use React Native to build an iOS and Android application.\n\n# Specification\nYou'll create your project using **create-react-native-app**. There will be no starter code that you need to download. \n\nThe specification provided in this [rubric](https://review.udacity.com/#!/rubrics/1021/view) is the minimum required for this project. You may extend your project however you'd like.\n\n## Specific Requirements\n* Use create-react-native-app to build your project.\n* Allow users to create a deck which can hold an unlimited number of cards.\n* Allow users to add a card to a specific deck. \n* The front of the card should display the question.\n* The back of the card should display the answer.\n* Users should be able to quiz themselves on a specific deck and receive a score once they're done. \n* Users should receive a notification to remind themselves to study if they haven't already for that day.\n\n## Views\nYour application should have, at a minimum, five views.\n\n* Deck List View (Default View)\n  - displays the title of each Deck\n  - displays the number of cards in each deck",
              "instructor_notes": ""
            },
            {
              "id": 403130,
              "key": "5f15944a-fe01-4b89-96e2-2746ba3abba1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c19a6a_20170919-151343/20170919-151343.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5f15944a-fe01-4b89-96e2-2746ba3abba1",
              "caption": "Deck List View",
              "alt": "Deck List View",
              "width": 1080,
              "height": 1850,
              "instructor_notes": null
            },
            {
              "id": 403131,
              "key": "4fd9dc34-13f2-4e32-8acc-f94c98750461",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Individual Deck View\n  - displays the title of the Deck\n  - displays the number of cards in the deck\n  - displays an option to start a quiz on this specific deck\n  - An option to add a new question to the deck\n",
              "instructor_notes": ""
            },
            {
              "id": 403134,
              "key": "5e9fdce3-b900-4f54-bfc8-b650adaba304",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c19b96_20170919-153231/20170919-153231.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5e9fdce3-b900-4f54-bfc8-b650adaba304",
              "caption": "Individual Deck View",
              "alt": "Individual Deck View",
              "width": 1080,
              "height": 1850,
              "instructor_notes": null
            },
            {
              "id": 403136,
              "key": "41c36ed5-d8e3-44cd-9cc1-4fa4e96c6e91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Quiz View\n  - displays a card question\n  - an option to view the answer (flips the card)\n  - a \"Correct\" button\n  - an \"Incorrect\" button\n  - the number of cards left in the quiz\n  - Displays the percentage correct once the quiz is complete\n",
              "instructor_notes": ""
            },
            {
              "id": 403137,
              "key": "d65297c7-de13-4b1a-b197-1a7dd516ee46",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c19ca8_20170919-151227/20170919-151227.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d65297c7-de13-4b1a-b197-1a7dd516ee46",
              "caption": "Quiz View",
              "alt": "Quiz View",
              "width": 1080,
              "height": 1843,
              "instructor_notes": null
            },
            {
              "id": 403138,
              "key": "d06db047-c1aa-4afc-a81b-822a4d1ef424",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c19d22_20170919-151123/20170919-151123.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d06db047-c1aa-4afc-a81b-822a4d1ef424",
              "caption": "",
              "alt": "",
              "width": 1080,
              "height": 1848,
              "instructor_notes": null
            },
            {
              "id": 403142,
              "key": "e7d7a86b-9c7c-42e4-a506-46b79cd805f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* New Deck View\n  - An option to enter in the title for the new deck\n  - An option to submit the new deck title\n",
              "instructor_notes": ""
            },
            {
              "id": 403147,
              "key": "da5278d0-6469-4506-bddb-91ab7c099353",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c19f5a_20170919-151320/20170919-151320.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/da5278d0-6469-4506-bddb-91ab7c099353",
              "caption": "",
              "alt": "",
              "width": 1080,
              "height": 1846,
              "instructor_notes": null
            },
            {
              "id": 403148,
              "key": "abd48eff-15fc-413c-8d6f-af578fa88e09",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* New Question View\n  - An option to enter in the question\n  - An option to enter in the answer\n  - An option to submit the new question\n",
              "instructor_notes": ""
            },
            {
              "id": 403149,
              "key": "3f296394-84c6-4a2b-ba08-22e2772e81d1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c19f82_20170919-151259/20170919-151259.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3f296394-84c6-4a2b-ba08-22e2772e81d1",
              "caption": "",
              "alt": "",
              "width": 1080,
              "height": 1844,
              "instructor_notes": null
            },
            {
              "id": 403152,
              "key": "18ca24d7-b3c9-4c9c-b4d3-05282eeef2f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Data\n\nWe'll use `AsyncStorage` to store our decks and flashcards. Redux is optional for this project.\n\nUsing `AsyncStorage` you'll manage an object whose shape is similar to this:\n\n```js\n{\n  React: {\n    title: 'React',\n    questions: [\n      {\n        question: 'What is React?',\n        answer: 'A library for managing user interfaces'\n      },\n      {\n        question: 'Where do you make Ajax requests in React?',\n        answer: 'The componentDidMount lifecycle event'\n      }\n    ]\n  },\n  JavaScript: {\n    title: 'JavaScript',\n    questions: [\n      {\n        question: 'What is a closure?',\n        answer: 'The combination of a function and the lexical environment within which that function was declared.'\n      }\n    ]\n  }\n}\n```\n\nNotice each deck creates a new key on the object. Each deck has a `title` and a `questions` key. `title` is the title for the specific deck and `questions` is an array of questions and answers for that deck. \n\n\n## Tip \n\n> To manage your `AsyncStorage` database, you'll want to create four different helper methods.\n\n> `getDecks`: return all of the decks along with their titles, questions, and answers. <br>\n> `getDeck`: take in a single `id` argument and return the deck associated with that id. <br>\n> `saveDeckTitle`: take in a single `title` argument and add it to the decks. <br>\n> `addCardToDeck`: take in two arguments, `title` and `card`, and will add the card to the list of questions for the deck with the associated title. <br>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 668840,
          "key": "26c271c9-6974-4e4f-bfa6-dc9c82fb554d",
          "title": "Project Instructions & Rubric",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "26c271c9-6974-4e4f-bfa6-dc9c82fb554d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 668843,
              "key": "3f80dda6-8706-4e59-b7f7-cf14eebe4d7d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Instructions\n\n* Install `create-react-native-app` if you [haven't already](https://github.com/react-community/create-react-native-app).\n* Create a new React Native project: `create-react-native-app mobile-flashcards`\n* Build your native app.\n* Refer _regularly_ to the project [rubric](https://review.udacity.com/#!/rubrics/1021/view). This is your source of truth for the project specification.\n\n#### Having trouble setting up your local development environment? \n\nDon't get discouraged! Try building your project in an [Expo Snack](https://snack.expo.io)🍎. In order to submit the project, just download the zip file and submit that file.\n\n### Before submitting, please verify that your project:\n\n* Meets all of the specification outlined in the [rubric](https://review.udacity.com/#!/rubrics/1021/view).\n* Verify your project adheres to our [HTML](http://udacity.github.io/frontend-nanodegree-styleguide/index.html), [CSS](http://udacity.github.io/frontend-nanodegree-styleguide/css.html), [JavaScript](http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html), and [Git](https://udacity.github.io/git-styleguide/) style guidelines.",
              "instructor_notes": ""
            },
            {
              "id": 668845,
              "key": "9c2a6df5-aaba-4fc9-80d4-6ea906c07522",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sample Project\n\nWe encourage you to get creative with your projects by adding additional functionality and/or styling (after you've ensured that the project meets all of the specifications in the rubric)! Here's an example:\n",
              "instructor_notes": ""
            },
            {
              "id": 668851,
              "key": "4310c590-a896-4466-beb6-0f01333eb2e7",
              "title": "Mobile-Flashcards-Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_72MNWWaJuE",
                "china_cdn_id": "_72MNWWaJuE.mp4"
              }
            },
            {
              "id": 668844,
              "key": "9be87413-39cc-4b75-87ef-b5f02503238e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Stuck? Got Questions?\n\nIf you are struggling with getting started on the project or implementing a particular functionality, please remember to use your mentorship services, your student community, and [Knowledge](https://knowledge.udacity.com/).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 718439,
          "key": "074acf5d-3238-4762-a544-bcf096501b5c",
          "title": "Step by Step Guide - Mobile Flashcards Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "074acf5d-3238-4762-a544-bcf096501b5c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 782789,
              "key": "dad1bc84-d9c9-4d2e-b549-13fdced1bbca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# *Step by Step Guide - Mobile Flashcards*\n\n## Planning Stage  📐\n\n### Step 1 - Draw All of the Views of the App\nWe need to determine the look and functionality of each view in your app. One of the best approaches is to draw each view of the app on paper so that you'll have a good idea of what information and data you're planning to have on each page.\n\nInstead of paper and pencil, you can be a bit more digital and use [software for creating mockups](https://codingsans.com/blog/mockup-tools). Check your mock against the project [rubric](https://review.udacity.com/#!/rubrics/1021/view) to make sure that you have all of the required features. \n",
              "instructor_notes": ""
            },
            {
              "id": 782791,
              "key": "3adad035-97bb-47c4-931a-ae45dee51ac9",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3adad035-97bb-47c4-931a-ae45dee51ac9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I drew all of the views required for this app."
              ],
              "positive_feedback": "Awesome! You now have a clear idea of what you're trying to build.",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 718443,
              "key": "c687601e-3865-4625-ab30-563aa4b8c4e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 2 - Break Each View Into a Hierarchy of Components\n\nFor this step, do the following:\n\n* draw boxes around every component; and\n* arrange our components into a hierarchy",
              "instructor_notes": ""
            },
            {
              "id": 782794,
              "key": "afc43a01-e96f-469d-bd6c-380b6af6a056",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "afc43a01-e96f-469d-bd6c-380b6af6a056",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I broke each view into a hierarchy of components."
              ],
              "positive_feedback": "Great job making your components reusable!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782792,
              "key": "056349b7-1abe-4bda-819c-46617e8df46e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 3 - Plan out How Your App Will Manage Data \n\nYour project must make use of AsyncStorage to store your data. If are planning to use Redux (which we encourage you to do in order to get more practice with it), make sure to plan out which data will go into the store and which components (if any) will hold their own data. Please feel free to follow the *Step by Step Guide for React/Redux Apps*.",
              "instructor_notes": ""
            },
            {
              "id": 782797,
              "key": "6ef80f9d-62c7-481a-a90d-23a9569cf832",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6ef80f9d-62c7-481a-a90d-23a9569cf832",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have a clear idea of how each piece of data will be managed in my app."
              ],
              "positive_feedback": "Great - this is critical to building predictable, well-structured apps!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782796,
              "key": "176ffe89-55f0-48d4-b8ca-ff626c35e1ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Coding Stage🔨\n\n### Step 1 - Create the Required Views.\n\nFor this step, don't style your components, and don't worry about putting any data or functionality in them; just make bare-bones components. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 782801,
              "key": "0b31cff7-cb01-4474-a0a4-40841971b72e",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0b31cff7-cb01-4474-a0a4-40841971b72e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have built all of the required views for this app."
              ],
              "positive_feedback": "Great job!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782804,
              "key": "3de570f4-6fc2-4dcb-97ae-b4f16b0a2059",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 2 - Use React Native Navigation to Connect the Views.",
              "instructor_notes": ""
            },
            {
              "id": 782806,
              "key": "ed2467b4-ba92-4caa-b8bb-20cf5f4dc204",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ed2467b4-ba92-4caa-b8bb-20cf5f4dc204",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I am able to navigate between screens in accordance with the [rubric](https://review.udacity.com/#!/rubrics/1021/view)."
              ],
              "positive_feedback": "You've made a LOT of progress on your app so far. Keep up the good work!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782798,
              "key": "b4a8fc92-b3b3-45bf-b258-a2abd035dc1a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 3 - Work on the Views and State.\n\nWork on the views and state in accordance with the *Step by Step Guide for React Apps* or the *Step by Step Guide for React/Redux Apps*, depending on whether you choose to use Redux.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 782803,
              "key": "c6db563d-70f8-41a5-bb8e-03453dfa7208",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c6db563d-70f8-41a5-bb8e-03453dfa7208",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have tested my app and the app behaves as expected."
              ],
              "positive_feedback": "Great work!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782802,
              "key": "0bd6f57b-6204-4b2a-8b9a-e998c264d231",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 4 - Add `AsyncStorage`.",
              "instructor_notes": ""
            },
            {
              "id": 782812,
              "key": "91426019-1b06-42fd-92c9-e6afe72c70c5",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "91426019-1b06-42fd-92c9-e6afe72c70c5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I am using AsyncStorage to store and retrieve decks and flashcards."
              ],
              "positive_feedback": "Very good! You're close to finishing the project.",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782810,
              "key": "1b87aa7f-b2a9-4120-b2a4-a3dfd5869c38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 5  - Add notifications.\n",
              "instructor_notes": ""
            },
            {
              "id": 782813,
              "key": "8c76b650-4c9a-4240-b28f-30991e4d7ce0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8c76b650-4c9a-4240-b28f-30991e4d7ce0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have added Notifications to my app.",
                "A Notification is generated at a specific time if the user hasn't completed at least one quiz for that day."
              ],
              "positive_feedback": "Great job!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 782811,
              "key": "615adcad-4936-4a28-9798-3dad448ae4e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 6 - Add finishing touches and make sure the project meets the [rubric](https://review.udacity.com/#!/rubrics/1021/view).",
              "instructor_notes": ""
            },
            {
              "id": 782814,
              "key": "d136afa9-aba1-4f24-ba38-99e8b759b41a",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d136afa9-aba1-4f24-ba38-99e8b759b41a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have thoroughly tested the app against the [rubric](https://review.udacity.com/#!/rubrics/1021/view).",
                "The app works as expected."
              ],
              "positive_feedback": "Great work - you're now ready to submit your project!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 718447,
          "key": "5280ed37-a9ea-4afa-a80f-da30d2403de7",
          "title": "Step by Step Guide - React/Redux Apps",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5280ed37-a9ea-4afa-a80f-da30d2403de7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 718448,
              "key": "8d837181-6a34-472d-9e34-15c3d23d257a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# *Template for Building React/ Redux Projects*\n\n## Planning Stage  📐\n\n### Step 1 - Draw All of the Views of the App\nWe need to determine the look and functionality of each view in your app. One of the best approaches is to draw each view of the app on paper so that you'll have a good idea of what information and data you're planning to have on each page.\n\nInstead of paper and pencil, you can be a bit more digital and use [software for creating mockups](https://codingsans.com/blog/mockup-tools). If you were given project specifications, check your mock against them to make sure that you have all of the required features. \n\n### Step 2 - Break Each View Into a Hierarchy of Components\n\nFor this step, do the following:\n\n* draw boxes around every component; and\n* arrange our components into a hierarchy\n\n### Step 3 - Determine What Events Happen in the App\n\nWe need to take a look at what is happening in each component. Let's determine what actions the app or the user is performing on the data. Is the data being set, modified, or deleted?...then we'll need an action to keep track of that event!\n\n### Step 4  - Determine What Data Lives in the Store\n\nRemember that the main problems that Redux (and the react-redux bindings!)  was meant to solve were:\n\n* Propagation of props through the entire component tree.\n* Ensuring consistency and predictability of the state across the app.\n\nAccording to Dan Abramov, the creator of Redux, we should follow the following principle for determining whether to store a piece of data in the store or in a React component:\n\n> \"Use Redux for state that matters globally or is mutated in complex ways… The rule of thumb is: do whatever is less awkward.\"\n\nTake a look at [Organizing State](https://redux.js.org/faq/organizing-state) and [How to choose between Redux's store and React's state?](https://github.com/reactjs/redux/issues/1287) for further information about this.\n\n### Coding Stage🔨\n\n**Step 1** - Design the [shape of the state](https://redux.js.org/recipes/structuringreducers/normalizingstateshape) and [create reducers](https://redux.js.org/basics/reducers). \n\n**Step 2** - Create a [Redux store](https://redux.js.org/api/store). Connect logger middleware (optional) and Redux Thunk middleware (alternatively, you can use Redux Saga, etc.).\n\n**Step 3** - For each view that needs access to the store, create the component and connect it to the store.\n\n**Step 4** - For the component you created in the last step, create actions and action creators. Check that everything works correctly. \n\n**Step 5** - Repeat Step 3 & Step 4 for each component that needs access to the store.\n\n**Step 6** - Create presentational components and confirm that everything works correctly. \n\n**Step 7** - Add React Router.\n\n**Step 8** - Add finishing touches and make sure the project meets the [rubric](https://review.udacity.com/#!/rubrics/1567/view).\n\nRemember, this is just a template. As you build more projects, you'll modify this template to suit your needs. You may also find it more intuitive to use a different approach. Regardless of the approach you take, however, **planning out your app is imperative to success**. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 718449,
          "key": "ee8b78ff-85ee-4a08-91c8-e247b1e49563",
          "title": "Step by Step Guide - React Apps",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ee8b78ff-85ee-4a08-91c8-e247b1e49563",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 718450,
              "key": "257cdc8c-ae80-49c5-a491-faaaa2b4264c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# *Step by Step Guide for Building React Apps*\n\n## Planning Stage  📐\n\n### Step 1 - Draw All of the Views of the App\nWe need to determine the look and functionality of each view in your app. One of the best approaches is to draw each view of the app on paper so that you'll have a good idea of what information and data you're planning to have on each page.\n\nInstead of paper and pencil, you can be a bit more digital and use [software for creating mockups](https://codingsans.com/blog/mockup-tools). If you were given project specifications, check your mock against them to make sure that you have all of the required features. \n\n### Step 2 - Break Each View Into a Hierarchy of Components\n\nFor this step,\n\n* draw boxes around every component; and\n* arrange our components into a hierarchy\n\n### Step 3 - Determine the Data Each Component Needs\n\nFor each component, determine which data is the component accessing, getting, modifying, or showing.\n\n### Step 4  - Determine Which Component Each Piece of Data Should Live in\n\nIf multiple components need the same data, store the data in the components' closest common ancestor. Take a look at these example to see how that's done: [Lifting State Up](https://reactjs.org/docs/lifting-state-up.html) and [Thinking in React](https://reactjs.org/docs/thinking-in-react.html).\n\n### Coding Stage🔨\n\n**Step 1**- Create components that hold data.\n\n**Step 2** - Create components that need data.\n\n**Step 3** - Pass data from components that have it to components that need it.\n\n**Step 4** - Debug and make sure that everything works as expected.\n\n**Step 5** - Add inverse data flow (if you're confused about what that means, take a look at [this](https://reactjs.org/docs/thinking-in-react.html).\n\n**Step 6** - Add navigation (We'll cover this topic next week - don't worry about it for now).\n\n**Step 7** - Add finishing touches and make sure the project meets the [rubric](https://review.udacity.com/#!/rubrics/918/view).\n\nRemember, this is just a template. As you build more projects, you'll modify this template to suit your needs. You may also find it more intuitive to use a different approach. Regardless of the approach you take, however, **planning out your app is imperative to success**. ",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}