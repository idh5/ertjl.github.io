WEBVTT
Kind: captions
Language: ko

00:00:00.570 --> 00:00:03.310
우리는 서버가 응답문을 보내는 것처럼

00:00:03.310 --> 00:00:05.760
요청문을 직접 작성하여 회선을 통해

00:00:05.760 --> 00:00:07.567
서버로 전송하였습니다

00:00:07.567 --> 00:00:09.150
아주 원시적인것처럼 보입니다

00:00:09.150 --> 00:00:11.820
서버와 제 사이에 아무런 소프트웨어가

00:00:11.820 --> 00:00:13.050
없는 것처럼 말이죠

00:00:13.050 --> 00:00:15.030
하지만 여전히 많은 일들이 일어나고 있습니다

00:00:15.030 --> 00:00:17.340
우리가 눈으로 확인하기 어렵지만

00:00:17.340 --> 00:00:20.550
요청과 응답을 빠르게 하기위해

00:00:20.550 --> 00:00:22.380
엄청난 영향을 주고 있습니다

00:00:22.380 --> 00:00:25.860
여러분이 네트워크 아키텍쳐에 대해

00:00:25.860 --> 00:00:29.430
익숙하시다면 HTTP가 전부가 아니라는 것을

00:00:29.430 --> 00:00:31.050
알고있을 것입니다

00:00:31.050 --> 00:00:32.970
더 완벽한 그림을 그려보면

00:00:32.970 --> 00:00:38.070
HTTP 밑에는 TCP가 있고 이 TCP 밑에는

00:00:38.070 --> 00:00:40.590
IP가 있고 그 밑에는 ethernet이 존재합니다

00:00:40.590 --> 00:00:42.690
이 네트워크 아키텍쳐의 핵심은 우리가 각 레이어에

00:00:42.690 --> 00:00:45.480
대해 잘 몰라도 된다는 것입니다 하지만

00:00:45.480 --> 00:00:47.970
TCP는 우리의 요청을 여떻게 구성하는지와

00:00:47.970 --> 00:00:50.730
그 응답을 보증하는 데

00:00:50.730 --> 00:00:52.740
아주 큰 영향을 미칩니다

00:00:52.740 --> 00:00:55.770
인터넷 프로토콜은 두 머신간의 채널을

00:00:55.770 --> 00:00:57.990
열게 하는데, TCP는 두 머신간의 다수의 채널을

00:00:57.990 --> 00:01:00.480
열고 독립적으로 데이터를 보낼 수 있게

00:01:00.480 --> 00:01:02.370
해줍니다

00:01:02.370 --> 00:01:05.370
이 채널들은 포트 번호로 구분되며

00:01:05.370 --> 00:01:09.180
TCP는 패킷이 순서대로 전송되는 것을

00:01:09.180 --> 00:01:11.760
안전히 보장합니다

00:01:11.760 --> 00:01:15.510
이런 보장은 비용이 따르긴합니다

00:01:15.510 --> 00:01:18.140
또한 두 머신이 서로가 연결을 하고 있다는 것을

00:01:18.140 --> 00:01:21.780
인지하기 위해 실제 데이터 전송전에 TCP handshake라는

00:01:21.780 --> 00:01:24.630
두 라운드 트립 분량의 세팅이 있습니다

00:01:24.630 --> 00:01:28.590
이들 역시 비용이 큽니다

00:01:28.590 --> 00:01:32.580
만약 여러분이 HTTPS를 사용하신다면
TLS handshake라는 추가적인 작업또한

00:01:32.580 --> 00:01:35.100
이루어저야 합니다

00:01:35.100 --> 00:01:38.490
만약 HTTPS나 TLS에 대해 모르신다면

00:01:38.490 --> 00:01:40.950
다음 강의 시간에 알아보겠습니다

00:01:40.950 --> 00:01:43.860
이 작업들이 완료되면 여러분은

00:01:43.860 --> 00:01:45.790
HTTP를 사용할 수 있습니다

00:01:45.790 --> 00:01:47.940
Head-of-line blocking 은 
웹사이트 성능에 큰 영향을 미치는

00:01:47.940 --> 00:01:49.320
병목 현상 입니다.

00:01:49.320 --> 00:01:51.990
이를 막기위해 브라우저는 6개의 채널을 열어주지만

00:01:51.990 --> 00:01:53.850
여전히 문제가 많습니다

00:01:53.850 --> 00:01:56.310
이를 해결하기 위해 HTTTP/2는 어떻게 했는지

00:01:56.310 --> 00:01:58.460
나중에 알아봅시다

