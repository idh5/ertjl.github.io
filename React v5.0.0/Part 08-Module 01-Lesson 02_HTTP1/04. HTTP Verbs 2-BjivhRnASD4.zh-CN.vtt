WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:02.540
记住 请求以 HTTP 方法开头

00:00:02.540 --> 00:00:06.379
随后是路径和要使用的

00:00:06.379 --> 00:00:07.879
HTTP 协议版本

00:00:07.879 --> 00:00:10.699
该请求使用了 HEAD 方法

00:00:10.699 --> 00:00:12.500
HEAD 方法是一个有趣的方法

00:00:12.500 --> 00:00:14.779
因为通过它可以获取文件的所有报头

00:00:14.779 --> 00:00:18.349
而不需要接收整个文件本身

00:00:18.350 --> 00:00:20.690
这样可以检查存储响应的空间是否充足

00:00:20.690 --> 00:00:24.830
或者该网页的缓存版本

00:00:24.829 --> 00:00:26.659
是否依然是最新版本

00:00:26.660 --> 00:00:29.960
这样的话 如果浏览器在缓存中

00:00:29.960 --> 00:00:33.829
依然有该文件的最新版本 就不需要重新下载该文件

00:00:33.829 --> 00:00:35.960
看一下开发者工具的 Network 标签页

00:00:35.960 --> 00:00:38.390
当你访问网站时

00:00:38.390 --> 00:00:40.130
可能不会看到任何 HEAD 请求

00:00:40.130 --> 00:00:42.830
使用 HEAD 验证缓存存在的问题是

00:00:42.829 --> 00:00:45.049
工作量翻了一番

00:00:45.049 --> 00:00:48.409
你发送了 HEAD 请求 然后可能立即

00:00:48.409 --> 00:00:49.579
发送了 GET 请求

00:00:49.579 --> 00:00:52.549
每个请求响应对都被称为一次往返

00:00:52.549 --> 00:00:54.919
需要很长时间才能完成

00:00:54.920 --> 00:00:58.280
现在的网站有大量资源

00:00:58.280 --> 00:01:01.250
在潜在的 GET 请求之前发送 HEAD 请求

00:01:01.250 --> 00:01:03.049
将大幅降低网站的

00:01:03.049 --> 00:01:05.179
加载速度

00:01:05.180 --> 00:01:08.510
我们可以采取一些方法来降低这些往返操作的成本

00:01:08.510 --> 00:01:11.030
稍后将详细讲解

00:01:11.030 --> 00:01:14.120
暂时只需记住

00:01:14.120 --> 00:01:16.520
我们要尽量减少网站的往返操作

00:01:16.519 --> 00:01:20.149
也就是尽量减少请求数量

00:01:20.150 --> 00:01:22.640
最后一个常见方法是 OPTIONS

00:01:22.640 --> 00:01:25.310
OPTIONS 应该能够列出

00:01:25.310 --> 00:01:28.500
当前 URL 可以使用的方法

00:01:28.500 --> 00:01:30.049
但是只有部分服务器支持该方法

00:01:30.049 --> 00:01:32.450
OPTIONS 方法一开始可能看起来很奇怪

00:01:32.450 --> 00:01:35.990
但是当我们讨论它的时候 就会发现它很重要

00:01:35.989 --> 00:01:38.379
稍后我们会讲解的

