WEBVTT
Kind: captions
Language: ko

00:00:00.590 --> 00:00:03.310
웹앱을 개발하실 때
여러분은 많은

00:00:03.310 --> 00:00:04.580
API를 사용합니다

00:00:04.580 --> 00:00:06.411
JavaScript API 중에서는

00:00:06.411 --> 00:00:08.119
JavaScript 함수를 사용하지 않은

00:00:08.119 --> 00:00:09.700
API들도 존재합니다

00:00:09.700 --> 00:00:11.750
또 다른 API는 서드파티로 제공되면

00:00:11.750 --> 00:00:15.000
여러분이 직접 HTTP 요청문을
작성해야 합니다

00:00:15.000 --> 00:00:16.700
RESTful API는 REST라는 설계방식을

00:00:16.700 --> 00:00:20.570
따르며 HTTP에 잘 동작하는 API입니다

00:00:20.570 --> 00:00:22.970
REST는 
Representational state Transfer dlqslek

00:00:22.970 --> 00:00:26.390
솔직히 말해서, 별로 좋은
작명은 아닙니다

00:00:26.390 --> 00:00:29.040
모든 API가 이 설계를 따르지는 않지만,
대부분은 따릅니다

00:00:29.040 --> 00:00:31.580
개념을 살펴봅시다

00:00:31.580 --> 00:00:34.700
이 개체는 오브젝트들의

00:00:34.700 --> 00:00:36.560
모음집입니다

00:00:36.560 --> 00:00:38.900
일반적으로 이 모음집에서 하나의

00:00:38.900 --> 00:00:41.510
항목을 얻기위해서는 GET 메소드를 
사용해야 합니다

00:00:41.510 --> 00:00:43.970
그 항목의 이름을 추가해서 말이죠

00:00:43.970 --> 00:00:46.050
예를 들면, Richard를 보고싶으면

00:00:46.050 --> 00:00:47.990
이 요청을 서버에 보내면

00:00:47.990 --> 00:00:50.955
Richard를 포함한 데이터를 얻을 수 있습니다

00:00:50.955 --> 00:00:53.630
만약 데이터를 수정하고 싶으시면

00:00:53.630 --> 00:00:56.690
PUT 요청을 사용하여 이러한 정보를 추가해서

00:00:56.690 --> 00:00:58.040
보내면 됩니다

00:00:58.040 --> 00:01:00.140
GET 메소드에서 사용한 경로가

00:01:00.140 --> 00:01:02.460
업데이트에서도 사용됩니다

00:01:02.460 --> 00:01:05.000
POST 역시 PUT과 유사하게
사용할 수 있습니다

00:01:05.000 --> 00:01:07.280
하지만 이는 존재하는 기록을 수정하는게

00:01:07.280 --> 00:01:10.070
아니라, 새로운 기록을 생성하는 작업입니다

00:01:10.070 --> 00:01:11.720
따라서 여러분이 생성할 아이템의

00:01:11.720 --> 00:01:13.970
이름 부분을 적을 필요가 없습니다

00:01:13.970 --> 00:01:16.820
서버가 여러분에게 선택하라고
말하기 때문입니다

00:01:16.820 --> 00:01:18.440
POST 요청의 응답은

00:01:18.440 --> 00:01:21.680
여러분에게 새로 생긴 기록으로
redirect 시켜주는 것입니다

00:01:21.680 --> 00:01:24.680
마지막으로 DELETE는 여러분이
생각하는 것과 마찬가지로

00:01:24.680 --> 00:01:28.550
기록을 지우는 것입니다

