WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.330
We have manually written our own request directed to

00:00:03.330 --> 00:00:07.330
the wire and received a response from the server just as the server send it.

00:00:07.330 --> 00:00:09.840
It feels raw, close to the biometal doesn't it?

00:00:09.840 --> 00:00:13.485
Like there's almost no software between us and the bytes being sent and yet,

00:00:13.485 --> 00:00:17.550
there's still so much happening that we can't directly see and it actually has

00:00:17.550 --> 00:00:21.972
a big impact on how fast the entire request response process is.

00:00:21.972 --> 00:00:25.680
If you are a little familiar with networking architecture,

00:00:25.680 --> 00:00:29.115
you might know that HTTP is not the entire story,

00:00:29.115 --> 00:00:30.780
that's merely the protocol.

00:00:30.780 --> 00:00:32.580
For a more complete picture,

00:00:32.580 --> 00:00:35.475
we are using HTTP on top of TCP,

00:00:35.475 --> 00:00:37.875
on top of IP, on top of Ethernet.

00:00:37.875 --> 00:00:40.535
Probably, mostly, maybe.

00:00:40.535 --> 00:00:45.720
The point is, we don't need to understand each of these layers but TCP in particular has

00:00:45.720 --> 00:00:47.925
a big impact on how we should structure

00:00:47.925 --> 00:00:52.710
our requests to have them perform well and it warrants a closer look.

00:00:52.710 --> 00:00:56.925
The Internet Protocol allows us to talk to other machines on the internet while

00:00:56.925 --> 00:01:02.085
TCP allows us to have multiple independent streams of data between these two machines.

00:01:02.085 --> 00:01:05.310
These streams are distinguished by port numbers.

00:01:05.310 --> 00:01:08.175
The TCP protocol also ensures that no packages

00:01:08.175 --> 00:01:11.695
get lost and that they arrive in the right order.

00:01:11.695 --> 00:01:15.390
All of this requires precautions that cost time and resources.

00:01:15.390 --> 00:01:19.900
Opening a new connection is especially costly as the TCP handshake,

00:01:19.900 --> 00:01:22.410
which makes sure both machines are aware of

00:01:22.410 --> 00:01:28.330
the newly created communication channel has to be executed that requires two round trips.

00:01:28.330 --> 00:01:30.540
If you're using HTTPS,

00:01:30.540 --> 00:01:35.010
the additional TLS handshake has to be executed as well.

00:01:35.010 --> 00:01:37.605
If HTTPS and TLS are new to you,

00:01:37.605 --> 00:01:40.920
stick around and we'll talk about them in the next lesson.

00:01:40.920 --> 00:01:42.090
Once all that is done,

00:01:42.090 --> 00:01:45.536
the actual HTTP protocol can finally take over.

00:01:45.536 --> 00:01:49.200
Head-of-line blocking is a huge bottleneck to website performance.

00:01:49.200 --> 00:01:53.790
Browsers being able to open up six parallel connections helps, but it's not great.

00:01:53.790 --> 00:01:57.240
Later, we'll see how HTTP/2 fix this issues with head-of- line blocking.

