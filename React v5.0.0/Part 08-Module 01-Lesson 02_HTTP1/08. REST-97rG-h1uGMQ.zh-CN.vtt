WEBVTT
Kind: captions
Language: zh-CN

00:00:00.590 --> 00:00:03.310
在编写网络应用时 你将遇到

00:00:03.310 --> 00:00:04.580
很多需要与其通信的 API

00:00:04.580 --> 00:00:06.410
某些可能是 JavaScript API

00:00:06.410 --> 00:00:08.118
这些 API 只需调用

00:00:08.118 --> 00:00:09.699
JavaScript 中的函数

00:00:09.699 --> 00:00:11.750
其他 API 是第三方提供的

00:00:11.750 --> 00:00:15.000
需要你自己发出 HTTP 请求

00:00:15.000 --> 00:00:16.699
RESTful API 遵循

00:00:16.699 --> 00:00:20.570
一种叫做 REST 的设计模式 专门用于 HTTP

00:00:20.570 --> 00:00:22.969
REST 是表现层状态转化的简称

00:00:22.969 --> 00:00:26.390
但说实话 光听名称 并不明白是什么意思

00:00:26.390 --> 00:00:29.039
并非所有的 API 都遵守 REST 模式 但是有很多都遵守

00:00:29.039 --> 00:00:31.579
我们来看看这一概念

00:00:31.579 --> 00:00:34.699
基本实体是集合

00:00:34.700 --> 00:00:36.560
以及位于这些集合中的对象

00:00:36.560 --> 00:00:38.900
从集合中获取项目的一般模式是

00:00:38.899 --> 00:00:41.509
使用 GET 请求 加上集合名称

00:00:41.509 --> 00:00:43.969
和集合中的单个条目的名称

00:00:43.969 --> 00:00:46.049
例如 如果我想查询 Richard

00:00:46.049 --> 00:00:47.989
我将发送此请求

00:00:47.990 --> 00:00:50.954
服务器将获取包含 Richard 的数据的记录

00:00:50.954 --> 00:00:53.629
如果我想更新该记录中的数据

00:00:53.630 --> 00:00:56.690
我将使用 PUT 请求并将更新的信息

00:00:56.689 --> 00:00:58.039
添加到该请求中

00:00:58.039 --> 00:01:00.140
每个后续的 GET 请求现在应该

00:01:00.140 --> 00:01:02.460
生成更新后的记录

00:01:02.460 --> 00:01:05.000
POST 请求与 PUT 非常相似

00:01:05.000 --> 00:01:07.280
但是你使用它创建新的记录

00:01:07.280 --> 00:01:10.070
而不是更新现有的记录

00:01:10.069 --> 00:01:11.719
注意 你通常不会提供

00:01:11.719 --> 00:01:13.969
新记录的名称

00:01:13.969 --> 00:01:16.819
而是由服务器来设定

00:01:16.819 --> 00:01:18.439
该 POST 请求的响应

00:01:18.439 --> 00:01:21.679
通常会重定向到新创建的记录

00:01:21.680 --> 00:01:24.680
最后 DELETE 和你想象的一样

00:01:24.680 --> 00:01:28.550
它会从集合中删除条目

