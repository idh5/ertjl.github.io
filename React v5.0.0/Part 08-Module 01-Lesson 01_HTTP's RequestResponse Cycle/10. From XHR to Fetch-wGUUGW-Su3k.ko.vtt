WEBVTT
Kind: captions
Language: ko

00:00:00.500 --> 00:00:02.640
브라우저는 많은 일들을 합니다

00:00:02.640 --> 00:00:04.620
하지만 우리 일상과 마찬가지로

00:00:04.620 --> 00:00:06.630
가장 처음에는 무엇을 해야할지 헷갈립니다

00:00:06.630 --> 00:00:09.000
예로 현재 날씨의 이미지를 보여주는

00:00:09.000 --> 00:00:10.116
웹사이트를 상상해 봅시다

00:00:10.116 --> 00:00:11.490
우리는 미래에 유저가 웹사이트를 방문할 때의

00:00:11.490 --> 00:00:14.460
날씨를 알 수 없습니다

00:00:14.460 --> 00:00:16.440
따라서 우리는 모든 이미지를

00:00:16.440 --> 00:00:18.960
준비하고 있다가 아주 빠른 속도로

00:00:18.960 --> 00:00:21.730
이미지를 보여줘야 합니다

00:00:21.730 --> 00:00:24.817
이제 Ajax에 관해 이야기 해봅시다

00:00:24.817 --> 00:00:26.700
Ajax는 JavaScript를 사용하여

00:00:26.700 --> 00:00:28.680
전체 페이지를 다 새로고침하지 않고

00:00:28.680 --> 00:00:31.530
요청을 보내게 만들어주는

00:00:31.530 --> 00:00:33.810
웹기술들을 말합니다

00:00:33.810 --> 00:00:37.160
XMLHttpRequest 혹은 XHR이라고

00:00:37.160 --> 00:00:40.360
불리는 방법이 바로 이 방법입니다

00:00:40.360 --> 00:00:44.400
하지만 이 방식은 현재 JavaScript가

00:00:44.400 --> 00:00:47.470
제공하는 방식과 비교하면 
너무 복잡합니다

00:00:47.470 --> 00:00:50.460
그래서 우리는 XHR을 생략하고

00:00:50.460 --> 00:00:53.820
Fetch에 대해 알아볼 것입니다

00:00:53.820 --> 00:00:56.790
Fetch는 앞서 말한 XHR과

00:00:56.790 --> 00:00:59.190
동일한 기능을 제공하고

00:00:59.190 --> 00:01:02.250
현재에 쓰이는 JavaScript와 더

00:01:02.250 --> 00:01:03.660
잘 호환됩니다

00:01:03.660 --> 00:01:05.730
이에 대해 더 궁금하다면 
Promises를 찾아보시거나

00:01:05.730 --> 00:01:08.230
강사 메모를 통해서

00:01:08.230 --> 00:01:10.410
JavaScript 강좌를 알아보세요

00:01:10.410 --> 00:01:13.020
Fetch를 이용하면 모든 HTTP 메소드와

00:01:13.020 --> 00:01:16.770
모든 헤더값들을 완전히 세팅을

00:01:16.770 --> 00:01:18.030
할 수 있습니다

00:01:18.030 --> 00:01:20.390
사실 거의 모든 헤더값입니다

00:01:20.390 --> 00:01:22.440
Richard가 여러분에게 간단한 툴을

00:01:22.440 --> 00:01:25.050
통해서 어떻게 Fetch를 쓰나 보여줄 것입니다

00:01:25.050 --> 00:01:27.420
개발자 도구에서 네트워크 탭을 연 뒤

00:01:27.420 --> 00:01:30.600
여러분이 설정한 요청문과 동일한

00:01:30.600 --> 00:01:32.660
요청이 가는지 확인하세요

