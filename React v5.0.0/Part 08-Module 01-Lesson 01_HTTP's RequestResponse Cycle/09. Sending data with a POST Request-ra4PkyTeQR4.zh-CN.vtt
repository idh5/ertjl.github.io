WEBVTT
Kind: captions
Language: zh-CN

00:00:00.180 --> 00:00:02.670
到目前为止 我们都是使用 GET 方法

00:00:02.669 --> 00:00:05.650
请求服务器向我们发送数据

00:00:05.650 --> 00:00:07.890
但是 有时候你可能希望用户

00:00:07.889 --> 00:00:10.679
输入一些数据或上传照片

00:00:10.679 --> 00:00:13.059
并发送至服务器

00:00:13.060 --> 00:00:15.150
这时候 我们之前提到的 POST 方法

00:00:15.150 --> 00:00:16.679
就派上用场了

00:00:16.679 --> 00:00:19.710
对于 POST 请求 请求本身也可以具有

00:00:19.710 --> 00:00:21.780
有效载荷或主体

00:00:21.780 --> 00:00:25.679
即那些我们之前在响应中已经见过 但是没在请求中见过的东西

00:00:25.679 --> 00:00:27.780
数据被发送至服务器后的具体处理流程

00:00:27.780 --> 00:00:30.929
由后端开发者决定

00:00:30.929 --> 00:00:33.119
已经超出这门课程的范畴

00:00:33.119 --> 00:00:35.820
但是 需要知道的是

00:00:35.820 --> 00:00:39.030
代理和浏览器处理 POST 请求的方式

00:00:39.030 --> 00:00:40.439
可能与 GET 请求不同

00:00:40.439 --> 00:00:42.269
见过这种情况吗？

00:00:42.270 --> 00:00:44.430
这就是你当前查看的网页

00:00:44.429 --> 00:00:47.880
是 POST 请求结果时发生的情况

00:00:47.880 --> 00:00:50.310
如果你尝试重新加载此类网站

00:00:50.310 --> 00:00:53.490
浏览器将提示你确认是否执行重新加载操作

00:00:53.490 --> 00:00:56.730
因为 POST 请求可以是破坏性操作

00:00:56.729 --> 00:01:00.239
重复执行的破坏性可能比你想象的

00:01:00.240 --> 00:01:01.380
要严重

00:01:01.380 --> 00:01:03.240
因此通常建议

00:01:03.240 --> 00:01:04.890
后端开发者不要用网站对 POST 请求做出响应

00:01:04.890 --> 00:01:08.760
而是用重定向做出响应

00:01:08.760 --> 00:01:11.190
以避免这种有冲突的行为

00:01:11.189 --> 00:01:14.489
对于用户来说 这种重定向实际上不可见

00:01:14.489 --> 00:01:17.390
但是避免了重新加载问题

