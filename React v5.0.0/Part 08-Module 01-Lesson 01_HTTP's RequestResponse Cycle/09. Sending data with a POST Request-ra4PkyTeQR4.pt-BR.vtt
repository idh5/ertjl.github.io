WEBVTT
Kind: captions
Language: pt-BR

00:00:00.033 --> 00:00:03.967
Até agora só requisitamos
ao servidor o envio de dados

00:00:04.000 --> 00:00:05.533
usando o método GET.

00:00:05.567 --> 00:00:09.167
Mas às vezes podemos querer
que o usuário digite dados

00:00:09.200 --> 00:00:12.633
ou suba imagens
e as envie ao servidor.

00:00:12.867 --> 00:00:16.467
É aí que o método POST ganha
a relevância que mencionamos.

00:00:16.500 --> 00:00:20.500
Com POST, a requisição
pode ter uma carga,

00:00:20.533 --> 00:00:23.700
corpo ou algo
que já vimos em respostas,

00:00:23.733 --> 00:00:25.567
mas não em requisições.

00:00:25.600 --> 00:00:29.367
O que acontece aos dados
quando são enviados ao servidor

00:00:29.400 --> 00:00:32.967
é com o desenvolvedor back-end
e não estão no escopo do curso.

00:00:33.000 --> 00:00:35.633
Mas é importante saber
que requisições POST

00:00:35.667 --> 00:00:38.567
são cuidadas por proxies
e pelo navegador,

00:00:38.600 --> 00:00:40.267
diferente
das requisições GET.

00:00:40.300 --> 00:00:42.167
Já viu um destes?

00:00:42.200 --> 00:00:45.033
É o que acontece quando
a página em que está

00:00:45.067 --> 00:00:47.567
é resultado
de uma requisição POST.

00:00:47.600 --> 00:00:50.000
Se tentar recarregar o site,

00:00:50.033 --> 00:00:53.267
o navegador vai pedir
confirmação da ação,

00:00:53.300 --> 00:00:56.533
pois requisições POST
podem ser operações destrutivas

00:00:56.567 --> 00:01:00.867
e repetir pode ser pior
do que você imagina.

00:01:01.233 --> 00:01:04.200
Por isso, é recomendado
que o desenvolvedor back-end

00:01:04.267 --> 00:01:07.333
não responda uma requisição POST
com um site

00:01:07.367 --> 00:01:09.033
e, sim,
com um redirecionamento,

00:01:09.067 --> 00:01:11.300
evitando
o comportamento destrutivo.

00:01:11.333 --> 00:01:14.400
Para o usuário,
o redirecionamento é invisível,

00:01:14.433 --> 00:01:16.200
mas evita problemas
ao recarregar.

