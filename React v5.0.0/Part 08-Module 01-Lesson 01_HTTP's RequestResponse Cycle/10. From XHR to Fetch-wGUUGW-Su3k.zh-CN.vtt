WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:02.640
浏览器为我们执行了大量任务

00:00:02.640 --> 00:00:04.620
但是就像生活中一样

00:00:04.620 --> 00:00:06.629
我们不会总是一开始就知道想要什么

00:00:06.629 --> 00:00:09.000
假设有个网站想要显示

00:00:09.000 --> 00:00:10.115
当前天气图片

00:00:10.115 --> 00:00:11.490
我们不知道

00:00:11.490 --> 00:00:14.460
用户在未来访问该网站时的天气如何

00:00:14.460 --> 00:00:16.440
当然 我们可以从一开始就加载

00:00:16.440 --> 00:00:18.960
所有可能需要的图片

00:00:18.960 --> 00:00:21.730
但是这种做法很快就变得不现实

00:00:21.730 --> 00:00:24.817
我们来了解下 Ajax

00:00:24.817 --> 00:00:26.699
Ajax 是一系列的 web 技术

00:00:26.699 --> 00:00:28.679
使你能够通过 JavaScript 以程序的方式

00:00:28.679 --> 00:00:31.530
发出请求 而不是浏览并重新加载

00:00:31.530 --> 00:00:33.810
整个网站

00:00:33.810 --> 00:00:37.160
XMLHttpRequest（简称 XHR）

00:00:37.159 --> 00:00:40.359
是目前最常见的执行方式

00:00:40.359 --> 00:00:44.399
与 JavaScript 现今的功能相比

00:00:44.399 --> 00:00:47.469
XHR 的 API 很复杂并且已经过时

00:00:47.469 --> 00:00:50.460
因此我们将跳过 XHR 内容

00:00:50.460 --> 00:00:53.820
并直接使用它的更新版本 Fetch

00:00:53.820 --> 00:00:56.789
Fetch 能执行完全相同的任务

00:00:56.789 --> 00:00:59.189
但是利用了 promise 的 API 更加整洁

00:00:59.189 --> 00:01:02.250
因此 它与其他现代 JavaScript API 的互动性

00:01:02.250 --> 00:01:03.659
更强

00:01:03.659 --> 00:01:05.729
如果你想详细了解 Promise

00:01:05.730 --> 00:01:08.230
请参阅我们的 JavaScript Promise 课程

00:01:08.230 --> 00:01:10.410
讲师注释中有链接

00:01:10.409 --> 00:01:13.019
借助 Fetch 你可以调用协议指定的所有 HTTP 方法

00:01:13.019 --> 00:01:16.769
并完全控制发送哪个

00:01:16.769 --> 00:01:18.030
报头

00:01:18.030 --> 00:01:20.390
当然包括几乎所有的报头

00:01:20.390 --> 00:01:22.439
Richard 将用一个小小的工具

00:01:22.439 --> 00:01:25.049
来演示 Fetch API

00:01:25.049 --> 00:01:27.420
在开发者工具中打开 Networking 标签页

00:01:27.420 --> 00:01:30.600
看看当你指定请求时

00:01:30.599 --> 00:01:32.659
浏览器是否真的发送该请求了

