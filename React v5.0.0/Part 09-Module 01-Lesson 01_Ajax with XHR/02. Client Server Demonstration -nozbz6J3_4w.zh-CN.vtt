WEBVTT
Kind: captions
Language: zh-CN

00:00:00.300 --> 00:00:02.680
我们先来介绍下什么是请求

00:00:02.680 --> 00:00:05.260
可以将互联网想象成一堆人

00:00:05.260 --> 00:00:08.690
来来回回地发送消息

00:00:08.690 --> 00:00:10.840
例如 我将是客户端

00:00:10.840 --> 00:00:14.370
意味着我实际上是 Chrome 或 Firefox 等浏览器

00:00:14.370 --> 00:00:16.239
Jessica 代表互联网

00:00:16.239 --> 00:00:19.660
她是中间人 将来回传递消息

00:00:19.660 --> 00:00:23.410
Ben 是服务器 意味着他是专门向像我这样的浏览器

00:00:23.410 --> 00:00:26.050
提供内容的计算机

00:00:26.050 --> 00:00:29.750
如果我想从 Ben 那获取什么内容 我就会向他发送 get 请求

00:00:29.750 --> 00:00:33.310
get 请求是一种消息 告诉他我是谁 我想要什么

00:00:33.310 --> 00:00:37.778
Jessica 拿到我的消息 并传递给 Ben

00:00:37.778 --> 00:00:42.520
作为服务器 Ben 查看我的消息 然后返回我所请求的内容

00:00:42.520 --> 00:00:43.970
这就叫做响应

00:00:45.630 --> 00:00:49.150
我可以打开响应 然后对其采取某种操作

00:00:50.620 --> 00:00:53.170
为了让网站能够打开 网站会多次请求数据

00:00:53.170 --> 00:00:55.190
就像我和 Ben 正在操作的一样

00:00:56.990 --> 00:01:00.510
大部分情况下 响应对页面加载来说很关键

00:01:00.510 --> 00:01:06.010
例如 我必须获得 Ben 的 HTML 来加载页面 并获得 CSS 来进行布局

00:01:06.010 --> 00:01:06.834
谢谢

00:01:09.503 --> 00:01:12.184
当浏览器发出同步请求

00:01:12.184 --> 00:01:16.070
即没有 AJAX 它必须等待响应 然后才能处理加载操作

00:01:17.160 --> 00:01:20.130
AJAX 很特殊 因为它允许这些请求异步地完成

00:01:20.130 --> 00:01:23.300
意味着可以在后台发生

00:01:23.300 --> 00:01:24.500
而不会阻碍网页的其他内容加载

00:01:25.610 --> 00:01:28.550
让这个比喻再深入一点

00:01:28.550 --> 00:01:32.240
假设我向 Ben 发出了 get 请求

00:01:32.240 --> 00:01:35.720
但是我脑中想好了响应回来后对响应采取的操作

00:01:35.720 --> 00:01:38.970
当我发出请求时 我将写出说明

00:01:38.970 --> 00:01:40.550
并放在一边

00:01:40.550 --> 00:01:42.730
它们就这么静静地在旁边等待着

00:01:42.730 --> 00:01:46.160
现在我可以自由地完成其他任务了

00:01:46.160 --> 00:01:50.170
当 Ben 的响应最终回来后 我打开响应

00:01:50.170 --> 00:01:52.590
看看我的说明 然后针对说明采取操作

00:01:53.620 --> 00:01:56.660
我放在一边的这些说明就叫做回调

00:01:56.660 --> 00:01:58.970
也就是当我获得响应后就会调用它们

