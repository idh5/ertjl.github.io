WEBVTT
Kind: captions
Language: pt-BR

00:00:00.300 --> 00:00:02.680
Vamos começar explicando o que é uma solicitação.

00:00:02.680 --> 00:00:05.260
Na prática, podemos imaginar a Internet como um monte de

00:00:05.260 --> 00:00:08.690
pessoas enviando mensagens umas para as outras.

00:00:08.690 --> 00:00:10.840
Neste exemplo, serei o cliente,

00:00:10.840 --> 00:00:14.370
o que significa que, na verdade, sou um navegador, como Chrome ou Firefox.

00:00:14.370 --> 00:00:16.239
Jessica representa a Internet.

00:00:16.239 --> 00:00:19.660
Ela é a intermediária e passará as informações de uma pessoa para outra.

00:00:19.660 --> 00:00:23.410
E Ben é o servidor, o que significa que ele é o computador dedicado a

00:00:23.410 --> 00:00:26.050
fornecer conteúdo aos navegadores, no caso, eu.

00:00:26.050 --> 00:00:29.750
Se eu quiser algo de Ben, enviarei uma requisição GET para ele.

00:00:29.750 --> 00:00:33.310
Uma requisição GET é uma mensagem que informa a ele quem sou eu e o que eu quero.

00:00:33.310 --> 00:00:37.778
Assim, mando minha mensagem, que passa por Jessica, que a transmite para Ben.

00:00:37.778 --> 00:00:42.520
Ben, o servidor, lê minha mensagem e envia de volta o que solicitei.

00:00:42.520 --> 00:00:43.970
Isso é chamado de resposta.

00:00:45.630 --> 00:00:49.150
Posso abrir a resposta e fazer o que quiser com ela.

00:00:50.620 --> 00:00:53.170
Para que um site seja aberto, muitas solicitações de dados

00:00:53.170 --> 00:00:55.190
são realizadas, como Ben e eu estamos fazendo agora.

00:00:56.990 --> 00:01:00.510
Na maioria das vezes, a resposta é essencial para que a página seja carregada.

00:01:00.510 --> 00:01:06.010
Por exemplo, tenho que obter de Ben o HTML para carregar a página e o CSS para exibi-la.

00:01:06.010 --> 00:01:06.834
Obrigado.

00:01:09.503 --> 00:01:12.184
Quando o navegador faz uma solicitação de modo síncrono, ou

00:01:12.184 --> 00:01:16.070
sem AJAX, ele deve esperar pelas respostas antes de continuar com o carregamento.

00:01:17.160 --> 00:01:20.130
O AJAX é especial porque permite que esses tipos de solicitação

00:01:20.130 --> 00:01:23.300
sejam feitos de modo assíncrono, o que significa que eles podem acontecer em segundo plano sem

00:01:23.300 --> 00:01:24.500
bloquear o restante do carregamento da página.

00:01:25.610 --> 00:01:28.550
Vamos continuar com a nossa analogia.

00:01:28.550 --> 00:01:32.240
Vamos imaginar que envio uma requisição GET para Ben, mas tenho alguns planos em

00:01:32.240 --> 00:01:35.720
mente para o que quero fazer quando a resposta chegar.

00:01:35.720 --> 00:01:38.970
Assim, envio a solicitação e guardo as instruções

00:01:38.970 --> 00:01:40.550
para mais tarde.

00:01:40.550 --> 00:01:42.730
Elas vão ficar aqui esperando pacientemente.

00:01:42.730 --> 00:01:46.160
E eu fico livre para sair e fazer outras coisas.

00:01:46.160 --> 00:01:50.170
Quando a resposta de Ben finalmente chegar, abrirei a resposta,

00:01:50.170 --> 00:01:52.590
olharei minhas instruções e farei qualquer coisa com elas.

00:01:53.620 --> 00:01:56.660
Essas instruções que separo são chamadas de retorno de chamada,

00:01:56.660 --> 00:01:58.970
já que eu as uso quando recebo uma resposta de volta.

