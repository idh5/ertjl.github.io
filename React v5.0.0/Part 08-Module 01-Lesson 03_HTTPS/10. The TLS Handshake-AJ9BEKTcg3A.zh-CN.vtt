WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:03.060
现在我们已经拥有非对称地加密数据

00:00:03.060 --> 00:00:04.560
和分配数据的工具

00:00:04.559 --> 00:00:06.629
我提到这些工具是 TLS 的构建基石

00:00:06.629 --> 00:00:08.550
现在我将证明给你看

00:00:08.550 --> 00:00:10.440
我们来逐步了解浏览器

00:00:10.439 --> 00:00:13.259
设置 TLS 加密连接的流程

00:00:13.259 --> 00:00:15.629
为了简单起见 我依然会忽略一些复杂的细节

00:00:15.630 --> 00:00:18.640
但是不会对概念有影响

00:00:18.640 --> 00:00:21.789
第一步是让服务器向你发送证书

00:00:21.789 --> 00:00:23.710
证书中包含服务器的公钥

00:00:23.710 --> 00:00:25.570
以及其他一些信息

00:00:25.570 --> 00:00:27.850
例如证书的目标网域

00:00:27.850 --> 00:00:31.390
以及证书授权机构的签名

00:00:31.390 --> 00:00:34.840
客户端检查网域是否正确

00:00:34.840 --> 00:00:37.340
并检查授权机构的签名是否有效

00:00:37.340 --> 00:00:40.150
正如之前讨论的

00:00:40.149 --> 00:00:42.609
所有浏览器都在本地具有证书授权机构列表

00:00:42.609 --> 00:00:46.089
包括它们的公钥

00:00:46.090 --> 00:00:48.320
因此不用检查签名是否有效

00:00:48.320 --> 00:00:50.350
现在客户端生成一个对称加密随机密钥

00:00:50.350 --> 00:00:53.620
并一直使用下去

00:00:53.619 --> 00:00:56.919
浏览器使用服务器的公钥对随机密钥进行加密

00:00:56.920 --> 00:00:58.270
并发送出去

00:00:58.270 --> 00:00:59.800
这样做有两个好处

00:00:59.799 --> 00:01:02.469
与非对称加密相比

00:01:02.469 --> 00:01:04.480
对称加密速度快了很多并且更加高效

00:01:04.480 --> 00:01:06.100
能够更好地扩展到大型数据

00:01:06.099 --> 00:01:08.530
但是更重要的是

00:01:08.530 --> 00:01:11.079
服务器只有真的拥有私钥

00:01:11.079 --> 00:01:13.120
并且能够解密新的随机密钥

00:01:13.120 --> 00:01:15.250
才能继续通信

00:01:15.250 --> 00:01:18.549
这样就可以验证服务器的身份

00:01:18.549 --> 00:01:21.099
如果所有这些步骤都成功了

00:01:21.099 --> 00:01:23.649
如果最后的连接建立成功

00:01:23.650 --> 00:01:25.840
HTTP 协议能够接管任务

00:01:25.840 --> 00:01:27.370
此时 你将在浏览器的网址栏中

00:01:27.370 --> 00:01:29.670
获得绿色挂锁符号

