WEBVTT
Kind: captions
Language: zh-CN

00:00:00.640 --> 00:00:02.200
现在 我们知道 HTTP 很容易读懂

00:00:02.200 --> 00:00:05.960
甚至普通人都能读懂 这很让人头疼

00:00:05.960 --> 00:00:09.160
你几乎可以在控制台上实时查看发送的请求

00:00:09.160 --> 00:00:11.570
并且依然理解所发生的情况

00:00:11.570 --> 00:00:13.660
因此我认为 如果有人能够

00:00:13.660 --> 00:00:16.510
以某种方式偷听开放的 HTTP 连接

00:00:16.510 --> 00:00:19.240
偷听者将能够阅读所有的请求和响应

00:00:19.239 --> 00:00:22.029
并提取所需的所有数据

00:00:22.030 --> 00:00:24.880
那么偷听连接有多容易呢？

00:00:24.879 --> 00:00:26.589
正如我在简介部分提到的

00:00:26.589 --> 00:00:29.320
Wi-Fi 使偷听过程更加容易

00:00:29.320 --> 00:00:32.179
因为你直接通过无线电波广播连接

00:00:32.179 --> 00:00:34.060
因此偷听者只需偷听即可

00:00:34.060 --> 00:00:37.210
如果有特殊的监听软件 偷听起来更简单

00:00:37.210 --> 00:00:40.000
更多详情请参阅讲师注释

00:00:40.000 --> 00:00:42.100
加密 Wi-Fi 有所帮助

00:00:42.100 --> 00:00:45.280
但是你无法控制咖啡厅的 Wi-Fi 设置

00:00:45.280 --> 00:00:48.219
以前的加密方法很容易破解

00:00:48.219 --> 00:00:51.600
因此 HTTPS 推出了加密功能

00:00:51.600 --> 00:00:54.130
它将使浏览器加密请求

00:00:54.130 --> 00:00:57.790
只有你要连接的服务器能够解密这些请求

00:00:57.789 --> 00:01:00.490
咖啡厅的店主或恶意偷听者 

00:01:00.490 --> 00:01:03.670
都无法阅读你的数据流

00:01:03.670 --> 00:01:06.340
但是如果你以为你连接到了正确的服务器

00:01:06.340 --> 00:01:07.450
实际上没有呢？

00:01:07.450 --> 00:01:10.242
在中间人攻击（简称 MITM）中

00:01:10.242 --> 00:01:12.700
攻击者在你和要连接的服务器之间

00:01:12.700 --> 00:01:13.780
扮演着中间人的角色

00:01:13.780 --> 00:01:15.310
发生这种情况时

00:01:15.310 --> 00:01:17.621
浏览器将以加密的方式连接到他们的服务器

00:01:17.621 --> 00:01:19.329
而不是你以为你尝试连接的服务器

00:01:19.329 --> 00:01:21.609
例如 Facebook

00:01:21.609 --> 00:01:23.140
攻击者将解密你的数据

00:01:23.140 --> 00:01:24.849
阅读你的所有私密信息

00:01:24.849 --> 00:01:27.939
重新加密这些信息 然后将信息传达给 Facebook 的服务器

00:01:27.939 --> 00:01:28.929
反之亦然

00:01:28.930 --> 00:01:31.060
你和 Facebook 都不知道

00:01:31.060 --> 00:01:32.500
中间有个攻击者

00:01:32.500 --> 00:01:35.680
为了解决这个问题 除了加密功能之外

00:01:35.680 --> 00:01:37.450
HTTPS 还推出了验证功能

00:01:37.450 --> 00:01:39.730
服务器需要标识自己的身份

00:01:39.730 --> 00:01:42.340
只有真正的服务器才能标识自己

00:01:42.340 --> 00:01:44.615
因此你能够确定你与之通信的服务器是正确的服务器

