WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.700
我们已经充分理解了 TLS

00:00:02.700 --> 00:00:04.259
现在来讨论下签名

00:00:04.259 --> 00:00:06.359
我之前提到了证书授权机构

00:00:06.360 --> 00:00:08.220
它们的任务是对证书签名

00:00:08.220 --> 00:00:09.360
是什么意思呢？

00:00:09.359 --> 00:00:12.149
为何有人需要签名的证书？

00:00:12.150 --> 00:00:14.437
当我们提到有人签名了文档

00:00:14.436 --> 00:00:16.019
我们指的是证书授权机构

00:00:16.019 --> 00:00:19.469
已经审查并验证该文档中的内容

00:00:19.469 --> 00:00:21.839
目的是证明

00:00:21.839 --> 00:00:24.809
该实体已查看甚至创建该文档

00:00:32.469 --> 00:00:34.390
就像在文件上签名

00:00:34.390 --> 00:00:36.590
证明你已经看过该文件的法律证据

00:00:36.590 --> 00:00:40.510
服务器也可以通过电子签名来证明

00:00:40.509 --> 00:00:43.239
服务器对文档签名

00:00:43.240 --> 00:00:45.910
并使用它们的私钥加密文档

00:00:45.909 --> 00:00:47.589
然后返回签名的文档

00:00:47.590 --> 00:00:49.750
因为只有私钥的持有者

00:00:49.750 --> 00:00:51.729
能够解密文档

00:00:51.729 --> 00:00:54.789
因此 你知道你接收的文档

00:00:54.789 --> 00:00:57.129
与服务器发送的文档完全一样

00:00:57.130 --> 00:00:59.800
但是 文档可能会很庞大

00:00:59.799 --> 00:01:01.719
例如 DVD 映像

00:01:01.719 --> 00:01:04.420
使用非对称密码加密和解密

00:01:04.420 --> 00:01:06.609
需要很长的时间

00:01:06.609 --> 00:01:10.000
因此只加密文档的哈希

00:01:10.000 --> 00:01:13.069
而不是整个文档本身

00:01:13.069 --> 00:01:15.729
如果你想检测签名是否有效

00:01:15.730 --> 00:01:17.980
可以解密签名并自己对文档进行哈希转换

00:01:17.980 --> 00:01:21.850
看看这两个值是否匹配

00:01:21.849 --> 00:01:24.129
这样我们就知道所接收的文档

00:01:24.129 --> 00:01:27.519
与服务器发送的文档完全一样

00:01:27.519 --> 00:01:29.890
如果文档在传输中被更改了

00:01:29.890 --> 00:01:31.959
则哈希与服务器作为签名提供的值

00:01:31.959 --> 00:01:33.879
不匹配

00:01:33.879 --> 00:01:37.079
这叫做无效签名

